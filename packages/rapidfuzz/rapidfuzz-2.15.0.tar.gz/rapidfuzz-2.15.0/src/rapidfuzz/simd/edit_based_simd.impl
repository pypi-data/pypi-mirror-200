

namespace rf = rapidfuzz;

bool LCSseqSimilarityInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count, const RF_String* str)
{
    if (str_count == 1) return similarity_init<rf::CachedLCSseq, int64_t>(self, str_count, str);

    return multi_similarity_init<rf::experimental::MultiLCSseq, int64_t>(self, str_count, str);
}

bool LCSseqNormalizedSimilarityInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count,
                                    const RF_String* str)
{
    if (str_count == 1) return normalized_similarity_init<rf::CachedLCSseq, double>(self, str_count, str);

    return multi_normalized_similarity_init<rf::experimental::MultiLCSseq, double>(self, str_count, str);
}

bool LCSseqDistanceInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count, const RF_String* str)
{
    if (str_count == 1) return distance_init<rf::CachedLCSseq, int64_t>(self, str_count, str);

    return multi_distance_init<rf::experimental::MultiLCSseq, int64_t>(self, str_count, str);
}

bool LCSseqNormalizedDistanceInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count,
                                  const RF_String* str)
{
    if (str_count == 1) return normalized_distance_init<rf::CachedLCSseq, double>(self, str_count, str);

    return multi_normalized_distance_init<rf::experimental::MultiLCSseq, double>(self, str_count, str);
}

bool LevenshteinSimilarityInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count, const RF_String* str)
{
    if (str_count == 1) return similarity_init<rf::CachedLevenshtein, int64_t>(self, str_count, str);

    return multi_similarity_init<rf::experimental::MultiLevenshtein, int64_t>(self, str_count, str);
}

bool LevenshteinNormalizedSimilarityInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count,
                                         const RF_String* str)
{
    if (str_count == 1)
        return normalized_similarity_init<rf::CachedLevenshtein, double>(self, str_count, str);

    return multi_normalized_similarity_init<rf::experimental::MultiLevenshtein, double>(self, str_count, str);
}

bool LevenshteinDistanceInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count, const RF_String* str)
{
    if (str_count == 1) return distance_init<rf::CachedLevenshtein, int64_t>(self, str_count, str);

    return multi_distance_init<rf::experimental::MultiLevenshtein, int64_t>(self, str_count, str);
}

bool LevenshteinNormalizedDistanceInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count,
                                       const RF_String* str)
{
    if (str_count == 1) return normalized_distance_init<rf::CachedLevenshtein, double>(self, str_count, str);

    return multi_normalized_distance_init<rf::experimental::MultiLevenshtein, double>(self, str_count, str);
}

bool IndelSimilarityInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count, const RF_String* str)
{
    if (str_count == 1) return similarity_init<rf::CachedIndel, int64_t>(self, str_count, str);

    return multi_similarity_init<rf::experimental::MultiIndel, int64_t>(self, str_count, str);
}

bool IndelNormalizedSimilarityInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count,
                                   const RF_String* str)
{
    if (str_count == 1) return normalized_similarity_init<rf::CachedIndel, double>(self, str_count, str);

    return multi_normalized_similarity_init<rf::experimental::MultiIndel, double>(self, str_count, str);
}

bool IndelDistanceInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count, const RF_String* str)
{
    if (str_count == 1) return distance_init<rf::CachedIndel, int64_t>(self, str_count, str);

    return multi_distance_init<rf::experimental::MultiIndel, int64_t>(self, str_count, str);
}

bool IndelNormalizedDistanceInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count,
                                 const RF_String* str)
{
    if (str_count == 1) return normalized_distance_init<rf::CachedIndel, double>(self, str_count, str);

    return multi_normalized_distance_init<rf::experimental::MultiIndel, double>(self, str_count, str);
}

bool OsaSimilarityInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count, const RF_String* str)
{
    if (str_count == 1) return similarity_init<rf::CachedOSA, int64_t>(self, str_count, str);

    return multi_similarity_init<rf::experimental::MultiOSA, int64_t>(self, str_count, str);
}

bool OsaNormalizedSimilarityInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count,
                                   const RF_String* str)
{
    if (str_count == 1) return normalized_similarity_init<rf::CachedOSA, double>(self, str_count, str);

    return multi_normalized_similarity_init<rf::experimental::MultiOSA, double>(self, str_count, str);
}

bool OsaDistanceInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count, const RF_String* str)
{
    if (str_count == 1) return distance_init<rf::CachedOSA, int64_t>(self, str_count, str);

    return multi_distance_init<rf::experimental::MultiOSA, int64_t>(self, str_count, str);
}

bool OsaNormalizedDistanceInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count,
                                 const RF_String* str)
{
    if (str_count == 1) return normalized_distance_init<rf::CachedOSA, double>(self, str_count, str);

    return multi_normalized_distance_init<rf::experimental::MultiOSA, double>(self, str_count, str);
}

bool RatioInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count, const RF_String* str)
{
    if (str_count == 1) return similarity_init<rf::fuzz::CachedRatio, double>(self, str_count, str);

    return multi_similarity_init<rf::fuzz::experimental::MultiRatio, double>(self, str_count, str);
}

bool TokenSortRatioInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count, const RF_String* str)
{
    if (str_count == 1) return similarity_init<rf::fuzz::CachedTokenSortRatio, double>(self, str_count, str);

    return multi_similarity_init<rf::fuzz::experimental::MultiTokenSortRatio, double>(self, str_count, str);
}

bool QRatioInit(RF_ScorerFunc* self, const RF_Kwargs*, int64_t str_count, const RF_String* str)
{
    if (str_count == 1) return similarity_init<rf::fuzz::CachedQRatio, double>(self, str_count, str);

    return multi_similarity_init<rf::fuzz::experimental::MultiQRatio, double>(self, str_count, str);
}
