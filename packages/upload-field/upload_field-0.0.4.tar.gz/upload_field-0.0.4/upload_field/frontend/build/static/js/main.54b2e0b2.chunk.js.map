{"version":3,"sources":["UploadField.js","FileReaderUtils.js","index.tsx"],"names":["i","UploadField","props","state","auth_token","args","project_id","socket_uri","title","sub_index","chunk_size","handleFolderUpload","bind","connect","addFile","query","this","num_files","WebSocket","websocket","onopen","evt","console","log","sendFile","files","onclose","onerror","e","msg","event","target","file_list","length","instance_name","webkitRelativePath","split","includes","push","setState","file_names","style","marginBottom","marginRight","width","padding","borderRadius","border","type","id","webkitdirectory","onChange","hidden","for","cursor","FolderAddOutlined","onClick","UploadOutlined","header","size","bordered","dataSource","renderItem","item","Item","height","overflow","StreamlitComponentBase","index","close","file","send","JSON","stringify","file_name","name","destination","slice","position","onmessage","data","chunk","get_chunk","uploadChunk","Streamlit","setComponentValue","withStreamlitConnection","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54b2e0b2.chunk.js","sourcesContent":["\nimport {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React from \"react\"\nimport { UploadOutlined, FolderAddOutlined } from '@ant-design/icons';\nimport { Button, Row, List } from 'antd';\nimport { get_chunk } from \"./FileReaderUtils\";\n\n\n// the `render()` function is called when component is re-rendered\nclass UploadField extends StreamlitComponentBase {\n  constructor(props) {\n    super(props);\n    this.state = {\n      \"files\": null,\n      \"num_files\": 0,\n      \"file_names\": [],\n      \"file_format\": null,\n      \"progress\": 0,\n    };\n    this.auth_token = props.args[\"auth_token\"];\n    this.project_id = props.args[\"project_id\"];\n    this.socket_uri = props.args[\"socket_uri\"];\n    this.title = props.args[\"title\"];\n    this.sub_index = props.args[\"sub_index\"];\n    this.chunk_size = props.args[\"chunk_size\"]\n    this.handleFolderUpload = this.handleFolderUpload.bind(this);\n    this.connect = this.connect.bind(this);\n    this.addFile = this.addFile.bind(this);\n  };  \n\n  connect() {\n    let query = (\n      \"?auth_token=\"+this.auth_token\n      +\"&project_id=\"+this.project_id\n      +\"&num_files=\"+this.state.num_files\n      +\"&sub_index=\"+this.sub_index\n    );\n    const websocket = new WebSocket(this.socket_uri+query);\n    return websocket\n  };\n\n  async handleFolderUpload() {\n    const websocket = this.connect();\n    websocket.onopen = (evt) => {\n      console.log(\"Socket connection is open\");\n      sendFile(\n        websocket, \n        this.state.files, \n        0, \n        this.chunk_size, \n      );\n    };\n\n    websocket.onclose = function() {\n      console.log(\"Socket connection closed.\");\n    };\n    websocket.onerror = function(e) {\n        console.log(\"Socket connection raised an error.\");\n        console.log(e.msg);\n    };\n  };\n\n  addFile(event) {\n    let files = event.target.files;\n    let file_list = [];\n    for (let i=0; i<files.length; i++){\n      let instance_name = files[i].webkitRelativePath.split(\"/\")[1];\n      if (!file_list.includes(instance_name)){\n        file_list.push(instance_name)\n      };\n    }\n    this.setState({\n      files: files,\n      file_names: file_list,\n      num_files: file_list.length,\n    });\n    console.log(this.state)\n  };\n\n  render() {\n    return (\n      <div>\n        <Row style={{marginBottom: \"10px\"}}>\n          <Button \n            style={{ \n              marginRight: \"10px\",\n              width: \"190px\",\n              padding: \"0.25rem 0.75rem\",\n              borderRadius: \"0.25rem\",\n              border: \"1px solid rgba(49, 51, 63, 0.2)\"\n            }}\n          >\n            <input \n              type=\"file\"\n              id={this.sub_index}\n              webkitdirectory=\"true\"\n              onChange={this.addFile}  \n              hidden={true}\n            />\n\n            <label \n              for={this.sub_index} \n              style={{cursor:\"pointer\", width: \"100%\"}}\n            > \n              Select Folder <FolderAddOutlined /> \n            </label>\n          </Button>\n          <Button \n            onClick={(event) => {this.handleFolderUpload()}}\n            style={{\n              marginRight: \"10px\",\n              width: \"190px\",\n              padding: \"0.25rem 0.75rem\",\n              borderRadius: \"0.25rem\",\n              border: \"1px solid rgba(49, 51, 63, 0.2)\"\n            }}\n          >\n              Start Upload <UploadOutlined />\n          </Button>\n        </Row> \n        <Row>\n        <List \n            header={this.state.title}\n            size=\"small\"\n            bordered\n            dataSource={this.state.file_names}\n            renderItem={(item) => <List.Item>{item}</List.Item>}\n            style={{\n              height: 200,\n              width: \"100%\",\n              overflow: 'auto',\n              padding: '0 16px',\n              border: '1px solid rgba(140, 140, 140, 0.35)',\n            }}\n        />\n        </Row>\n      </div>\n    );\n  }\n}\n\nfunction uploadChunk(websocket, file, position, chunk_size) {\n  let chunk = get_chunk(file, position, chunk_size);\n  websocket.send(chunk);\n  return position + chunk_size;\n};\n\nfunction sendFile(websocket, files, index, chunk_size){\n  console.log(\"Sending file\");\n  if (index>=files.length) {\n    console.log(\"Upload of all files done\");\n    websocket.close(1000);\n  } else {\n    const file = files[index];\n    // HEADER\n    websocket.send(\"HEADER START\");\n    websocket.send(JSON.stringify({\n      file_name: file.name,\n      destination: file.webkitRelativePath.split(\"/\").slice(1),\n    }));\n    websocket.send(\"HEADER END\");\n\n    // FILE\n    let position = 0;\n    websocket.send(\"FILE START\")\n    websocket.onmessage = (evt) => {\n      if (evt.data===\"OK\" & position<file.size) {\n        position = uploadChunk(websocket, file, position, chunk_size);\n        if (position>=file.size){\n          console.log(\"Upload Success\");\n          websocket.send(\"FILE END\");\n        };\n      } else if (evt.data===\"UPLOAD DONE\") {\n        Streamlit.setComponentValue((index+1)/files.length * 100)\n        sendFile(websocket, files, index+1, chunk_size)\n      };\n    };\n  };\n};\n\n// connection between component and Streamlit\nexport default withStreamlitConnection(UploadField)","\nfunction get_chunk(file, position, chunk_size) {\n    let end_position = position+chunk_size;\n    if (end_position<file.size) {\n        return file.slice(position, position+chunk_size);\n    } else {\n        return file.slice(position, file.size);\n    };\n}\n\nexport { get_chunk }","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport UploadField from \"./UploadField\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <UploadField />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}