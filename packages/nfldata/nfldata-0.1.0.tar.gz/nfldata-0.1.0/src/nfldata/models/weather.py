# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nfldata.models.base_model_ import Model
from nfldata import util


class Weather(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, condition=None, date_time=None, forecast=None, humidity=None, temperature=None, wind_direction=None, wind_speed=None):  # noqa: E501
        """Weather - a model defined in OpenAPI

        :param id: The id of this Weather.  # noqa: E501
        :type id: str
        :param condition: The condition of this Weather.  # noqa: E501
        :type condition: str
        :param date_time: The date_time of this Weather.  # noqa: E501
        :type date_time: str
        :param forecast: The forecast of this Weather.  # noqa: E501
        :type forecast: bool
        :param humidity: The humidity of this Weather.  # noqa: E501
        :type humidity: float
        :param temperature: The temperature of this Weather.  # noqa: E501
        :type temperature: float
        :param wind_direction: The wind_direction of this Weather.  # noqa: E501
        :type wind_direction: float
        :param wind_speed: The wind_speed of this Weather.  # noqa: E501
        :type wind_speed: float
        """
        self.openapi_types = {
            'id': str,
            'condition': str,
            'date_time': str,
            'forecast': bool,
            'humidity': float,
            'temperature': float,
            'wind_direction': float,
            'wind_speed': float
        }

        self.attribute_map = {
            'id': 'id',
            'condition': 'condition',
            'date_time': 'dateTime',
            'forecast': 'forecast',
            'humidity': 'humidity',
            'temperature': 'temperature',
            'wind_direction': 'windDirection',
            'wind_speed': 'windSpeed'
        }

        self._id = id
        self._condition = condition
        self._date_time = date_time
        self._forecast = forecast
        self._humidity = humidity
        self._temperature = temperature
        self._wind_direction = wind_direction
        self._wind_speed = wind_speed

    @classmethod
    def from_dict(cls, dikt) -> 'Weather':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Weather of this Weather.  # noqa: E501
        :rtype: Weather
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Weather.

        A UUID. This is referred to as the id of any object's property descriptions in the model. It is intended to be unique.  # noqa: E501

        :return: The id of this Weather.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Weather.

        A UUID. This is referred to as the id of any object's property descriptions in the model. It is intended to be unique.  # noqa: E501

        :param id: The id of this Weather.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def condition(self):
        """Gets the condition of this Weather.

        Weather conditions such as sunny, from a provided enumerated type  # noqa: E501

        :return: The condition of this Weather.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this Weather.

        Weather conditions such as sunny, from a provided enumerated type  # noqa: E501

        :param condition: The condition of this Weather.
        :type condition: str
        """
        allowed_values = ["sunny", "mostly cloudy", "clear", "dome"]  # noqa: E501
        if condition not in allowed_values:
            raise ValueError(
                "Invalid value for `condition` ({0}), must be one of {1}"
                .format(condition, allowed_values)
            )

        self._condition = condition

    @property
    def date_time(self):
        """Gets the date_time of this Weather.

        Date and time of the weather report in ISO8601 format, always UTC. For forecasts, this is the date and time the weather report is for.  # noqa: E501

        :return: The date_time of this Weather.
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this Weather.

        Date and time of the weather report in ISO8601 format, always UTC. For forecasts, this is the date and time the weather report is for.  # noqa: E501

        :param date_time: The date_time of this Weather.
        :type date_time: str
        """
        if date_time is None:
            raise ValueError("Invalid value for `date_time`, must not be `None`")  # noqa: E501

        self._date_time = date_time

    @property
    def forecast(self):
        """Gets the forecast of this Weather.

        Is this a forecast or an actual weather report? True if it is a forecast  # noqa: E501

        :return: The forecast of this Weather.
        :rtype: bool
        """
        return self._forecast

    @forecast.setter
    def forecast(self, forecast):
        """Sets the forecast of this Weather.

        Is this a forecast or an actual weather report? True if it is a forecast  # noqa: E501

        :param forecast: The forecast of this Weather.
        :type forecast: bool
        """

        self._forecast = forecast

    @property
    def humidity(self):
        """Gets the humidity of this Weather.

        Humidity in percent  # noqa: E501

        :return: The humidity of this Weather.
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity):
        """Sets the humidity of this Weather.

        Humidity in percent  # noqa: E501

        :param humidity: The humidity of this Weather.
        :type humidity: float
        """

        self._humidity = humidity

    @property
    def temperature(self):
        """Gets the temperature of this Weather.

        Temperature in fahrenheit  # noqa: E501

        :return: The temperature of this Weather.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this Weather.

        Temperature in fahrenheit  # noqa: E501

        :param temperature: The temperature of this Weather.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def wind_direction(self):
        """Gets the wind_direction of this Weather.

        Wind direction in degrees, 0 is North. Remember this is direction from which the wind originates!  # noqa: E501

        :return: The wind_direction of this Weather.
        :rtype: float
        """
        return self._wind_direction

    @wind_direction.setter
    def wind_direction(self, wind_direction):
        """Sets the wind_direction of this Weather.

        Wind direction in degrees, 0 is North. Remember this is direction from which the wind originates!  # noqa: E501

        :param wind_direction: The wind_direction of this Weather.
        :type wind_direction: float
        """

        self._wind_direction = wind_direction

    @property
    def wind_speed(self):
        """Gets the wind_speed of this Weather.

        Wind speed in miles per hour  # noqa: E501

        :return: The wind_speed of this Weather.
        :rtype: float
        """
        return self._wind_speed

    @wind_speed.setter
    def wind_speed(self, wind_speed):
        """Sets the wind_speed of this Weather.

        Wind speed in miles per hour  # noqa: E501

        :param wind_speed: The wind_speed of this Weather.
        :type wind_speed: float
        """

        self._wind_speed = wind_speed
