# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from nfldata.models.base_model_ import Model
from nfldata.models.components_schemas_team_short_code_enum import ComponentsSchemasTeamShortCodeEnum
from nfldata import util

from nfldata.models.components_schemas_team_short_code_enum import ComponentsSchemasTeamShortCodeEnum  # noqa: E501

class TeamAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, short_code=None):  # noqa: E501
        """TeamAllOf - a model defined in OpenAPI

        :param name: The name of this TeamAllOf.  # noqa: E501
        :type name: List[str]
        :param short_code: The short_code of this TeamAllOf.  # noqa: E501
        :type short_code: ComponentsSchemasTeamShortCodeEnum
        """
        self.openapi_types = {
            'name': List[str],
            'short_code': ComponentsSchemasTeamShortCodeEnum
        }

        self.attribute_map = {
            'name': 'name',
            'short_code': 'shortCode'
        }

        self._name = name
        self._short_code = short_code

    @classmethod
    def from_dict(cls, dikt) -> 'TeamAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Team_allOf of this TeamAllOf.  # noqa: E501
        :rtype: TeamAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this TeamAllOf.

        List of names for the team  # noqa: E501

        :return: The name of this TeamAllOf.
        :rtype: List[str]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TeamAllOf.

        List of names for the team  # noqa: E501

        :param name: The name of this TeamAllOf.
        :type name: List[str]
        """

        self._name = name

    @property
    def short_code(self):
        """Gets the short_code of this TeamAllOf.

        The TeamShortCodeEnum enumeration  # noqa: E501

        :return: The short_code of this TeamAllOf.
        :rtype: ComponentsSchemasTeamShortCodeEnum
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code):
        """Sets the short_code of this TeamAllOf.

        The TeamShortCodeEnum enumeration  # noqa: E501

        :param short_code: The short_code of this TeamAllOf.
        :type short_code: ComponentsSchemasTeamShortCodeEnum
        """
        if short_code is None:
            raise ValueError("Invalid value for `short_code`, must not be `None`")  # noqa: E501

        self._short_code = short_code
