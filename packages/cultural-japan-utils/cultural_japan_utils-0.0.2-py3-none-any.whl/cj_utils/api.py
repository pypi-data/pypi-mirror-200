# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/20_api.ipynb.

# %% auto 0
__all__ = ['Client']

# %% ../nbs/20_api.ipynb 3
from opensearchpy import OpenSearch, RequestsHttpConnection


from opensearchpy import helpers

# %% ../nbs/20_api.ipynb 4
class Client:
    """
    A client to interact with the OpenSearch service.

    Attributes:
        es (OpenSearch): An OpenSearch instance.
    """

    def __init__(self, host, username, password):
        """
        Initialize the OpenSearch client using the provided credentials.
        """    

        # Initialize the OpenSearch instance
        es = OpenSearch(
            hosts=[{'host': host, 'port': 443}],
            http_auth=(username, password),
            use_ssl=True,
            verify_certs=True,
            connection_class=RequestsHttpConnection
        )

        self.es = es

    def show_alias(self, index):
        """
        Get the alias for the specified index.

        Args:
            index (str): The index for which to get the alias.

        Returns:
            dict: The alias information for the specified index.
        """
        return self.es.indices.get_alias(index)

    def get(self, index, id):
        """
        Get a document from the specified index by its ID.

        Args:
            index (str): The index from which to get the document.
            id (str): The ID of the document to get.

        Returns:
            dict: The document with the specified ID from the index.
        """
        return self.es.get(index=index, id=id)

    def update(self, items):
        """
        Update items in the OpenSearch instance using the bulk API.

        Args:
            items (list): A list of items to update.

        Returns:
            tuple: A tuple containing the number of successfully updated items and a list of errors.
        """
        response = helpers.bulk(self.es, items, max_retries=3)
        return response


    def switch_alias(self, alias_prod, alias_dev):
        """
        Elasticsearchのインデックスのエイリアスを切り替える関数です。
        
        この関数は、プロダクション環境と開発環境のインデックスを切り替えるために使用されます。
        
        Args:
            alias_prod (str): プロダクション環境のエイリアス名。
            alias_dev (str): 開発環境のエイリアス名。
        """
        # Elasticsearchインスタンスを取得
        es = self.es
        
        # エイリアスから対応するインデックス名を取得
        index_prod = list(es.indices.get_alias(alias_prod).keys())[0]
        index_dev = list(es.indices.get_alias(alias_dev).keys())[0]

        # エイリアスを切り替えるためのアクションを定義
        update_actions = [
            {"remove": {"index": index_prod, "alias": alias_prod}},
            {"remove": {"index": index_dev, "alias": alias_dev}},
            {"add": {"index": index_prod, "alias": alias_dev}},
            {"add": {"index": index_dev, "alias": alias_prod}},
        ]

        # エイリアスを切り替える
        es.indices.update_aliases({"actions": update_actions})

    def update_alias_dev(self, alias_prod, alias_dev):
        """
        開発環境のElasticsearchインデックスをプロダクション環境から更新する関数です。
        
        この関数は、プロダクション環境のインデックスをコピーして、開発環境のインデックスを更新します。
        
        Args:
            alias_prod (str): プロダクション環境のエイリアス名。
            alias_dev (str): 開発環境のエイリアス名。
        """
        # Elasticsearchインスタンスを取得
        es = self.es
        
        # エイリアスから対応するインデックス名を取得
        index_prod = list(es.indices.get_alias(alias_prod).keys())[0]
        index_dev = list(es.indices.get_alias(alias_dev).keys())[0]

        # 開発環境のインデックスを削除
        es.indices.delete(index_dev)

        # プロダクション環境のインデックスを書き込み不可に設定
        es.indices.put_settings({"index.blocks.write": True}, index_prod)
        
        # プロダクション環境のインデックスを開発環境のインデックスにコピー
        es.indices.clone(index_prod, index_dev)

        # 開発環境のエイリアスを更新するためのアクションを定義
        update_actions = [
            {"add": {"index": index_dev, "alias": alias_dev}},
        ]

        # エイリアスを更新
        es.indices.update_aliases({"actions": update_actions})

    def delete_by_query(self, index, body):
        """
        Elasticsearchのインデックスからクエリに一致するドキュメントを削除する関数です。
        
        Args:
            index (str): インデックス名。
            body (dict): クエリ。
        """
        # Elasticsearchインスタンスを取得
        es = self.es
        
        # クエリに一致するドキュメントを削除
        es.delete_by_query(index=index, body=body, params={"request_timeout": 3600})
