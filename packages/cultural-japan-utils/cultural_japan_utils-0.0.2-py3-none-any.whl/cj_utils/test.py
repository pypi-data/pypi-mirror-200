# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/10_test.ipynb.

# %% auto 0
__all__ = ['bar', 'get_image_info']

# %% ../nbs/10_test.ipynb 3
import json
import os
import requests
from PIL import Image

# %% ../nbs/10_test.ipynb 4
def bar():
    print('bar2')

# %% ../nbs/10_test.ipynb 5
def get_image_info(path, dir_path):
    """
    Get image information from a JSON file and download images to a specified directory.

    Args:
        path (str): Path to the JSON file containing the image information.
        dir_path (str): Directory path where the images will be downloaded.

    Returns:
        list: A list of dictionaries containing the image information, such as label, url, width, and height.
    """
    # Load JSON data from file
    with open(path) as file:
        df = json.load(file)

    # Extract ID from the JSON data
    id = df["_id"]

    # Create output directory using the ID
    dir_id = id.split("-")[0]
    output_dir = f"{dir_path}/{dir_id}/{id}"

    # Define keys to search for in the JSON data
    keys = ["highResolutionImage", "associatedMedia"]

    # Initialize list to store image information
    info_list = []

    # Iterate through the keys
    for key in keys:
        # Set the label based on the key
        label = " (HighResolutionImage)" if key == "highResolutionImage" else ""

        # Continue to the next key if it does not exist in the JSON data
        if key not in df:
            continue

        # Get the image URLs
        urls = df[key]

        # Iterate through the image URLs
        for url in urls:
            # Create the output path for the image
            index = len(info_list) + 1
            output_path = f"{output_dir}/{str(index).zfill(4)}.jpg"

            try:

                # Download and save the image if it does not already exist
                if not os.path.exists(output_path):
                    os.makedirs(output_dir, exist_ok=True)
                    
                    response = requests.get(url, stream=True)
                    image = response.content

                    with open(output_path, "wb") as f:
                        f.write(image)

                # Open the image and get its dimensions
                im = Image.open(output_path)
                width, height = im.size

                # Create a dictionary containing the image information
                info = {
                    "label": f"[{index}{label}]",
                    "url": url,
                    "width": width,
                    "height": height,
                }

                # Add the dictionary to the list of image information
                info_list.append(info)
            except Exception as e:
                os.remove(output_path)
                print(e)


    return info_list

