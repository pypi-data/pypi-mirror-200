# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import secure_operate_pb2 as secure__operate__pb2


class CallStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.execute = channel.unary_unary(
                '/secure_operate.Call/execute',
                request_serializer=secure__operate__pb2.ExecuteRequest.SerializeToString,
                response_deserializer=secure__operate__pb2.ExecuteResponse.FromString,
                )
        self.query = channel.unary_unary(
                '/secure_operate.Call/query',
                request_serializer=secure__operate__pb2.TaskTabRequest.SerializeToString,
                response_deserializer=secure__operate__pb2.ExecuteResponse.FromString,
                )
        self.kill = channel.unary_unary(
                '/secure_operate.Call/kill',
                request_serializer=secure__operate__pb2.TaskTabRequest.SerializeToString,
                response_deserializer=secure__operate__pb2.ExecuteResponse.FromString,
                )
        self.expressions = channel.unary_unary(
                '/secure_operate.Call/expressions',
                request_serializer=secure__operate__pb2.ExpressionsRequest.SerializeToString,
                response_deserializer=secure__operate__pb2.ExpressionsResponse.FromString,
                )


class CallServicer(object):
    """Missing associated documentation comment in .proto file."""

    def execute(self, request, context):
        """算子服务化接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query(self, request, context):
        """异步化辅助查询接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def kill(self, request, context):
        """异步化关闭接口
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def expressions(self, request, context):
        """算子表达式查询请求
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CallServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'execute': grpc.unary_unary_rpc_method_handler(
                    servicer.execute,
                    request_deserializer=secure__operate__pb2.ExecuteRequest.FromString,
                    response_serializer=secure__operate__pb2.ExecuteResponse.SerializeToString,
            ),
            'query': grpc.unary_unary_rpc_method_handler(
                    servicer.query,
                    request_deserializer=secure__operate__pb2.TaskTabRequest.FromString,
                    response_serializer=secure__operate__pb2.ExecuteResponse.SerializeToString,
            ),
            'kill': grpc.unary_unary_rpc_method_handler(
                    servicer.kill,
                    request_deserializer=secure__operate__pb2.TaskTabRequest.FromString,
                    response_serializer=secure__operate__pb2.ExecuteResponse.SerializeToString,
            ),
            'expressions': grpc.unary_unary_rpc_method_handler(
                    servicer.expressions,
                    request_deserializer=secure__operate__pb2.ExpressionsRequest.FromString,
                    response_serializer=secure__operate__pb2.ExpressionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'secure_operate.Call', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Call(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def execute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/secure_operate.Call/execute',
            secure__operate__pb2.ExecuteRequest.SerializeToString,
            secure__operate__pb2.ExecuteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/secure_operate.Call/query',
            secure__operate__pb2.TaskTabRequest.SerializeToString,
            secure__operate__pb2.ExecuteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def kill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/secure_operate.Call/kill',
            secure__operate__pb2.TaskTabRequest.SerializeToString,
            secure__operate__pb2.ExecuteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def expressions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/secure_operate.Call/expressions',
            secure__operate__pb2.ExpressionsRequest.SerializeToString,
            secure__operate__pb2.ExpressionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
