# coding: utf-8

"""
    Xprizo API

    Xprizo api endpoints  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@xprizo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from xprizo_sdk_py import schemas  # noqa: F401


class CurrencyItemModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            isActive = schemas.BoolSchema
            
            
            class code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class fullName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fullName':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class symbol(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'symbol':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            rate = schemas.Float64Schema
            dailyWithdrawalLimit = schemas.Float64Schema
            transferFee = schemas.Float64Schema
            
            
            class depositTypes(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'depositTypes':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            allowCurrencyExchange = schemas.BoolSchema
            __annotations__ = {
                "isActive": isActive,
                "code": code,
                "name": name,
                "fullName": fullName,
                "symbol": symbol,
                "rate": rate,
                "dailyWithdrawalLimit": dailyWithdrawalLimit,
                "transferFee": transferFee,
                "depositTypes": depositTypes,
                "allowCurrencyExchange": allowCurrencyExchange,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isActive"]) -> MetaOapg.properties.isActive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fullName"]) -> MetaOapg.properties.fullName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbol"]) -> MetaOapg.properties.symbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate"]) -> MetaOapg.properties.rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dailyWithdrawalLimit"]) -> MetaOapg.properties.dailyWithdrawalLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transferFee"]) -> MetaOapg.properties.transferFee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depositTypes"]) -> MetaOapg.properties.depositTypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowCurrencyExchange"]) -> MetaOapg.properties.allowCurrencyExchange: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["isActive"], typing_extensions.Literal["code"], typing_extensions.Literal["name"], typing_extensions.Literal["fullName"], typing_extensions.Literal["symbol"], typing_extensions.Literal["rate"], typing_extensions.Literal["dailyWithdrawalLimit"], typing_extensions.Literal["transferFee"], typing_extensions.Literal["depositTypes"], typing_extensions.Literal["allowCurrencyExchange"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isActive"]) -> typing.Union[MetaOapg.properties.isActive, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fullName"]) -> typing.Union[MetaOapg.properties.fullName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbol"]) -> typing.Union[MetaOapg.properties.symbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate"]) -> typing.Union[MetaOapg.properties.rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dailyWithdrawalLimit"]) -> typing.Union[MetaOapg.properties.dailyWithdrawalLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transferFee"]) -> typing.Union[MetaOapg.properties.transferFee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depositTypes"]) -> typing.Union[MetaOapg.properties.depositTypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowCurrencyExchange"]) -> typing.Union[MetaOapg.properties.allowCurrencyExchange, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["isActive"], typing_extensions.Literal["code"], typing_extensions.Literal["name"], typing_extensions.Literal["fullName"], typing_extensions.Literal["symbol"], typing_extensions.Literal["rate"], typing_extensions.Literal["dailyWithdrawalLimit"], typing_extensions.Literal["transferFee"], typing_extensions.Literal["depositTypes"], typing_extensions.Literal["allowCurrencyExchange"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        isActive: typing.Union[MetaOapg.properties.isActive, bool, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, None, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
        fullName: typing.Union[MetaOapg.properties.fullName, None, str, schemas.Unset] = schemas.unset,
        symbol: typing.Union[MetaOapg.properties.symbol, None, str, schemas.Unset] = schemas.unset,
        rate: typing.Union[MetaOapg.properties.rate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dailyWithdrawalLimit: typing.Union[MetaOapg.properties.dailyWithdrawalLimit, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        transferFee: typing.Union[MetaOapg.properties.transferFee, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        depositTypes: typing.Union[MetaOapg.properties.depositTypes, list, tuple, None, schemas.Unset] = schemas.unset,
        allowCurrencyExchange: typing.Union[MetaOapg.properties.allowCurrencyExchange, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CurrencyItemModel':
        return super().__new__(
            cls,
            *_args,
            isActive=isActive,
            code=code,
            name=name,
            fullName=fullName,
            symbol=symbol,
            rate=rate,
            dailyWithdrawalLimit=dailyWithdrawalLimit,
            transferFee=transferFee,
            depositTypes=depositTypes,
            allowCurrencyExchange=allowCurrencyExchange,
            _configuration=_configuration,
        )
