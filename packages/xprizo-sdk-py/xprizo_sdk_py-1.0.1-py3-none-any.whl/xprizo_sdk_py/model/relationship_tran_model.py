# coding: utf-8

"""
    Xprizo API

    Xprizo api endpoints  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@xprizo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from xprizo_sdk_py import schemas  # noqa: F401


class RelationshipTranModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            balance = schemas.Float64Schema
            paid = schemas.Float64Schema
            received = schemas.Float64Schema
            pending = schemas.Float64Schema
            journals = schemas.Float64Schema
            fees = schemas.Float64Schema
            
            
            class transactions(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WalletTranModel']:
                        return WalletTranModel
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'transactions':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "balance": balance,
                "paid": paid,
                "received": received,
                "pending": pending,
                "journals": journals,
                "fees": fees,
                "transactions": transactions,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["balance"]) -> MetaOapg.properties.balance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paid"]) -> MetaOapg.properties.paid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["received"]) -> MetaOapg.properties.received: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pending"]) -> MetaOapg.properties.pending: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["journals"]) -> MetaOapg.properties.journals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fees"]) -> MetaOapg.properties.fees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactions"]) -> MetaOapg.properties.transactions: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["balance"], typing_extensions.Literal["paid"], typing_extensions.Literal["received"], typing_extensions.Literal["pending"], typing_extensions.Literal["journals"], typing_extensions.Literal["fees"], typing_extensions.Literal["transactions"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["balance"]) -> typing.Union[MetaOapg.properties.balance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paid"]) -> typing.Union[MetaOapg.properties.paid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["received"]) -> typing.Union[MetaOapg.properties.received, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pending"]) -> typing.Union[MetaOapg.properties.pending, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["journals"]) -> typing.Union[MetaOapg.properties.journals, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fees"]) -> typing.Union[MetaOapg.properties.fees, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactions"]) -> typing.Union[MetaOapg.properties.transactions, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["balance"], typing_extensions.Literal["paid"], typing_extensions.Literal["received"], typing_extensions.Literal["pending"], typing_extensions.Literal["journals"], typing_extensions.Literal["fees"], typing_extensions.Literal["transactions"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        balance: typing.Union[MetaOapg.properties.balance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        paid: typing.Union[MetaOapg.properties.paid, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        received: typing.Union[MetaOapg.properties.received, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pending: typing.Union[MetaOapg.properties.pending, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        journals: typing.Union[MetaOapg.properties.journals, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fees: typing.Union[MetaOapg.properties.fees, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        transactions: typing.Union[MetaOapg.properties.transactions, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'RelationshipTranModel':
        return super().__new__(
            cls,
            *_args,
            id=id,
            balance=balance,
            paid=paid,
            received=received,
            pending=pending,
            journals=journals,
            fees=fees,
            transactions=transactions,
            _configuration=_configuration,
        )

from xprizo_sdk_py.model.wallet_tran_model import WalletTranModel
