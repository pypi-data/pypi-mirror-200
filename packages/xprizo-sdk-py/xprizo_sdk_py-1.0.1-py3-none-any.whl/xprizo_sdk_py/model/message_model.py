# coding: utf-8

"""
    Xprizo API

    Xprizo api endpoints  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@xprizo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from xprizo_sdk_py import schemas  # noqa: F401


class MessageModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            timestamp = schemas.DateTimeSchema
            contactId = schemas.Int64Schema
            recipientId = schemas.Int64Schema
            
            
            class parentId(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'parentId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class typeCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'typeCode':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class message(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'message':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            isRead = schemas.BoolSchema
            isImportant = schemas.BoolSchema
            isDeleted = schemas.BoolSchema
            
            
            class label(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'label':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class data(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'data':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class recipientName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'recipientName':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def transaction() -> typing.Type['WalletTranModel']:
                return WalletTranModel
            __annotations__ = {
                "id": id,
                "timestamp": timestamp,
                "contactId": contactId,
                "recipientId": recipientId,
                "parentId": parentId,
                "typeCode": typeCode,
                "message": message,
                "isRead": isRead,
                "isImportant": isImportant,
                "isDeleted": isDeleted,
                "label": label,
                "data": data,
                "recipientName": recipientName,
                "transaction": transaction,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactId"]) -> MetaOapg.properties.contactId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipientId"]) -> MetaOapg.properties.recipientId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentId"]) -> MetaOapg.properties.parentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typeCode"]) -> MetaOapg.properties.typeCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isRead"]) -> MetaOapg.properties.isRead: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isImportant"]) -> MetaOapg.properties.isImportant: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isDeleted"]) -> MetaOapg.properties.isDeleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipientName"]) -> MetaOapg.properties.recipientName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction"]) -> 'WalletTranModel': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["timestamp"], typing_extensions.Literal["contactId"], typing_extensions.Literal["recipientId"], typing_extensions.Literal["parentId"], typing_extensions.Literal["typeCode"], typing_extensions.Literal["message"], typing_extensions.Literal["isRead"], typing_extensions.Literal["isImportant"], typing_extensions.Literal["isDeleted"], typing_extensions.Literal["label"], typing_extensions.Literal["data"], typing_extensions.Literal["recipientName"], typing_extensions.Literal["transaction"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> typing.Union[MetaOapg.properties.timestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactId"]) -> typing.Union[MetaOapg.properties.contactId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipientId"]) -> typing.Union[MetaOapg.properties.recipientId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentId"]) -> typing.Union[MetaOapg.properties.parentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typeCode"]) -> typing.Union[MetaOapg.properties.typeCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isRead"]) -> typing.Union[MetaOapg.properties.isRead, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isImportant"]) -> typing.Union[MetaOapg.properties.isImportant, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isDeleted"]) -> typing.Union[MetaOapg.properties.isDeleted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipientName"]) -> typing.Union[MetaOapg.properties.recipientName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction"]) -> typing.Union['WalletTranModel', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["timestamp"], typing_extensions.Literal["contactId"], typing_extensions.Literal["recipientId"], typing_extensions.Literal["parentId"], typing_extensions.Literal["typeCode"], typing_extensions.Literal["message"], typing_extensions.Literal["isRead"], typing_extensions.Literal["isImportant"], typing_extensions.Literal["isDeleted"], typing_extensions.Literal["label"], typing_extensions.Literal["data"], typing_extensions.Literal["recipientName"], typing_extensions.Literal["transaction"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, datetime, schemas.Unset] = schemas.unset,
        contactId: typing.Union[MetaOapg.properties.contactId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        recipientId: typing.Union[MetaOapg.properties.recipientId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        parentId: typing.Union[MetaOapg.properties.parentId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        typeCode: typing.Union[MetaOapg.properties.typeCode, None, str, schemas.Unset] = schemas.unset,
        message: typing.Union[MetaOapg.properties.message, None, str, schemas.Unset] = schemas.unset,
        isRead: typing.Union[MetaOapg.properties.isRead, bool, schemas.Unset] = schemas.unset,
        isImportant: typing.Union[MetaOapg.properties.isImportant, bool, schemas.Unset] = schemas.unset,
        isDeleted: typing.Union[MetaOapg.properties.isDeleted, bool, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, None, str, schemas.Unset] = schemas.unset,
        data: typing.Union[MetaOapg.properties.data, None, str, schemas.Unset] = schemas.unset,
        recipientName: typing.Union[MetaOapg.properties.recipientName, None, str, schemas.Unset] = schemas.unset,
        transaction: typing.Union['WalletTranModel', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MessageModel':
        return super().__new__(
            cls,
            *_args,
            id=id,
            timestamp=timestamp,
            contactId=contactId,
            recipientId=recipientId,
            parentId=parentId,
            typeCode=typeCode,
            message=message,
            isRead=isRead,
            isImportant=isImportant,
            isDeleted=isDeleted,
            label=label,
            data=data,
            recipientName=recipientName,
            transaction=transaction,
            _configuration=_configuration,
        )

from xprizo_sdk_py.model.wallet_tran_model import WalletTranModel
