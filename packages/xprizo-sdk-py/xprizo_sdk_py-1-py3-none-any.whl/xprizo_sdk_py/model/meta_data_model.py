# coding: utf-8

"""
    Xprizo API

    Xprizo api endpoints  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@xprizo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from xprizo_sdk_py import schemas  # noqa: F401


class MetaDataModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            count = schemas.Int32Schema
            offset = schemas.Int32Schema
            limit = schemas.Int32Schema
            pageStart = schemas.Int32Schema
            pageEnd = schemas.Int32Schema
            currentPage = schemas.Int32Schema
            totalPages = schemas.Int32Schema
            isPrevious = schemas.BoolSchema
            previousPage = schemas.Int32Schema
            isNext = schemas.BoolSchema
            nextPage = schemas.Int32Schema
            __annotations__ = {
                "count": count,
                "offset": offset,
                "limit": limit,
                "pageStart": pageStart,
                "pageEnd": pageEnd,
                "currentPage": currentPage,
                "totalPages": totalPages,
                "isPrevious": isPrevious,
                "previousPage": previousPage,
                "isNext": isNext,
                "nextPage": nextPage,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["offset"]) -> MetaOapg.properties.offset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limit"]) -> MetaOapg.properties.limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pageStart"]) -> MetaOapg.properties.pageStart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pageEnd"]) -> MetaOapg.properties.pageEnd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentPage"]) -> MetaOapg.properties.currentPage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalPages"]) -> MetaOapg.properties.totalPages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPrevious"]) -> MetaOapg.properties.isPrevious: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["previousPage"]) -> MetaOapg.properties.previousPage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isNext"]) -> MetaOapg.properties.isNext: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextPage"]) -> MetaOapg.properties.nextPage: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["count"], typing_extensions.Literal["offset"], typing_extensions.Literal["limit"], typing_extensions.Literal["pageStart"], typing_extensions.Literal["pageEnd"], typing_extensions.Literal["currentPage"], typing_extensions.Literal["totalPages"], typing_extensions.Literal["isPrevious"], typing_extensions.Literal["previousPage"], typing_extensions.Literal["isNext"], typing_extensions.Literal["nextPage"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["offset"]) -> typing.Union[MetaOapg.properties.offset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limit"]) -> typing.Union[MetaOapg.properties.limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pageStart"]) -> typing.Union[MetaOapg.properties.pageStart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pageEnd"]) -> typing.Union[MetaOapg.properties.pageEnd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentPage"]) -> typing.Union[MetaOapg.properties.currentPage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalPages"]) -> typing.Union[MetaOapg.properties.totalPages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPrevious"]) -> typing.Union[MetaOapg.properties.isPrevious, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["previousPage"]) -> typing.Union[MetaOapg.properties.previousPage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isNext"]) -> typing.Union[MetaOapg.properties.isNext, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextPage"]) -> typing.Union[MetaOapg.properties.nextPage, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["count"], typing_extensions.Literal["offset"], typing_extensions.Literal["limit"], typing_extensions.Literal["pageStart"], typing_extensions.Literal["pageEnd"], typing_extensions.Literal["currentPage"], typing_extensions.Literal["totalPages"], typing_extensions.Literal["isPrevious"], typing_extensions.Literal["previousPage"], typing_extensions.Literal["isNext"], typing_extensions.Literal["nextPage"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        offset: typing.Union[MetaOapg.properties.offset, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        limit: typing.Union[MetaOapg.properties.limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pageStart: typing.Union[MetaOapg.properties.pageStart, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pageEnd: typing.Union[MetaOapg.properties.pageEnd, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        currentPage: typing.Union[MetaOapg.properties.currentPage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        totalPages: typing.Union[MetaOapg.properties.totalPages, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        isPrevious: typing.Union[MetaOapg.properties.isPrevious, bool, schemas.Unset] = schemas.unset,
        previousPage: typing.Union[MetaOapg.properties.previousPage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        isNext: typing.Union[MetaOapg.properties.isNext, bool, schemas.Unset] = schemas.unset,
        nextPage: typing.Union[MetaOapg.properties.nextPage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MetaDataModel':
        return super().__new__(
            cls,
            *_args,
            count=count,
            offset=offset,
            limit=limit,
            pageStart=pageStart,
            pageEnd=pageEnd,
            currentPage=currentPage,
            totalPages=totalPages,
            isPrevious=isPrevious,
            previousPage=previousPage,
            isNext=isNext,
            nextPage=nextPage,
            _configuration=_configuration,
        )
