# coding: utf-8

"""
    Xprizo API

    Xprizo api endpoints  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@xprizo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from xprizo_sdk_py import schemas  # noqa: F401


class ApprovalStatusModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def statusType() -> typing.Type['PendingTransactionStatus']:
                return PendingTransactionStatus
            
            
            class status(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            actionedById = schemas.Int64Schema
            
            
            class affectedContactIds(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.Int64Schema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'affectedContactIds':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def transaction() -> typing.Type['TranHeadDataModel']:
                return TranHeadDataModel
            __annotations__ = {
                "statusType": statusType,
                "status": status,
                "actionedById": actionedById,
                "affectedContactIds": affectedContactIds,
                "transaction": transaction,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusType"]) -> 'PendingTransactionStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionedById"]) -> MetaOapg.properties.actionedById: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["affectedContactIds"]) -> MetaOapg.properties.affectedContactIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction"]) -> 'TranHeadDataModel': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["statusType"], typing_extensions.Literal["status"], typing_extensions.Literal["actionedById"], typing_extensions.Literal["affectedContactIds"], typing_extensions.Literal["transaction"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusType"]) -> typing.Union['PendingTransactionStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionedById"]) -> typing.Union[MetaOapg.properties.actionedById, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["affectedContactIds"]) -> typing.Union[MetaOapg.properties.affectedContactIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction"]) -> typing.Union['TranHeadDataModel', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["statusType"], typing_extensions.Literal["status"], typing_extensions.Literal["actionedById"], typing_extensions.Literal["affectedContactIds"], typing_extensions.Literal["transaction"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        statusType: typing.Union['PendingTransactionStatus', schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, None, str, schemas.Unset] = schemas.unset,
        actionedById: typing.Union[MetaOapg.properties.actionedById, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        affectedContactIds: typing.Union[MetaOapg.properties.affectedContactIds, list, tuple, None, schemas.Unset] = schemas.unset,
        transaction: typing.Union['TranHeadDataModel', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ApprovalStatusModel':
        return super().__new__(
            cls,
            *_args,
            statusType=statusType,
            status=status,
            actionedById=actionedById,
            affectedContactIds=affectedContactIds,
            transaction=transaction,
            _configuration=_configuration,
        )

from xprizo_sdk_py.model.pending_transaction_status import PendingTransactionStatus
from xprizo_sdk_py.model.tran_head_data_model import TranHeadDataModel
