# coding: utf-8

"""
    Xprizo API

    Xprizo api endpoints  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@xprizo.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from xprizo_sdk_py import schemas  # noqa: F401


class TaskModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            timestamp = schemas.DateTimeSchema
            
            
            class accountId(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accountId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class contactId(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contactId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class contact(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contact':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class typeCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'typeCode':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            createById = schemas.Int64Schema
            
            
            class createdByName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'createdByName':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class assignedToId(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'assignedToId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class assigneeName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'assigneeName':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            isHidden = schemas.BoolSchema
            
            
            class status(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class label(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'label':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class memo(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'memo':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            amount = schemas.Float64Schema
            
            
            class comments(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'comments':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            attachmentCount = schemas.Int32Schema
            __annotations__ = {
                "id": id,
                "timestamp": timestamp,
                "accountId": accountId,
                "contactId": contactId,
                "contact": contact,
                "typeCode": typeCode,
                "createById": createById,
                "createdByName": createdByName,
                "description": description,
                "assignedToId": assignedToId,
                "assigneeName": assigneeName,
                "isHidden": isHidden,
                "status": status,
                "label": label,
                "memo": memo,
                "amount": amount,
                "comments": comments,
                "attachmentCount": attachmentCount,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactId"]) -> MetaOapg.properties.contactId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contact"]) -> MetaOapg.properties.contact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typeCode"]) -> MetaOapg.properties.typeCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createById"]) -> MetaOapg.properties.createById: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdByName"]) -> MetaOapg.properties.createdByName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assignedToId"]) -> MetaOapg.properties.assignedToId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assigneeName"]) -> MetaOapg.properties.assigneeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isHidden"]) -> MetaOapg.properties.isHidden: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["memo"]) -> MetaOapg.properties.memo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachmentCount"]) -> MetaOapg.properties.attachmentCount: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["timestamp"], typing_extensions.Literal["accountId"], typing_extensions.Literal["contactId"], typing_extensions.Literal["contact"], typing_extensions.Literal["typeCode"], typing_extensions.Literal["createById"], typing_extensions.Literal["createdByName"], typing_extensions.Literal["description"], typing_extensions.Literal["assignedToId"], typing_extensions.Literal["assigneeName"], typing_extensions.Literal["isHidden"], typing_extensions.Literal["status"], typing_extensions.Literal["label"], typing_extensions.Literal["memo"], typing_extensions.Literal["amount"], typing_extensions.Literal["comments"], typing_extensions.Literal["attachmentCount"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> typing.Union[MetaOapg.properties.timestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountId"]) -> typing.Union[MetaOapg.properties.accountId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactId"]) -> typing.Union[MetaOapg.properties.contactId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contact"]) -> typing.Union[MetaOapg.properties.contact, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typeCode"]) -> typing.Union[MetaOapg.properties.typeCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createById"]) -> typing.Union[MetaOapg.properties.createById, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdByName"]) -> typing.Union[MetaOapg.properties.createdByName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assignedToId"]) -> typing.Union[MetaOapg.properties.assignedToId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assigneeName"]) -> typing.Union[MetaOapg.properties.assigneeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isHidden"]) -> typing.Union[MetaOapg.properties.isHidden, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["memo"]) -> typing.Union[MetaOapg.properties.memo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> typing.Union[MetaOapg.properties.comments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachmentCount"]) -> typing.Union[MetaOapg.properties.attachmentCount, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["timestamp"], typing_extensions.Literal["accountId"], typing_extensions.Literal["contactId"], typing_extensions.Literal["contact"], typing_extensions.Literal["typeCode"], typing_extensions.Literal["createById"], typing_extensions.Literal["createdByName"], typing_extensions.Literal["description"], typing_extensions.Literal["assignedToId"], typing_extensions.Literal["assigneeName"], typing_extensions.Literal["isHidden"], typing_extensions.Literal["status"], typing_extensions.Literal["label"], typing_extensions.Literal["memo"], typing_extensions.Literal["amount"], typing_extensions.Literal["comments"], typing_extensions.Literal["attachmentCount"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, datetime, schemas.Unset] = schemas.unset,
        accountId: typing.Union[MetaOapg.properties.accountId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        contactId: typing.Union[MetaOapg.properties.contactId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        contact: typing.Union[MetaOapg.properties.contact, None, str, schemas.Unset] = schemas.unset,
        typeCode: typing.Union[MetaOapg.properties.typeCode, None, str, schemas.Unset] = schemas.unset,
        createById: typing.Union[MetaOapg.properties.createById, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createdByName: typing.Union[MetaOapg.properties.createdByName, None, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, None, str, schemas.Unset] = schemas.unset,
        assignedToId: typing.Union[MetaOapg.properties.assignedToId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        assigneeName: typing.Union[MetaOapg.properties.assigneeName, None, str, schemas.Unset] = schemas.unset,
        isHidden: typing.Union[MetaOapg.properties.isHidden, bool, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, None, str, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, None, str, schemas.Unset] = schemas.unset,
        memo: typing.Union[MetaOapg.properties.memo, None, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        comments: typing.Union[MetaOapg.properties.comments, list, tuple, None, schemas.Unset] = schemas.unset,
        attachmentCount: typing.Union[MetaOapg.properties.attachmentCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'TaskModel':
        return super().__new__(
            cls,
            *_args,
            id=id,
            timestamp=timestamp,
            accountId=accountId,
            contactId=contactId,
            contact=contact,
            typeCode=typeCode,
            createById=createById,
            createdByName=createdByName,
            description=description,
            assignedToId=assignedToId,
            assigneeName=assigneeName,
            isHidden=isHidden,
            status=status,
            label=label,
            memo=memo,
            amount=amount,
            comments=comments,
            attachmentCount=attachmentCount,
            _configuration=_configuration,
        )
