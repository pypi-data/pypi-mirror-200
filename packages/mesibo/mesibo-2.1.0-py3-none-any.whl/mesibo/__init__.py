# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


# https://mesibo.com

__mesibo_version__ = '2.1.0'



import ctypes
import platform
import multiprocessing
import sys
import os
import warnings
import inspect



from sys import version_info as _swig_python_version_info

def get_version_folder():
    return platform.python_version_tuple()[0] + "." + platform.python_version_tuple()[1]

def get_platform_folder():
# e.g Linux, Darwin(macos), Windows, Java, etc
    system = platform.system()
    if("" == system):
        system = "unknown"

# e.g x86_64, i386, etc
    machine = platform.machine()
    if("" == machine):
        machine = "unknown"

    return system.lower() + "/" + machine.lower()

MESIBO_LIB = "libmesibo.so"
PYMESIBO_LIB = "_mesibo.so"
CLIB_DIR = "clib"
def get_full_path_to_lib():
    package_dir = os.path.dirname(os.path.realpath(__file__))
    clib_dir = os.path.join(package_dir, CLIB_DIR)
    platform_lib = get_platform_folder()
    lib_path = os.path.join(clib_dir, platform_lib)
    return lib_path

def get_pymesibo_path():
    path = get_full_path_to_lib()
    path = os.path.join(path, get_version_folder())
    return path

def set_path_to_lib():
    sys.path.append(get_pymesibo_path());

def get_mesibo_lib_path():
    path = get_full_path_to_lib()
    return path + "/" + MESIBO_LIB

def get_pymesibo_lib_path():
    path = get_pymesibo_path()
    return path + "/" + PYMESIBO_LIB

def get_python_lib_path():
    package_dir = os.path.dirname(os.path.realpath(__file__))
    return package_dir + "/" + PYMESIBO_LIB

def excepthook(type, value, traceback):
    print(value)

def copy_file(): 
    pypath = get_python_lib_path()
    mesibopath = get_pymesibo_lib_path()
    msize = os.path.getsize(mesibopath)	
    psize = 0	
    if os.path.exists(pypath):
    	psize = os.path.getsize(pypath)	

    if(msize != psize):
        import shutil
        print("trying to install " + mesibopath + " to " + pypath);
        try:
           shutil.copy2(mesibopath, pypath) 
        except Exception:
           pass

# check again if the file was copied
    if os.path.exists(pypath):
        psize = os.path.getsize(pypath)	

# check again size since pip does not remove copied file from the previous version
    if(msize != psize):
        sys.excepthook = excepthook
        raise Exception("mesibo requires following file to be copied. Execute the following command to copy and try again:\n\nsudo /bin/cp -f " + mesibopath + " " + pypath + "\n");


set_path_to_lib();
#print(sys.path);
copy_file();
#print(inspect.currentframe())


# Pull in all the attributes from the low-level C/C++ module
if __package__ or "." in __name__:
    from ._mesibo import *
else:
    from _mesibo import *

def _get_raw_string(s):
    if(not s):
        s = ""
    return s.encode('raw_unicode_escape')


_mesibo_lib = get_mesibo_lib_path()

print("mesibo Python module Version: " + __mesibo_version__)

if(MESIBO_RESULT_FAIL == mesibo_init(_mesibo_lib, __mesibo_version__)):
    raise OSError('Unable to load: '+ _mesibo_lib + ' Platform not supported. Contact us at https://mesibo.com/support')

def getMesiboInstance():
	return createMesiboInstance();





from sys import version_info as _swig_python_version_info
# Pull in all the attributes from the low-level C/C++ module
if __package__ or "." in __name__:
    from ._mesibo import *
else:
    from _mesibo import *
