# (generated with --quick)

import errno
import io
import logging
import re
import socketserver
import struct
import sys
import threading
import traceback
from typing import Any, Dict, Iterator, Type, TypeVar, Union

DEFAULT_LOGGING_CONFIG_PORT: int
IDENTIFIER: re.Pattern
RESET_ERROR: int
StreamRequestHandler: Type[socketserver.StreamRequestHandler]
ThreadingTCPServer: Type[socketserver.ThreadingTCPServer]
_listener: Any
dictConfigClass: Type[DictConfigurator]

_T0 = TypeVar('_T0')

class BaseConfigurator:
    CONVERT_PATTERN: re.Pattern
    DIGIT_PATTERN: re.Pattern
    DOT_PATTERN: re.Pattern
    INDEX_PATTERN: re.Pattern
    WORD_PATTERN: re.Pattern
    __doc__: str
    config: ConvertingDict
    value_converters: Dict[str, str]
    def __init__(self, config) -> None: ...
    def as_tuple(self, value: _T0) -> Union[tuple, _T0]: ...
    def cfg_convert(self, value) -> Any: ...
    def configure_custom(self, config) -> Any: ...
    def convert(self, value) -> Any: ...
    def ext_convert(self, value) -> Any: ...
    @staticmethod
    def importer(name: Union[bytes, str], *args, **kwargs) -> module: ...
    def resolve(self, s) -> Any: ...

class ConvertingDict(dict, ConvertingMixin):
    __doc__: str
    configurator: BaseConfigurator
    def __getitem__(self, key) -> Any: ...
    def get(self, key, default = ...) -> Any: ...
    def pop(self, key, default = ...) -> Any: ...

class ConvertingList(list, ConvertingMixin):
    __doc__: str
    configurator: BaseConfigurator
    def __getitem__(self, key) -> Any: ...
    def pop(self, idx = ...) -> Any: ...

class ConvertingMixin:
    __doc__: str
    def convert(self, value) -> Any: ...
    def convert_with_key(self, key, value, replace = ...) -> Any: ...

class ConvertingTuple(tuple, ConvertingMixin):
    __doc__: str
    configurator: BaseConfigurator
    def __getitem__(self, key) -> Any: ...

class DictConfigurator(BaseConfigurator):
    __doc__: str
    config: ConvertingDict
    def add_filters(self, filterer, filters) -> None: ...
    def add_handlers(self, logger, handlers) -> None: ...
    def common_logger_config(self, logger, config, incremental = ...) -> None: ...
    def configure(self) -> None: ...
    def configure_filter(self, config) -> Any: ...
    def configure_formatter(self, config) -> Any: ...
    def configure_handler(self, config) -> Any: ...
    def configure_logger(self, name, config, incremental = ...) -> None: ...
    def configure_root(self, config, incremental = ...) -> None: ...

def _clearExistingHandlers() -> None: ...
def _create_formatters(cp) -> dict: ...
def _handle_existing_loggers(existing, child_loggers, disable_existing) -> None: ...
def _install_handlers(cp, formatters) -> dict: ...
def _install_loggers(cp, handlers, disable_existing) -> None: ...
def _resolve(name) -> Any: ...
def _strip_spaces(alist) -> Iterator: ...
def dictConfig(config) -> None: ...
def fileConfig(fname, defaults = ..., disable_existing_loggers = ...) -> None: ...
def listen(port = ..., verify = ...) -> Any: ...
def stopListening() -> None: ...
def valid_ident(s) -> bool: ...
