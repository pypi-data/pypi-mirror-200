# (generated with --quick)

import _weakref
import _weakrefset
import atexit
import collections
import io
import os
import re
import string
import sys
import threading
import time
import traceback
import types
import warnings
import weakref
from typing import Annotated, Any, Callable, Dict, Iterable, List, NoReturn, Optional, TextIO, Tuple, Type, TypeVar, Union

BASIC_FORMAT: str
CRITICAL: int
DEBUG: int
ERROR: int
FATAL: int
INFO: int
NOTSET: int
StrFormatter: Type[string.Formatter]
TEST: int
TRAIN: int
Template: Type[string.Template]
WARN: int
WARNING: int
_STYLES: Dict[str, Tuple[Type[PercentStyle], str]]
__all__: List[str]
__author__: str
__date__: str
__status__: str
__version__: str
_at_fork_reinit_lock_weakset: _weakrefset.WeakSet[nothing]
_defaultFormatter: Formatter
_defaultLastResort: _StderrHandler
_handlerList: List[_weakref.ReferenceType]
_handlers: weakref.WeakValueDictionary[nothing, nothing]
_levelToName: dict
_lock: threading._RLock
_logRecordFactory: Any
_loggerClass: Any
_nameToLevel: dict
_srcfile: Any
_startTime: float
_str_formatter: string.Formatter
_warnings_showwarning: Optional[Callable[..., None]]
lastResort: _StderrHandler
logMultiprocessing: bool
logProcesses: bool
logThreads: bool
raiseExceptions: bool
root: RootLogger

_T0 = TypeVar('_T0')
_T1 = TypeVar('_T1')

class BufferingFormatter:
    __doc__: str
    linefmt: Any
    def __init__(self, linefmt = ...) -> None: ...
    def format(self, records) -> str: ...
    def formatFooter(self, records) -> str: ...
    def formatHeader(self, records) -> str: ...

class FileHandler(StreamHandler):
    __doc__: str
    _name: None
    baseFilename: Any
    delay: Any
    encoding: Any
    filters: List[nothing]
    formatter: Optional[Formatter]
    level: Any
    mode: Any
    stream: Any
    def __init__(self, filename, mode = ..., encoding = ..., delay = ...) -> None: ...
    def __repr__(self) -> str: ...
    def _open(self) -> Any: ...
    def close(self) -> None: ...
    def emit(self, record) -> None: ...

class Filter:
    __doc__: str
    name: Any
    nlen: int
    def __init__(self, name = ...) -> None: ...
    def filter(self, record) -> Any: ...

class Filterer:
    __doc__: str
    filters: list
    def __init__(self) -> None: ...
    def addFilter(self, filter) -> None: ...
    def filter(self, record) -> bool: ...
    def removeFilter(self, filter) -> None: ...

class Formatter:
    __doc__: str
    _fmt: Any
    _style: PercentStyle
    datefmt: Any
    default_msec_format: str
    default_time_format: str
    def __init__(self, fmt = ..., datefmt = ..., style = ..., validate = ...) -> None: ...
    def converter(secs: Optional[float] = ...) -> time.struct_time: ...
    def format(self, record) -> Any: ...
    def formatException(self, ei) -> str: ...
    def formatMessage(self, record) -> Any: ...
    def formatStack(self, stack_info: _T0) -> _T0: ...
    def formatTime(self, record, datefmt = ...) -> str: ...
    def usesTime(self) -> Any: ...

class Handler(Filterer):
    __doc__: str
    _name: Any
    filters: List[nothing]
    formatter: Any
    level: Any
    lock: threading._RLock
    name: Annotated[Any, 'property']
    def __init__(self, level = ...) -> None: ...
    def __repr__(self) -> str: ...
    def acquire(self) -> None: ...
    def close(self) -> None: ...
    def createLock(self) -> None: ...
    def emit(self, record) -> NoReturn: ...
    def flush(self) -> None: ...
    def format(self, record) -> Any: ...
    def get_name(self) -> Any: ...
    def handle(self, record) -> bool: ...
    def handleError(self, record) -> None: ...
    def release(self) -> None: ...
    def setFormatter(self, fmt) -> None: ...
    def setLevel(self, level) -> None: ...
    def set_name(self, name) -> None: ...

class LogRecord:
    __doc__: str
    args: Any
    created: float
    exc_info: Any
    exc_text: None
    filename: Any
    funcName: Any
    levelname: Any
    levelno: Any
    lineno: Any
    module: Any
    msecs: float
    msg: Any
    name: Any
    pathname: Any
    process: Optional[int]
    processName: Any
    relativeCreated: float
    stack_info: Any
    thread: Optional[int]
    threadName: Optional[str]
    def __init__(self, name, level, pathname, lineno, msg, args, exc_info, func = ..., sinfo = ..., **kwargs) -> None: ...
    def __repr__(self) -> str: ...
    def getMessage(self) -> str: ...

class Logger(Filterer):
    __doc__: str
    _cache: dict
    disabled: bool
    filters: List[nothing]
    handlers: list
    level: Any
    manager: Manager
    name: Any
    parent: Any
    propagate: bool
    root: RootLogger
    def __init__(self, name, level = ...) -> None: ...
    def __reduce__(self) -> Tuple[Callable, Tuple[Any]]: ...
    def __repr__(self) -> str: ...
    def _log(self, level, msg, args, exc_info = ..., extra = ..., stack_info = ..., stacklevel = ...) -> None: ...
    def addHandler(self, hdlr) -> None: ...
    def callHandlers(self, record) -> NoReturn: ...
    def critical(self, msg, *args, **kwargs) -> None: ...
    def debug(self, msg, *args, **kwargs) -> None: ...
    def error(self, msg, *args, **kwargs) -> None: ...
    def exception(self, msg, *args, exc_info = ..., **kwargs) -> None: ...
    def fatal(self, msg, *args, **kwargs) -> None: ...
    def findCaller(self, stack_info = ..., stacklevel = ...) -> Tuple[Any, Any, Any, Optional[str]]: ...
    def getChild(self, suffix) -> Any: ...
    def getEffectiveLevel(self) -> Any: ...
    def handle(self, record) -> None: ...
    def hasHandlers(self) -> bool: ...
    def info(self, msg, *args, **kwargs) -> None: ...
    def isEnabledFor(self, level) -> Any: ...
    def log(self, level, msg, *args, **kwargs) -> None: ...
    def makeRecord(self, name, level, fn, lno, msg, args, exc_info, func = ..., extra = ..., sinfo = ...) -> LogRecord: ...
    def removeHandler(self, hdlr) -> None: ...
    def setLevel(self, level) -> None: ...
    def test(self, msg, *args, **kwargs) -> None: ...
    def train(self, msg, *args, **kwargs) -> None: ...
    def warn(self, msg, *args, **kwargs) -> None: ...
    def warning(self, msg, *args, **kwargs) -> None: ...

class LoggerAdapter:
    __doc__: str
    extra: Any
    logger: Any
    manager: Annotated[Any, 'property']
    name: Annotated[Any, 'property']
    def __init__(self, logger, extra) -> None: ...
    def __repr__(self) -> str: ...
    def _log(self, level, msg, args, exc_info = ..., extra = ..., stack_info = ...) -> Any: ...
    def critical(self, msg, *args, **kwargs) -> None: ...
    def debug(self, msg, *args, **kwargs) -> None: ...
    def error(self, msg, *args, **kwargs) -> None: ...
    def exception(self, msg, *args, exc_info = ..., **kwargs) -> None: ...
    def getEffectiveLevel(self) -> Any: ...
    def hasHandlers(self) -> Any: ...
    def info(self, msg, *args, **kwargs) -> None: ...
    def isEnabledFor(self, level) -> Any: ...
    def log(self, level, msg, *args, **kwargs) -> None: ...
    def process(self, msg: _T0, kwargs: _T1) -> Tuple[_T0, _T1]: ...
    def setLevel(self, level) -> None: ...
    def warn(self, msg, *args, **kwargs) -> None: ...
    def warning(self, msg, *args, **kwargs) -> None: ...

class Manager:
    __doc__: str
    _disable: Any
    disable: Annotated[Any, 'property']
    emittedNoHandlerWarning: bool
    logRecordFactory: Any
    loggerClass: Any
    loggerDict: dict
    root: Any
    def __init__(self, rootnode) -> None: ...
    def _clear_cache(self) -> None: ...
    def _fixupChildren(self, ph, alogger) -> None: ...
    def _fixupParents(self, alogger) -> None: ...
    def getLogger(self, name) -> Any: ...
    def setLogRecordFactory(self, factory) -> None: ...
    def setLoggerClass(self, klass) -> None: ...

class NullHandler(Handler):
    __doc__: str
    _name: None
    filters: List[nothing]
    formatter: None
    level: Any
    lock: None
    def createLock(self) -> None: ...
    def emit(self, record) -> None: ...
    def handle(self, record) -> None: ...

class PercentStyle:
    _fmt: Any
    asctime_format: str
    asctime_search: str
    default_format: str
    validation_pattern: re.Pattern
    def __init__(self, fmt) -> None: ...
    def _format(self, record) -> Any: ...
    def format(self, record) -> Any: ...
    def usesTime(self) -> Any: ...
    def validate(self) -> None: ...

class PlaceHolder:
    __doc__: str
    loggerMap: Dict[Any, None]
    def __init__(self, alogger) -> None: ...
    def append(self, alogger) -> None: ...

class RootLogger(Logger):
    __doc__: str
    _cache: Dict[nothing, nothing]
    disabled: bool
    filters: List[nothing]
    handlers: list
    level: Any
    name: str
    parent: None
    propagate: bool
    def __init__(self, level) -> None: ...
    def __reduce__(self) -> Tuple[Callable, Tuple[()]]: ...

class StrFormatStyle(PercentStyle):
    _fmt: Any
    asctime_format: str
    asctime_search: str
    default_format: str
    field_spec: re.Pattern
    fmt_spec: re.Pattern
    def _format(self, record) -> Any: ...
    def validate(self) -> None: ...

class StreamHandler(Handler):
    __doc__: str
    _name: None
    filters: List[nothing]
    formatter: Optional[Formatter]
    level: Any
    stream: Any
    terminator: str
    def __init__(self, stream = ...) -> None: ...
    def __repr__(self) -> str: ...
    def emit(self, record) -> None: ...
    def flush(self) -> None: ...
    def setStream(self, stream) -> Any: ...

class StringTemplateStyle(PercentStyle):
    _fmt: Any
    _tpl: string.Template
    asctime_format: str
    asctime_search: str
    default_format: str
    def __init__(self, fmt) -> None: ...
    def _format(self, record) -> str: ...
    def usesTime(self) -> Any: ...
    def validate(self) -> None: ...

class _StderrHandler(StreamHandler):
    __doc__: str
    _name: None
    filters: List[nothing]
    formatter: None
    level: Any
    lock: threading._RLock
    stream: Annotated[TextIO, 'property']
    def __init__(self, level = ...) -> None: ...

def _acquireLock() -> None: ...
def _addHandlerRef(handler) -> None: ...
def _after_at_fork_child_reinit_locks() -> None: ...
def _checkLevel(level: _T0) -> Union[int, _T0]: ...
def _register_at_fork_reinit_lock(instance) -> None: ...
def _releaseLock() -> None: ...
def _removeHandlerRef(wr) -> None: ...
def _showwarning(message, category, filename, lineno, file = ..., line = ...) -> None: ...
def addLevelName(level, levelName) -> None: ...
def basicConfig(**kwargs) -> None: ...
def captureWarnings(capture) -> None: ...
def colored(text: str, color: Optional[str] = ..., on_color: Optional[str] = ..., attrs: Optional[Iterable[str]] = ...) -> str: ...
def critical(msg, *args, **kwargs) -> None: ...
def currentframe() -> types.FrameType: ...
def debug(msg, *args, **kwargs) -> None: ...
def disable(level = ...) -> None: ...
def error(msg, *args, **kwargs) -> None: ...
def exception(msg, *args, exc_info = ..., **kwargs) -> None: ...
def fatal(msg, *args, **kwargs) -> None: ...
def getLevelName(level) -> Any: ...
def getLogRecordFactory() -> Type[LogRecord]: ...
def getLogger(name = ...) -> Any: ...
def getLoggerClass() -> Type[Logger]: ...
def info(msg, *args, **kwargs) -> None: ...
def log(level, msg, *args, **kwargs) -> None: ...
def makeLogRecord(dict) -> LogRecord: ...
def setLogRecordFactory(factory) -> None: ...
def setLoggerClass(klass) -> None: ...
def shutdown(handlerList = ...) -> None: ...
def warn(msg, *args, **kwargs) -> None: ...
def warning(msg, *args, **kwargs) -> None: ...
