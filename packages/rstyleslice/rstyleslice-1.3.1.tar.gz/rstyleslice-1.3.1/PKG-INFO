Metadata-Version: 2.1
Name: rstyleslice
Version: 1.3.1
Summary: 一套符合直觉的索引和切片语法
Keywords: rstyleslice,slice
Author-email: 许灿标 <lcctoor@outlook.com>
Description-Content-Type: text/markdown
Classifier: License :: OSI Approved :: Apache Software License
Project-URL: Documentation, https://github.com/lcctoor/lccpy/blob/main/rstyleslice/docs/doc.md

# 项目描述

一套符合直觉的索引和切片语法。

|                                        | **Python**                                               | **rstyleslice**                                          |
| -------------------------------------- | -------------------------------------------------------------- | -------------------------------------------------------------- |
| **索引**                         | 从0开始<br />0表示第1个元素<br />-1表示倒数第1个元素（相同点） | 从1开始<br />1表示第1个元素<br />-1表示倒数第1个元素（相同点） |
| **切片**                         | 左闭右开区间<br />[3: 5]表示提取第4、5这2个元素                | 双闭区间<br />[3: 5]表示提取第3、4、5这3个元素                 |
| **从右往**<br />**左切片** | step（步长）为负值<br />[9: 1: -1]表示提取第9~3这7个元素       | step（步长）始终为正值<br />[9: 1: 1]表示提取第9~1这9个元素    |

# 安装与文档

安装：`pip install rstyleslice`

[文档](https://github.com/lcctoor/lccpy/blob/main/rstyleslice/docs/doc.md)

# Bug提交、功能提议

您可以通过 [Github-Issues](https://github.com/lcctoor/lccpy/issues)、[微信](https://raw.githubusercontent.com/lcctoor/me/main/author/WeChatQR.jpg)、[技术交流群](https://raw.githubusercontent.com/lcctoor/me/main/ExchangeGroup/PythonTecQR.jpg) 与我联系。

# 关于作者

作者：许灿标

邮箱：lcctoor@outlook.com

[主页](https://github.com/lcctoor/me/blob/main/home.md) | [微信](https://raw.githubusercontent.com/lcctoor/me/main/author/WeChatQR.jpg) | [Python技术微信交流群](https://raw.githubusercontent.com/lcctoor/me/main/ExchangeGroup/PythonTecQR.jpg)

开源项目：[让 Python 更简单一点](https://github.com/lcctoor/lccpy#readme)

# 语法预览

### 导入

```python
from rstyleslice import rslice
```

### 创建R风格容器

```python
obj = rslice([1,2,3,4,5,6,7,8,9])
```

Python中任何可以索引和切片的对象（如list、str、tuple）都可以转化成R风格容器。

### 切片语法

切片格式为  [start: stop: step]  ，start表示从哪条开始，stop表示到哪条停止，step表示步长。

取值时，当  step>1  时表示间隔式取值。

赋值时，step值无效。

| **索引和切片** | **（取值时）获取的元素** | **（赋值时）置换的元素** |
| -------------------- | ------------------------------ | ------------------------------ |
| [ : ]                | 全部                           | 全部                           |
| [ 1 ]                | 第1个                          | 第1个                          |
| [ -1 ]               | 倒数第1个                      | 倒数第1个                      |
| [ 3: 7 ]             | 第3~7个                        | 第3~7个                        |
| [ 7: 3 ]             | 第7~3个                        | 第3~7个                        |
| [ 3: ]               | 第3个~最后1个                  | 第3个~最后1个                  |
| [ : 7 ]              | 第1~7个                        | 第1~7个                        |
| [ 3: 7: 2 ]          | 第3、5、7个                    | 第3~7个                        |
| [ 3: 8: 2 ]          | 第3、5、7个                    | 第3~8个                        |
| [ 7: 3: 2 ]          | 第7、5、3个                    | 第3~7个                        |
| [ 8: 3: 2 ]          | 第8、6、4个                    | 第3~8个                        |

值得注意的地方：

1、取值时，  [ 3: 8: 2 ]  获取第  3、5、7  个，而  [ 8: 3: 2 ]  获取第  8、6、4  个。

2、赋值时，  [ 3: 8: 2 ]  和  [ 8: 3: 2 ]  都置换第  3~8  个。

### 索引取值

```python
obj[1]
# >>> 1
```

### 索引赋值

```python
obj[1] = 111
obj[:]
# >>> [111, 2, 3, 4, 5, 6, 7, 8, 9]
```

### 切片取值

```python
obj[3:7]  # >>> [3, 4, 5, 6, 7]
obj[7:3]  # >>> [7, 6, 5, 4, 3]
obj[3:7:2]  # >>> [3, 5, 7]
obj[8:2:3]  # >>> [8, 5, 2]
```

### 切片赋值

```python
obj[4:6] = [44, 55]
obj[:]
# >>> [111, 2, 3, 44, 55, 7, 8, 9]

obj[4:6] = []
obj[:]
# >>> [111, 2, 3, 8, 9]

obj[4:] = [1, 2, 3, 4, 5]
obj[:]
# >>> [111, 2, 3, 1, 2, 3, 4, 5]

obj[4:100] = ['1', 2, 3, 4, 5]
obj[:]
# >>> [111, 2, 3, '1', 2, 3, 4, 5]
```

