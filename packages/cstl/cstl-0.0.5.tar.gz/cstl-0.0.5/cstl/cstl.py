# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cstl
else:
    import _cstl

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cstl.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _cstl.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _cstl.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _cstl.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _cstl.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _cstl.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _cstl.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _cstl.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _cstl.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _cstl.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _cstl.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _cstl.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _cstl.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _cstl.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _cstl.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _cstl.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _cstl.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _cstl:
_cstl.SwigPyIterator_swigregister(SwigPyIterator)

class VecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecInt___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _cstl.VecInt___len__(self)

    def __getslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "std::vector< int,std::allocator< int > > *":
        return _cstl.VecInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< int >::difference_type", j: "std::vector< int >::difference_type") -> "void":
        return _cstl.VecInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _cstl.VecInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecInt___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _cstl.VecInt_pop(self)

    def append(self, x: "std::vector< int >::value_type const &") -> "void":
        return _cstl.VecInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecInt_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _cstl.VecInt_size(self)

    def swap(self, v: "VecInt") -> "void":
        return _cstl.VecInt_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _cstl.VecInt_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _cstl.VecInt_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _cstl.VecInt_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _cstl.VecInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecInt_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _cstl.VecInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecInt_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _cstl.VecInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecInt_swiginit(self, _cstl.new_VecInt(*args))

    def push_back(self, x: "std::vector< int >::value_type const &") -> "void":
        return _cstl.VecInt_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _cstl.VecInt_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _cstl.VecInt_back(self)

    def assign(self, n: "std::vector< int >::size_type", x: "std::vector< int >::value_type const &") -> "void":
        return _cstl.VecInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecInt_insert(self, *args)

    def reserve(self, n: "std::vector< int >::size_type") -> "void":
        return _cstl.VecInt_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _cstl.VecInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecInt

# Register VecInt in _cstl:
_cstl.VecInt_swigregister(VecInt)

class VecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecStr___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _cstl.VecStr___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _cstl.VecStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _cstl.VecStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _cstl.VecStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _cstl.VecStr_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _cstl.VecStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecStr_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _cstl.VecStr_size(self)

    def swap(self, v: "VecStr") -> "void":
        return _cstl.VecStr_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _cstl.VecStr_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _cstl.VecStr_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _cstl.VecStr_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _cstl.VecStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecStr_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _cstl.VecStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _cstl.VecStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecStr_swiginit(self, _cstl.new_VecStr(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _cstl.VecStr_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _cstl.VecStr_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _cstl.VecStr_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _cstl.VecStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _cstl.VecStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _cstl.VecStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecStr

# Register VecStr in _cstl:
_cstl.VecStr_swigregister(VecStr)

class VecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecFloat___bool__(self)

    def __len__(self) -> "std::vector< float >::size_type":
        return _cstl.VecFloat___len__(self)

    def __getslice__(self, i: "std::vector< float >::difference_type", j: "std::vector< float >::difference_type") -> "std::vector< float,std::allocator< float > > *":
        return _cstl.VecFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< float >::difference_type", j: "std::vector< float >::difference_type") -> "void":
        return _cstl.VecFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< float >::value_type const &":
        return _cstl.VecFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< float >::value_type":
        return _cstl.VecFloat_pop(self)

    def append(self, x: "std::vector< float >::value_type const &") -> "void":
        return _cstl.VecFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecFloat_empty(self)

    def size(self) -> "std::vector< float >::size_type":
        return _cstl.VecFloat_size(self)

    def swap(self, v: "VecFloat") -> "void":
        return _cstl.VecFloat_swap(self, v)

    def begin(self) -> "std::vector< float >::iterator":
        return _cstl.VecFloat_begin(self)

    def end(self) -> "std::vector< float >::iterator":
        return _cstl.VecFloat_end(self)

    def rbegin(self) -> "std::vector< float >::reverse_iterator":
        return _cstl.VecFloat_rbegin(self)

    def rend(self) -> "std::vector< float >::reverse_iterator":
        return _cstl.VecFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecFloat_clear(self)

    def get_allocator(self) -> "std::vector< float >::allocator_type":
        return _cstl.VecFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< float >::iterator":
        return _cstl.VecFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecFloat_swiginit(self, _cstl.new_VecFloat(*args))

    def push_back(self, x: "std::vector< float >::value_type const &") -> "void":
        return _cstl.VecFloat_push_back(self, x)

    def front(self) -> "std::vector< float >::value_type const &":
        return _cstl.VecFloat_front(self)

    def back(self) -> "std::vector< float >::value_type const &":
        return _cstl.VecFloat_back(self)

    def assign(self, n: "std::vector< float >::size_type", x: "std::vector< float >::value_type const &") -> "void":
        return _cstl.VecFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecFloat_insert(self, *args)

    def reserve(self, n: "std::vector< float >::size_type") -> "void":
        return _cstl.VecFloat_reserve(self, n)

    def capacity(self) -> "std::vector< float >::size_type":
        return _cstl.VecFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecFloat

# Register VecFloat in _cstl:
_cstl.VecFloat_swigregister(VecFloat)

class VecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecDouble___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _cstl.VecDouble___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _cstl.VecDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _cstl.VecDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _cstl.VecDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _cstl.VecDouble_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _cstl.VecDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecDouble_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _cstl.VecDouble_size(self)

    def swap(self, v: "VecDouble") -> "void":
        return _cstl.VecDouble_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _cstl.VecDouble_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _cstl.VecDouble_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _cstl.VecDouble_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _cstl.VecDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecDouble_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _cstl.VecDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _cstl.VecDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecDouble_swiginit(self, _cstl.new_VecDouble(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _cstl.VecDouble_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _cstl.VecDouble_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _cstl.VecDouble_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _cstl.VecDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecDouble_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _cstl.VecDouble_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _cstl.VecDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecDouble

# Register VecDouble in _cstl:
_cstl.VecDouble_swigregister(VecDouble)

class VecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecBool___bool__(self)

    def __len__(self) -> "std::vector< bool >::size_type":
        return _cstl.VecBool___len__(self)

    def __getslice__(self, i: "std::vector< bool >::difference_type", j: "std::vector< bool >::difference_type") -> "std::vector< bool,std::allocator< bool > > *":
        return _cstl.VecBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< bool >::difference_type", j: "std::vector< bool >::difference_type") -> "void":
        return _cstl.VecBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< bool >::value_type":
        return _cstl.VecBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecBool___setitem__(self, *args)

    def pop(self) -> "std::vector< bool >::value_type":
        return _cstl.VecBool_pop(self)

    def append(self, x: "std::vector< bool >::value_type") -> "void":
        return _cstl.VecBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecBool_empty(self)

    def size(self) -> "std::vector< bool >::size_type":
        return _cstl.VecBool_size(self)

    def swap(self, v: "VecBool") -> "void":
        return _cstl.VecBool_swap(self, v)

    def begin(self) -> "std::vector< bool >::iterator":
        return _cstl.VecBool_begin(self)

    def end(self) -> "std::vector< bool >::iterator":
        return _cstl.VecBool_end(self)

    def rbegin(self) -> "std::vector< bool >::reverse_iterator":
        return _cstl.VecBool_rbegin(self)

    def rend(self) -> "std::vector< bool >::reverse_iterator":
        return _cstl.VecBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecBool_clear(self)

    def get_allocator(self) -> "std::vector< bool >::allocator_type":
        return _cstl.VecBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecBool_pop_back(self)

    def erase(self, *args) -> "std::vector< bool >::iterator":
        return _cstl.VecBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecBool_swiginit(self, _cstl.new_VecBool(*args))

    def push_back(self, x: "std::vector< bool >::value_type") -> "void":
        return _cstl.VecBool_push_back(self, x)

    def front(self) -> "std::vector< bool >::value_type":
        return _cstl.VecBool_front(self)

    def back(self) -> "std::vector< bool >::value_type":
        return _cstl.VecBool_back(self)

    def assign(self, n: "std::vector< bool >::size_type", x: "std::vector< bool >::value_type") -> "void":
        return _cstl.VecBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecBool_insert(self, *args)

    def reserve(self, n: "std::vector< bool >::size_type") -> "void":
        return _cstl.VecBool_reserve(self, n)

    def capacity(self) -> "std::vector< bool >::size_type":
        return _cstl.VecBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecBool

# Register VecBool in _cstl:
_cstl.VecBool_swigregister(VecBool)

class VecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecLong___bool__(self)

    def __len__(self) -> "std::vector< std::int64_t >::size_type":
        return _cstl.VecLong___len__(self)

    def __getslice__(self, i: "std::vector< std::int64_t >::difference_type", j: "std::vector< std::int64_t >::difference_type") -> "std::vector< std::int64_t,std::allocator< std::int64_t > > *":
        return _cstl.VecLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::int64_t >::difference_type", j: "std::vector< std::int64_t >::difference_type") -> "void":
        return _cstl.VecLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::int64_t >::value_type const &":
        return _cstl.VecLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::int64_t >::value_type":
        return _cstl.VecLong_pop(self)

    def append(self, x: "std::vector< std::int64_t >::value_type const &") -> "void":
        return _cstl.VecLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecLong_empty(self)

    def size(self) -> "std::vector< std::int64_t >::size_type":
        return _cstl.VecLong_size(self)

    def swap(self, v: "VecLong") -> "void":
        return _cstl.VecLong_swap(self, v)

    def begin(self) -> "std::vector< std::int64_t >::iterator":
        return _cstl.VecLong_begin(self)

    def end(self) -> "std::vector< std::int64_t >::iterator":
        return _cstl.VecLong_end(self)

    def rbegin(self) -> "std::vector< std::int64_t >::reverse_iterator":
        return _cstl.VecLong_rbegin(self)

    def rend(self) -> "std::vector< std::int64_t >::reverse_iterator":
        return _cstl.VecLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecLong_clear(self)

    def get_allocator(self) -> "std::vector< std::int64_t >::allocator_type":
        return _cstl.VecLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::int64_t >::iterator":
        return _cstl.VecLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecLong_swiginit(self, _cstl.new_VecLong(*args))

    def push_back(self, x: "std::vector< std::int64_t >::value_type const &") -> "void":
        return _cstl.VecLong_push_back(self, x)

    def front(self) -> "std::vector< std::int64_t >::value_type const &":
        return _cstl.VecLong_front(self)

    def back(self) -> "std::vector< std::int64_t >::value_type const &":
        return _cstl.VecLong_back(self)

    def assign(self, n: "std::vector< std::int64_t >::size_type", x: "std::vector< std::int64_t >::value_type const &") -> "void":
        return _cstl.VecLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::int64_t >::size_type") -> "void":
        return _cstl.VecLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::int64_t >::size_type":
        return _cstl.VecLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecLong

# Register VecLong in _cstl:
_cstl.VecLong_swigregister(VecLong)

class SetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.SetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.SetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.SetInt___bool__(self)

    def __len__(self) -> "std::unordered_set< int >::size_type":
        return _cstl.SetInt___len__(self)

    def append(self, x: "std::unordered_set< int >::value_type") -> "void":
        return _cstl.SetInt_append(self, x)

    def __contains__(self, x: "std::unordered_set< int >::value_type") -> "bool":
        return _cstl.SetInt___contains__(self, x)

    def __getitem__(self, i: "std::unordered_set< int >::difference_type") -> "std::unordered_set< int >::value_type":
        return _cstl.SetInt___getitem__(self, i)

    def __init__(self, *args):
        _cstl.SetInt_swiginit(self, _cstl.new_SetInt(*args))

    def empty(self) -> "bool":
        return _cstl.SetInt_empty(self)

    def size(self) -> "std::unordered_set< int >::size_type":
        return _cstl.SetInt_size(self)

    def clear(self) -> "void":
        return _cstl.SetInt_clear(self)

    def swap(self, v: "SetInt") -> "void":
        return _cstl.SetInt_swap(self, v)

    def count(self, x: "std::unordered_set< int >::key_type const &") -> "std::unordered_set< int >::size_type":
        return _cstl.SetInt_count(self, x)

    def begin(self) -> "std::unordered_set< int >::iterator":
        return _cstl.SetInt_begin(self)

    def end(self) -> "std::unordered_set< int >::iterator":
        return _cstl.SetInt_end(self)

    def erase(self, *args) -> "void":
        return _cstl.SetInt_erase(self, *args)

    def find(self, x: "std::unordered_set< int >::key_type const &") -> "std::unordered_set< int >::iterator":
        return _cstl.SetInt_find(self, x)

    def equal_range(self, x: "std::unordered_set< int >::key_type const &") -> "std::pair< std::unordered_set< int >::iterator,std::unordered_set< int >::iterator >":
        return _cstl.SetInt_equal_range(self, x)

    def insert(self, __x: "std::unordered_set< int >::value_type const &") -> "std::pair< std::unordered_set< int >::iterator,bool >":
        return _cstl.SetInt_insert(self, __x)
    __swig_destroy__ = _cstl.delete_SetInt

# Register SetInt in _cstl:
_cstl.SetInt_swigregister(SetInt)

class SetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.SetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.SetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.SetStr___bool__(self)

    def __len__(self) -> "std::unordered_set< std::string >::size_type":
        return _cstl.SetStr___len__(self)

    def append(self, x: "std::unordered_set< std::string >::value_type") -> "void":
        return _cstl.SetStr_append(self, x)

    def __contains__(self, x: "std::unordered_set< std::string >::value_type") -> "bool":
        return _cstl.SetStr___contains__(self, x)

    def __getitem__(self, i: "std::unordered_set< std::string >::difference_type") -> "std::unordered_set< std::string >::value_type":
        return _cstl.SetStr___getitem__(self, i)

    def __init__(self, *args):
        _cstl.SetStr_swiginit(self, _cstl.new_SetStr(*args))

    def empty(self) -> "bool":
        return _cstl.SetStr_empty(self)

    def size(self) -> "std::unordered_set< std::string >::size_type":
        return _cstl.SetStr_size(self)

    def clear(self) -> "void":
        return _cstl.SetStr_clear(self)

    def swap(self, v: "SetStr") -> "void":
        return _cstl.SetStr_swap(self, v)

    def count(self, x: "std::unordered_set< std::string >::key_type const &") -> "std::unordered_set< std::string >::size_type":
        return _cstl.SetStr_count(self, x)

    def begin(self) -> "std::unordered_set< std::string >::iterator":
        return _cstl.SetStr_begin(self)

    def end(self) -> "std::unordered_set< std::string >::iterator":
        return _cstl.SetStr_end(self)

    def erase(self, *args) -> "void":
        return _cstl.SetStr_erase(self, *args)

    def find(self, x: "std::unordered_set< std::string >::key_type const &") -> "std::unordered_set< std::string >::iterator":
        return _cstl.SetStr_find(self, x)

    def equal_range(self, x: "std::unordered_set< std::string >::key_type const &") -> "std::pair< std::unordered_set< std::string >::iterator,std::unordered_set< std::string >::iterator >":
        return _cstl.SetStr_equal_range(self, x)

    def insert(self, __x: "std::unordered_set< std::string >::value_type const &") -> "std::pair< std::unordered_set< std::string >::iterator,bool >":
        return _cstl.SetStr_insert(self, __x)
    __swig_destroy__ = _cstl.delete_SetStr

# Register SetStr in _cstl:
_cstl.SetStr_swigregister(SetStr)

class SetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.SetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.SetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.SetLong___bool__(self)

    def __len__(self) -> "std::unordered_set< std::int64_t >::size_type":
        return _cstl.SetLong___len__(self)

    def append(self, x: "std::unordered_set< std::int64_t >::value_type") -> "void":
        return _cstl.SetLong_append(self, x)

    def __contains__(self, x: "std::unordered_set< std::int64_t >::value_type") -> "bool":
        return _cstl.SetLong___contains__(self, x)

    def __getitem__(self, i: "std::unordered_set< std::int64_t >::difference_type") -> "std::unordered_set< std::int64_t >::value_type":
        return _cstl.SetLong___getitem__(self, i)

    def __init__(self, *args):
        _cstl.SetLong_swiginit(self, _cstl.new_SetLong(*args))

    def empty(self) -> "bool":
        return _cstl.SetLong_empty(self)

    def size(self) -> "std::unordered_set< std::int64_t >::size_type":
        return _cstl.SetLong_size(self)

    def clear(self) -> "void":
        return _cstl.SetLong_clear(self)

    def swap(self, v: "SetLong") -> "void":
        return _cstl.SetLong_swap(self, v)

    def count(self, x: "std::unordered_set< std::int64_t >::key_type const &") -> "std::unordered_set< std::int64_t >::size_type":
        return _cstl.SetLong_count(self, x)

    def begin(self) -> "std::unordered_set< std::int64_t >::iterator":
        return _cstl.SetLong_begin(self)

    def end(self) -> "std::unordered_set< std::int64_t >::iterator":
        return _cstl.SetLong_end(self)

    def erase(self, *args) -> "void":
        return _cstl.SetLong_erase(self, *args)

    def find(self, x: "std::unordered_set< std::int64_t >::key_type const &") -> "std::unordered_set< std::int64_t >::iterator":
        return _cstl.SetLong_find(self, x)

    def equal_range(self, x: "std::unordered_set< std::int64_t >::key_type const &") -> "std::pair< std::unordered_set< std::int64_t >::iterator,std::unordered_set< std::int64_t >::iterator >":
        return _cstl.SetLong_equal_range(self, x)

    def insert(self, __x: "std::unordered_set< std::int64_t >::value_type const &") -> "std::pair< std::unordered_set< std::int64_t >::iterator,bool >":
        return _cstl.SetLong_insert(self, __x)
    __swig_destroy__ = _cstl.delete_SetLong

# Register SetLong in _cstl:
_cstl.SetLong_swigregister(SetLong)

class MapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,int >::size_type":
        return _cstl.MapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,int >::key_type const &") -> "std::unordered_map< int,int >::mapped_type const &":
        return _cstl.MapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,int >::key_type const &") -> "void":
        return _cstl.MapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,int >::key_type const &") -> "bool":
        return _cstl.MapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,int >::key_type const &") -> "bool":
        return _cstl.MapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntInt_swiginit(self, _cstl.new_MapIntInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntInt_empty(self)

    def size(self) -> "std::unordered_map< int,int >::size_type":
        return _cstl.MapIntInt_size(self)

    def swap(self, v: "MapIntInt") -> "void":
        return _cstl.MapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,int >::iterator":
        return _cstl.MapIntInt_begin(self)

    def end(self) -> "std::unordered_map< int,int >::iterator":
        return _cstl.MapIntInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,int >::allocator_type":
        return _cstl.MapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,int >::key_type const &") -> "std::unordered_map< int,int >::size_type":
        return _cstl.MapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,int >::key_type const &") -> "std::unordered_map< int,int >::iterator":
        return _cstl.MapIntInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntInt

# Register MapIntInt in _cstl:
_cstl.MapIntInt_swigregister(MapIntInt)

class MapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::string >::size_type":
        return _cstl.MapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::string >::key_type const &") -> "std::unordered_map< int,std::string >::mapped_type const &":
        return _cstl.MapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::string >::key_type const &") -> "void":
        return _cstl.MapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::string >::key_type const &") -> "bool":
        return _cstl.MapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::string >::key_type const &") -> "bool":
        return _cstl.MapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntStr_swiginit(self, _cstl.new_MapIntStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::string >::size_type":
        return _cstl.MapIntStr_size(self)

    def swap(self, v: "MapIntStr") -> "void":
        return _cstl.MapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::string >::iterator":
        return _cstl.MapIntStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::string >::iterator":
        return _cstl.MapIntStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::string >::allocator_type":
        return _cstl.MapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::string >::key_type const &") -> "std::unordered_map< int,std::string >::size_type":
        return _cstl.MapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::string >::key_type const &") -> "std::unordered_map< int,std::string >::iterator":
        return _cstl.MapIntStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntStr

# Register MapIntStr in _cstl:
_cstl.MapIntStr_swigregister(MapIntStr)

class MapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,float >::size_type":
        return _cstl.MapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,float >::key_type const &") -> "std::unordered_map< int,float >::mapped_type const &":
        return _cstl.MapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,float >::key_type const &") -> "void":
        return _cstl.MapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,float >::key_type const &") -> "bool":
        return _cstl.MapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,float >::key_type const &") -> "bool":
        return _cstl.MapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntFloat_swiginit(self, _cstl.new_MapIntFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< int,float >::size_type":
        return _cstl.MapIntFloat_size(self)

    def swap(self, v: "MapIntFloat") -> "void":
        return _cstl.MapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,float >::iterator":
        return _cstl.MapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< int,float >::iterator":
        return _cstl.MapIntFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,float >::allocator_type":
        return _cstl.MapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,float >::key_type const &") -> "std::unordered_map< int,float >::size_type":
        return _cstl.MapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,float >::key_type const &") -> "std::unordered_map< int,float >::iterator":
        return _cstl.MapIntFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntFloat

# Register MapIntFloat in _cstl:
_cstl.MapIntFloat_swigregister(MapIntFloat)

class MapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,double >::size_type":
        return _cstl.MapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,double >::key_type const &") -> "std::unordered_map< int,double >::mapped_type const &":
        return _cstl.MapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,double >::key_type const &") -> "void":
        return _cstl.MapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,double >::key_type const &") -> "bool":
        return _cstl.MapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,double >::key_type const &") -> "bool":
        return _cstl.MapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntDouble_swiginit(self, _cstl.new_MapIntDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< int,double >::size_type":
        return _cstl.MapIntDouble_size(self)

    def swap(self, v: "MapIntDouble") -> "void":
        return _cstl.MapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,double >::iterator":
        return _cstl.MapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< int,double >::iterator":
        return _cstl.MapIntDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,double >::allocator_type":
        return _cstl.MapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,double >::key_type const &") -> "std::unordered_map< int,double >::size_type":
        return _cstl.MapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,double >::key_type const &") -> "std::unordered_map< int,double >::iterator":
        return _cstl.MapIntDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntDouble

# Register MapIntDouble in _cstl:
_cstl.MapIntDouble_swigregister(MapIntDouble)

class MapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,bool >::size_type":
        return _cstl.MapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,bool >::key_type const &") -> "std::unordered_map< int,bool >::mapped_type const &":
        return _cstl.MapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,bool >::key_type const &") -> "void":
        return _cstl.MapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,bool >::key_type const &") -> "bool":
        return _cstl.MapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,bool >::key_type const &") -> "bool":
        return _cstl.MapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntBool_swiginit(self, _cstl.new_MapIntBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntBool_empty(self)

    def size(self) -> "std::unordered_map< int,bool >::size_type":
        return _cstl.MapIntBool_size(self)

    def swap(self, v: "MapIntBool") -> "void":
        return _cstl.MapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,bool >::iterator":
        return _cstl.MapIntBool_begin(self)

    def end(self) -> "std::unordered_map< int,bool >::iterator":
        return _cstl.MapIntBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,bool >::allocator_type":
        return _cstl.MapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,bool >::key_type const &") -> "std::unordered_map< int,bool >::size_type":
        return _cstl.MapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,bool >::key_type const &") -> "std::unordered_map< int,bool >::iterator":
        return _cstl.MapIntBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntBool

# Register MapIntBool in _cstl:
_cstl.MapIntBool_swigregister(MapIntBool)

class MapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::int64_t >::size_type":
        return _cstl.MapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::int64_t >::key_type const &") -> "std::unordered_map< int,std::int64_t >::mapped_type const &":
        return _cstl.MapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::int64_t >::key_type const &") -> "void":
        return _cstl.MapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::int64_t >::key_type const &") -> "bool":
        return _cstl.MapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::int64_t >::key_type const &") -> "bool":
        return _cstl.MapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntLong_swiginit(self, _cstl.new_MapIntLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::int64_t >::size_type":
        return _cstl.MapIntLong_size(self)

    def swap(self, v: "MapIntLong") -> "void":
        return _cstl.MapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::int64_t >::iterator":
        return _cstl.MapIntLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::int64_t >::iterator":
        return _cstl.MapIntLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::int64_t >::allocator_type":
        return _cstl.MapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::int64_t >::key_type const &") -> "std::unordered_map< int,std::int64_t >::size_type":
        return _cstl.MapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::int64_t >::key_type const &") -> "std::unordered_map< int,std::int64_t >::iterator":
        return _cstl.MapIntLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntLong

# Register MapIntLong in _cstl:
_cstl.MapIntLong_swigregister(MapIntLong)

class MapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,int >::size_type":
        return _cstl.MapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,int >::key_type const &") -> "std::unordered_map< std::string,int >::mapped_type const &":
        return _cstl.MapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,int >::key_type const &") -> "void":
        return _cstl.MapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,int >::key_type const &") -> "bool":
        return _cstl.MapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,int >::key_type const &") -> "bool":
        return _cstl.MapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrInt_swiginit(self, _cstl.new_MapStrInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,int >::size_type":
        return _cstl.MapStrInt_size(self)

    def swap(self, v: "MapStrInt") -> "void":
        return _cstl.MapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,int >::iterator":
        return _cstl.MapStrInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,int >::iterator":
        return _cstl.MapStrInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,int >::allocator_type":
        return _cstl.MapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,int >::key_type const &") -> "std::unordered_map< std::string,int >::size_type":
        return _cstl.MapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,int >::key_type const &") -> "std::unordered_map< std::string,int >::iterator":
        return _cstl.MapStrInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrInt

# Register MapStrInt in _cstl:
_cstl.MapStrInt_swigregister(MapStrInt)

class MapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::string >::size_type":
        return _cstl.MapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::string >::key_type const &") -> "std::unordered_map< std::string,std::string >::mapped_type const &":
        return _cstl.MapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::string >::key_type const &") -> "void":
        return _cstl.MapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::string >::key_type const &") -> "bool":
        return _cstl.MapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::string >::key_type const &") -> "bool":
        return _cstl.MapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrStr_swiginit(self, _cstl.new_MapStrStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::string >::size_type":
        return _cstl.MapStrStr_size(self)

    def swap(self, v: "MapStrStr") -> "void":
        return _cstl.MapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::string >::iterator":
        return _cstl.MapStrStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::string >::iterator":
        return _cstl.MapStrStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::string >::allocator_type":
        return _cstl.MapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::string >::key_type const &") -> "std::unordered_map< std::string,std::string >::size_type":
        return _cstl.MapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::string >::key_type const &") -> "std::unordered_map< std::string,std::string >::iterator":
        return _cstl.MapStrStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrStr

# Register MapStrStr in _cstl:
_cstl.MapStrStr_swigregister(MapStrStr)

class MapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,float >::size_type":
        return _cstl.MapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,float >::key_type const &") -> "std::unordered_map< std::string,float >::mapped_type const &":
        return _cstl.MapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,float >::key_type const &") -> "void":
        return _cstl.MapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,float >::key_type const &") -> "bool":
        return _cstl.MapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,float >::key_type const &") -> "bool":
        return _cstl.MapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrFloat_swiginit(self, _cstl.new_MapStrFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,float >::size_type":
        return _cstl.MapStrFloat_size(self)

    def swap(self, v: "MapStrFloat") -> "void":
        return _cstl.MapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,float >::iterator":
        return _cstl.MapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,float >::iterator":
        return _cstl.MapStrFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,float >::allocator_type":
        return _cstl.MapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,float >::key_type const &") -> "std::unordered_map< std::string,float >::size_type":
        return _cstl.MapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,float >::key_type const &") -> "std::unordered_map< std::string,float >::iterator":
        return _cstl.MapStrFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrFloat

# Register MapStrFloat in _cstl:
_cstl.MapStrFloat_swigregister(MapStrFloat)

class MapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,double >::size_type":
        return _cstl.MapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,double >::key_type const &") -> "std::unordered_map< std::string,double >::mapped_type const &":
        return _cstl.MapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,double >::key_type const &") -> "void":
        return _cstl.MapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,double >::key_type const &") -> "bool":
        return _cstl.MapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,double >::key_type const &") -> "bool":
        return _cstl.MapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrDouble_swiginit(self, _cstl.new_MapStrDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,double >::size_type":
        return _cstl.MapStrDouble_size(self)

    def swap(self, v: "MapStrDouble") -> "void":
        return _cstl.MapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,double >::iterator":
        return _cstl.MapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,double >::iterator":
        return _cstl.MapStrDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,double >::allocator_type":
        return _cstl.MapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,double >::key_type const &") -> "std::unordered_map< std::string,double >::size_type":
        return _cstl.MapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,double >::key_type const &") -> "std::unordered_map< std::string,double >::iterator":
        return _cstl.MapStrDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrDouble

# Register MapStrDouble in _cstl:
_cstl.MapStrDouble_swigregister(MapStrDouble)

class MapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,bool >::size_type":
        return _cstl.MapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,bool >::key_type const &") -> "std::unordered_map< std::string,bool >::mapped_type const &":
        return _cstl.MapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,bool >::key_type const &") -> "void":
        return _cstl.MapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,bool >::key_type const &") -> "bool":
        return _cstl.MapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,bool >::key_type const &") -> "bool":
        return _cstl.MapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrBool_swiginit(self, _cstl.new_MapStrBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,bool >::size_type":
        return _cstl.MapStrBool_size(self)

    def swap(self, v: "MapStrBool") -> "void":
        return _cstl.MapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,bool >::iterator":
        return _cstl.MapStrBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,bool >::iterator":
        return _cstl.MapStrBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,bool >::allocator_type":
        return _cstl.MapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,bool >::key_type const &") -> "std::unordered_map< std::string,bool >::size_type":
        return _cstl.MapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,bool >::key_type const &") -> "std::unordered_map< std::string,bool >::iterator":
        return _cstl.MapStrBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrBool

# Register MapStrBool in _cstl:
_cstl.MapStrBool_swigregister(MapStrBool)

class MapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::int64_t >::size_type":
        return _cstl.MapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::int64_t >::key_type const &") -> "std::unordered_map< std::string,std::int64_t >::mapped_type const &":
        return _cstl.MapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::int64_t >::key_type const &") -> "void":
        return _cstl.MapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::int64_t >::key_type const &") -> "bool":
        return _cstl.MapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::int64_t >::key_type const &") -> "bool":
        return _cstl.MapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrLong_swiginit(self, _cstl.new_MapStrLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::int64_t >::size_type":
        return _cstl.MapStrLong_size(self)

    def swap(self, v: "MapStrLong") -> "void":
        return _cstl.MapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::int64_t >::iterator":
        return _cstl.MapStrLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::int64_t >::iterator":
        return _cstl.MapStrLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::int64_t >::allocator_type":
        return _cstl.MapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::int64_t >::key_type const &") -> "std::unordered_map< std::string,std::int64_t >::size_type":
        return _cstl.MapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::int64_t >::key_type const &") -> "std::unordered_map< std::string,std::int64_t >::iterator":
        return _cstl.MapStrLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrLong

# Register MapStrLong in _cstl:
_cstl.MapStrLong_swigregister(MapStrLong)

class MapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,int >::size_type":
        return _cstl.MapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,int >::key_type const &") -> "std::unordered_map< std::int64_t,int >::mapped_type const &":
        return _cstl.MapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,int >::key_type const &") -> "void":
        return _cstl.MapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,int >::key_type const &") -> "bool":
        return _cstl.MapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,int >::key_type const &") -> "bool":
        return _cstl.MapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongInt_swiginit(self, _cstl.new_MapLongInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,int >::size_type":
        return _cstl.MapLongInt_size(self)

    def swap(self, v: "MapLongInt") -> "void":
        return _cstl.MapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,int >::iterator":
        return _cstl.MapLongInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,int >::iterator":
        return _cstl.MapLongInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,int >::allocator_type":
        return _cstl.MapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,int >::key_type const &") -> "std::unordered_map< std::int64_t,int >::size_type":
        return _cstl.MapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,int >::key_type const &") -> "std::unordered_map< std::int64_t,int >::iterator":
        return _cstl.MapLongInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongInt

# Register MapLongInt in _cstl:
_cstl.MapLongInt_swigregister(MapLongInt)

class MapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::string >::size_type":
        return _cstl.MapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::string >::key_type const &") -> "std::unordered_map< std::int64_t,std::string >::mapped_type const &":
        return _cstl.MapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::string >::key_type const &") -> "void":
        return _cstl.MapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::string >::key_type const &") -> "bool":
        return _cstl.MapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::string >::key_type const &") -> "bool":
        return _cstl.MapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongStr_swiginit(self, _cstl.new_MapLongStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::string >::size_type":
        return _cstl.MapLongStr_size(self)

    def swap(self, v: "MapLongStr") -> "void":
        return _cstl.MapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::string >::iterator":
        return _cstl.MapLongStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::string >::iterator":
        return _cstl.MapLongStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::string >::allocator_type":
        return _cstl.MapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::string >::key_type const &") -> "std::unordered_map< std::int64_t,std::string >::size_type":
        return _cstl.MapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::string >::key_type const &") -> "std::unordered_map< std::int64_t,std::string >::iterator":
        return _cstl.MapLongStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongStr

# Register MapLongStr in _cstl:
_cstl.MapLongStr_swigregister(MapLongStr)

class MapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,float >::size_type":
        return _cstl.MapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,float >::key_type const &") -> "std::unordered_map< std::int64_t,float >::mapped_type const &":
        return _cstl.MapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,float >::key_type const &") -> "void":
        return _cstl.MapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,float >::key_type const &") -> "bool":
        return _cstl.MapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,float >::key_type const &") -> "bool":
        return _cstl.MapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongFloat_swiginit(self, _cstl.new_MapLongFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,float >::size_type":
        return _cstl.MapLongFloat_size(self)

    def swap(self, v: "MapLongFloat") -> "void":
        return _cstl.MapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,float >::iterator":
        return _cstl.MapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,float >::iterator":
        return _cstl.MapLongFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,float >::allocator_type":
        return _cstl.MapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,float >::key_type const &") -> "std::unordered_map< std::int64_t,float >::size_type":
        return _cstl.MapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,float >::key_type const &") -> "std::unordered_map< std::int64_t,float >::iterator":
        return _cstl.MapLongFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongFloat

# Register MapLongFloat in _cstl:
_cstl.MapLongFloat_swigregister(MapLongFloat)

class MapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,double >::size_type":
        return _cstl.MapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,double >::key_type const &") -> "std::unordered_map< std::int64_t,double >::mapped_type const &":
        return _cstl.MapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,double >::key_type const &") -> "void":
        return _cstl.MapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,double >::key_type const &") -> "bool":
        return _cstl.MapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,double >::key_type const &") -> "bool":
        return _cstl.MapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongDouble_swiginit(self, _cstl.new_MapLongDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,double >::size_type":
        return _cstl.MapLongDouble_size(self)

    def swap(self, v: "MapLongDouble") -> "void":
        return _cstl.MapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,double >::iterator":
        return _cstl.MapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,double >::iterator":
        return _cstl.MapLongDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,double >::allocator_type":
        return _cstl.MapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,double >::key_type const &") -> "std::unordered_map< std::int64_t,double >::size_type":
        return _cstl.MapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,double >::key_type const &") -> "std::unordered_map< std::int64_t,double >::iterator":
        return _cstl.MapLongDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongDouble

# Register MapLongDouble in _cstl:
_cstl.MapLongDouble_swigregister(MapLongDouble)

class MapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,bool >::size_type":
        return _cstl.MapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,bool >::key_type const &") -> "std::unordered_map< std::int64_t,bool >::mapped_type const &":
        return _cstl.MapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,bool >::key_type const &") -> "void":
        return _cstl.MapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,bool >::key_type const &") -> "bool":
        return _cstl.MapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,bool >::key_type const &") -> "bool":
        return _cstl.MapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongBool_swiginit(self, _cstl.new_MapLongBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,bool >::size_type":
        return _cstl.MapLongBool_size(self)

    def swap(self, v: "MapLongBool") -> "void":
        return _cstl.MapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,bool >::iterator":
        return _cstl.MapLongBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,bool >::iterator":
        return _cstl.MapLongBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,bool >::allocator_type":
        return _cstl.MapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,bool >::key_type const &") -> "std::unordered_map< std::int64_t,bool >::size_type":
        return _cstl.MapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,bool >::key_type const &") -> "std::unordered_map< std::int64_t,bool >::iterator":
        return _cstl.MapLongBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongBool

# Register MapLongBool in _cstl:
_cstl.MapLongBool_swigregister(MapLongBool)

class MapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::int64_t >::size_type":
        return _cstl.MapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::int64_t >::key_type const &") -> "std::unordered_map< std::int64_t,std::int64_t >::mapped_type const &":
        return _cstl.MapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::int64_t >::key_type const &") -> "void":
        return _cstl.MapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::int64_t >::key_type const &") -> "bool":
        return _cstl.MapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::int64_t >::key_type const &") -> "bool":
        return _cstl.MapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongLong_swiginit(self, _cstl.new_MapLongLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::int64_t >::size_type":
        return _cstl.MapLongLong_size(self)

    def swap(self, v: "MapLongLong") -> "void":
        return _cstl.MapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::int64_t >::iterator":
        return _cstl.MapLongLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::int64_t >::iterator":
        return _cstl.MapLongLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::int64_t >::allocator_type":
        return _cstl.MapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::int64_t >::key_type const &") -> "std::unordered_map< std::int64_t,std::int64_t >::size_type":
        return _cstl.MapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::int64_t >::key_type const &") -> "std::unordered_map< std::int64_t,std::int64_t >::iterator":
        return _cstl.MapLongLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongLong

# Register MapLongLong in _cstl:
_cstl.MapLongLong_swigregister(MapLongLong)

class VecVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecInt___bool__(self)

    def __len__(self) -> "std::vector< std::vector< int > >::size_type":
        return _cstl.VecVecInt___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< int > >::difference_type", j: "std::vector< std::vector< int > >::difference_type") -> "std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *":
        return _cstl.VecVecInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< int > >::difference_type", j: "std::vector< std::vector< int > >::difference_type") -> "void":
        return _cstl.VecVecInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< int > >::value_type const &":
        return _cstl.VecVecInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< int > >::value_type":
        return _cstl.VecVecInt_pop(self)

    def append(self, x: "VecInt") -> "void":
        return _cstl.VecVecInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecInt_empty(self)

    def size(self) -> "std::vector< std::vector< int > >::size_type":
        return _cstl.VecVecInt_size(self)

    def swap(self, v: "VecVecInt") -> "void":
        return _cstl.VecVecInt_swap(self, v)

    def begin(self) -> "std::vector< std::vector< int > >::iterator":
        return _cstl.VecVecInt_begin(self)

    def end(self) -> "std::vector< std::vector< int > >::iterator":
        return _cstl.VecVecInt_end(self)

    def rbegin(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        return _cstl.VecVecInt_rbegin(self)

    def rend(self) -> "std::vector< std::vector< int > >::reverse_iterator":
        return _cstl.VecVecInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecInt_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< int > >::allocator_type":
        return _cstl.VecVecInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< int > >::iterator":
        return _cstl.VecVecInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecInt_swiginit(self, _cstl.new_VecVecInt(*args))

    def push_back(self, x: "VecInt") -> "void":
        return _cstl.VecVecInt_push_back(self, x)

    def front(self) -> "std::vector< std::vector< int > >::value_type const &":
        return _cstl.VecVecInt_front(self)

    def back(self) -> "std::vector< std::vector< int > >::value_type const &":
        return _cstl.VecVecInt_back(self)

    def assign(self, n: "std::vector< std::vector< int > >::size_type", x: "VecInt") -> "void":
        return _cstl.VecVecInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< int > >::size_type") -> "void":
        return _cstl.VecVecInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< int > >::size_type":
        return _cstl.VecVecInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecInt

# Register VecVecInt in _cstl:
_cstl.VecVecInt_swigregister(VecVecInt)

class VecVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecStr___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::string > >::size_type":
        return _cstl.VecVecStr___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::string > >::difference_type", j: "std::vector< std::vector< std::string > >::difference_type") -> "std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > *":
        return _cstl.VecVecStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::string > >::difference_type", j: "std::vector< std::vector< std::string > >::difference_type") -> "void":
        return _cstl.VecVecStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::string > >::value_type const &":
        return _cstl.VecVecStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::string > >::value_type":
        return _cstl.VecVecStr_pop(self)

    def append(self, x: "VecStr") -> "void":
        return _cstl.VecVecStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecStr_empty(self)

    def size(self) -> "std::vector< std::vector< std::string > >::size_type":
        return _cstl.VecVecStr_size(self)

    def swap(self, v: "VecVecStr") -> "void":
        return _cstl.VecVecStr_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::string > >::iterator":
        return _cstl.VecVecStr_begin(self)

    def end(self) -> "std::vector< std::vector< std::string > >::iterator":
        return _cstl.VecVecStr_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::string > >::reverse_iterator":
        return _cstl.VecVecStr_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::string > >::reverse_iterator":
        return _cstl.VecVecStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecStr_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::string > >::allocator_type":
        return _cstl.VecVecStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::string > >::iterator":
        return _cstl.VecVecStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecStr_swiginit(self, _cstl.new_VecVecStr(*args))

    def push_back(self, x: "VecStr") -> "void":
        return _cstl.VecVecStr_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::string > >::value_type const &":
        return _cstl.VecVecStr_front(self)

    def back(self) -> "std::vector< std::vector< std::string > >::value_type const &":
        return _cstl.VecVecStr_back(self)

    def assign(self, n: "std::vector< std::vector< std::string > >::size_type", x: "VecStr") -> "void":
        return _cstl.VecVecStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::string > >::size_type") -> "void":
        return _cstl.VecVecStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::string > >::size_type":
        return _cstl.VecVecStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecStr

# Register VecVecStr in _cstl:
_cstl.VecVecStr_swigregister(VecVecStr)

class VecVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecFloat___bool__(self)

    def __len__(self) -> "std::vector< std::vector< float > >::size_type":
        return _cstl.VecVecFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< float > >::difference_type", j: "std::vector< std::vector< float > >::difference_type") -> "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > *":
        return _cstl.VecVecFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< float > >::difference_type", j: "std::vector< std::vector< float > >::difference_type") -> "void":
        return _cstl.VecVecFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< float > >::value_type const &":
        return _cstl.VecVecFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< float > >::value_type":
        return _cstl.VecVecFloat_pop(self)

    def append(self, x: "VecFloat") -> "void":
        return _cstl.VecVecFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecFloat_empty(self)

    def size(self) -> "std::vector< std::vector< float > >::size_type":
        return _cstl.VecVecFloat_size(self)

    def swap(self, v: "VecVecFloat") -> "void":
        return _cstl.VecVecFloat_swap(self, v)

    def begin(self) -> "std::vector< std::vector< float > >::iterator":
        return _cstl.VecVecFloat_begin(self)

    def end(self) -> "std::vector< std::vector< float > >::iterator":
        return _cstl.VecVecFloat_end(self)

    def rbegin(self) -> "std::vector< std::vector< float > >::reverse_iterator":
        return _cstl.VecVecFloat_rbegin(self)

    def rend(self) -> "std::vector< std::vector< float > >::reverse_iterator":
        return _cstl.VecVecFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< float > >::allocator_type":
        return _cstl.VecVecFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< float > >::iterator":
        return _cstl.VecVecFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecFloat_swiginit(self, _cstl.new_VecVecFloat(*args))

    def push_back(self, x: "VecFloat") -> "void":
        return _cstl.VecVecFloat_push_back(self, x)

    def front(self) -> "std::vector< std::vector< float > >::value_type const &":
        return _cstl.VecVecFloat_front(self)

    def back(self) -> "std::vector< std::vector< float > >::value_type const &":
        return _cstl.VecVecFloat_back(self)

    def assign(self, n: "std::vector< std::vector< float > >::size_type", x: "VecFloat") -> "void":
        return _cstl.VecVecFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< float > >::size_type") -> "void":
        return _cstl.VecVecFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< float > >::size_type":
        return _cstl.VecVecFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecFloat

# Register VecVecFloat in _cstl:
_cstl.VecVecFloat_swigregister(VecVecFloat)

class VecVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecDouble___bool__(self)

    def __len__(self) -> "std::vector< std::vector< double > >::size_type":
        return _cstl.VecVecDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *":
        return _cstl.VecVecDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< double > >::difference_type", j: "std::vector< std::vector< double > >::difference_type") -> "void":
        return _cstl.VecVecDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< double > >::value_type const &":
        return _cstl.VecVecDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< double > >::value_type":
        return _cstl.VecVecDouble_pop(self)

    def append(self, x: "VecDouble") -> "void":
        return _cstl.VecVecDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecDouble_empty(self)

    def size(self) -> "std::vector< std::vector< double > >::size_type":
        return _cstl.VecVecDouble_size(self)

    def swap(self, v: "VecVecDouble") -> "void":
        return _cstl.VecVecDouble_swap(self, v)

    def begin(self) -> "std::vector< std::vector< double > >::iterator":
        return _cstl.VecVecDouble_begin(self)

    def end(self) -> "std::vector< std::vector< double > >::iterator":
        return _cstl.VecVecDouble_end(self)

    def rbegin(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _cstl.VecVecDouble_rbegin(self)

    def rend(self) -> "std::vector< std::vector< double > >::reverse_iterator":
        return _cstl.VecVecDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< double > >::allocator_type":
        return _cstl.VecVecDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< double > >::iterator":
        return _cstl.VecVecDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecDouble_swiginit(self, _cstl.new_VecVecDouble(*args))

    def push_back(self, x: "VecDouble") -> "void":
        return _cstl.VecVecDouble_push_back(self, x)

    def front(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _cstl.VecVecDouble_front(self)

    def back(self) -> "std::vector< std::vector< double > >::value_type const &":
        return _cstl.VecVecDouble_back(self)

    def assign(self, n: "std::vector< std::vector< double > >::size_type", x: "VecDouble") -> "void":
        return _cstl.VecVecDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< double > >::size_type") -> "void":
        return _cstl.VecVecDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< double > >::size_type":
        return _cstl.VecVecDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecDouble

# Register VecVecDouble in _cstl:
_cstl.VecVecDouble_swigregister(VecVecDouble)

class VecVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecBool___bool__(self)

    def __len__(self) -> "std::vector< std::vector< bool > >::size_type":
        return _cstl.VecVecBool___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< bool > >::difference_type", j: "std::vector< std::vector< bool > >::difference_type") -> "std::vector< std::vector< bool,std::allocator< bool > >,std::allocator< std::vector< bool,std::allocator< bool > > > > *":
        return _cstl.VecVecBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< bool > >::difference_type", j: "std::vector< std::vector< bool > >::difference_type") -> "void":
        return _cstl.VecVecBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< bool > >::value_type const &":
        return _cstl.VecVecBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< bool > >::value_type":
        return _cstl.VecVecBool_pop(self)

    def append(self, x: "VecBool") -> "void":
        return _cstl.VecVecBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecBool_empty(self)

    def size(self) -> "std::vector< std::vector< bool > >::size_type":
        return _cstl.VecVecBool_size(self)

    def swap(self, v: "VecVecBool") -> "void":
        return _cstl.VecVecBool_swap(self, v)

    def begin(self) -> "std::vector< std::vector< bool > >::iterator":
        return _cstl.VecVecBool_begin(self)

    def end(self) -> "std::vector< std::vector< bool > >::iterator":
        return _cstl.VecVecBool_end(self)

    def rbegin(self) -> "std::vector< std::vector< bool > >::reverse_iterator":
        return _cstl.VecVecBool_rbegin(self)

    def rend(self) -> "std::vector< std::vector< bool > >::reverse_iterator":
        return _cstl.VecVecBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecBool_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< bool > >::allocator_type":
        return _cstl.VecVecBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< bool > >::iterator":
        return _cstl.VecVecBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecBool_swiginit(self, _cstl.new_VecVecBool(*args))

    def push_back(self, x: "VecBool") -> "void":
        return _cstl.VecVecBool_push_back(self, x)

    def front(self) -> "std::vector< std::vector< bool > >::value_type const &":
        return _cstl.VecVecBool_front(self)

    def back(self) -> "std::vector< std::vector< bool > >::value_type const &":
        return _cstl.VecVecBool_back(self)

    def assign(self, n: "std::vector< std::vector< bool > >::size_type", x: "VecBool") -> "void":
        return _cstl.VecVecBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< bool > >::size_type") -> "void":
        return _cstl.VecVecBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< bool > >::size_type":
        return _cstl.VecVecBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecBool

# Register VecVecBool in _cstl:
_cstl.VecVecBool_swigregister(VecVecBool)

class VecVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecLong___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::int64_t > >::size_type":
        return _cstl.VecVecLong___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::int64_t > >::difference_type", j: "std::vector< std::vector< std::int64_t > >::difference_type") -> "std::vector< std::vector< std::int64_t,std::allocator< std::int64_t > >,std::allocator< std::vector< std::int64_t,std::allocator< std::int64_t > > > > *":
        return _cstl.VecVecLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::int64_t > >::difference_type", j: "std::vector< std::vector< std::int64_t > >::difference_type") -> "void":
        return _cstl.VecVecLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::int64_t > >::value_type const &":
        return _cstl.VecVecLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::int64_t > >::value_type":
        return _cstl.VecVecLong_pop(self)

    def append(self, x: "VecLong") -> "void":
        return _cstl.VecVecLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecLong_empty(self)

    def size(self) -> "std::vector< std::vector< std::int64_t > >::size_type":
        return _cstl.VecVecLong_size(self)

    def swap(self, v: "VecVecLong") -> "void":
        return _cstl.VecVecLong_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::int64_t > >::iterator":
        return _cstl.VecVecLong_begin(self)

    def end(self) -> "std::vector< std::vector< std::int64_t > >::iterator":
        return _cstl.VecVecLong_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::int64_t > >::reverse_iterator":
        return _cstl.VecVecLong_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::int64_t > >::reverse_iterator":
        return _cstl.VecVecLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecLong_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::int64_t > >::allocator_type":
        return _cstl.VecVecLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::int64_t > >::iterator":
        return _cstl.VecVecLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecLong_swiginit(self, _cstl.new_VecVecLong(*args))

    def push_back(self, x: "VecLong") -> "void":
        return _cstl.VecVecLong_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::int64_t > >::value_type const &":
        return _cstl.VecVecLong_front(self)

    def back(self) -> "std::vector< std::vector< std::int64_t > >::value_type const &":
        return _cstl.VecVecLong_back(self)

    def assign(self, n: "std::vector< std::vector< std::int64_t > >::size_type", x: "VecLong") -> "void":
        return _cstl.VecVecLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::int64_t > >::size_type") -> "void":
        return _cstl.VecVecLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::int64_t > >::size_type":
        return _cstl.VecVecLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecLong

# Register VecVecLong in _cstl:
_cstl.VecVecLong_swigregister(VecVecLong)

class VecSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecSetInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_set< int > >::size_type":
        return _cstl.VecSetInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_set< int > >::difference_type", j: "std::vector< std::unordered_set< int > >::difference_type") -> "std::vector< std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > >,std::allocator< std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > > > > *":
        return _cstl.VecSetInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecSetInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_set< int > >::difference_type", j: "std::vector< std::unordered_set< int > >::difference_type") -> "void":
        return _cstl.VecSetInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecSetInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_set< int > >::value_type const &":
        return _cstl.VecSetInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecSetInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_set< int > >::value_type":
        return _cstl.VecSetInt_pop(self)

    def append(self, x: "SetInt") -> "void":
        return _cstl.VecSetInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecSetInt_empty(self)

    def size(self) -> "std::vector< std::unordered_set< int > >::size_type":
        return _cstl.VecSetInt_size(self)

    def swap(self, v: "VecSetInt") -> "void":
        return _cstl.VecSetInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_set< int > >::iterator":
        return _cstl.VecSetInt_begin(self)

    def end(self) -> "std::vector< std::unordered_set< int > >::iterator":
        return _cstl.VecSetInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_set< int > >::reverse_iterator":
        return _cstl.VecSetInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_set< int > >::reverse_iterator":
        return _cstl.VecSetInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecSetInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_set< int > >::allocator_type":
        return _cstl.VecSetInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecSetInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_set< int > >::iterator":
        return _cstl.VecSetInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecSetInt_swiginit(self, _cstl.new_VecSetInt(*args))

    def push_back(self, x: "SetInt") -> "void":
        return _cstl.VecSetInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_set< int > >::value_type const &":
        return _cstl.VecSetInt_front(self)

    def back(self) -> "std::vector< std::unordered_set< int > >::value_type const &":
        return _cstl.VecSetInt_back(self)

    def assign(self, n: "std::vector< std::unordered_set< int > >::size_type", x: "SetInt") -> "void":
        return _cstl.VecSetInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecSetInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecSetInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_set< int > >::size_type") -> "void":
        return _cstl.VecSetInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_set< int > >::size_type":
        return _cstl.VecSetInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecSetInt

# Register VecSetInt in _cstl:
_cstl.VecSetInt_swigregister(VecSetInt)

class VecSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecSetStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_set< std::string > >::size_type":
        return _cstl.VecSetStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_set< std::string > >::difference_type", j: "std::vector< std::unordered_set< std::string > >::difference_type") -> "std::vector< std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > >,std::allocator< std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > > > > *":
        return _cstl.VecSetStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecSetStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_set< std::string > >::difference_type", j: "std::vector< std::unordered_set< std::string > >::difference_type") -> "void":
        return _cstl.VecSetStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecSetStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_set< std::string > >::value_type const &":
        return _cstl.VecSetStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecSetStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_set< std::string > >::value_type":
        return _cstl.VecSetStr_pop(self)

    def append(self, x: "SetStr") -> "void":
        return _cstl.VecSetStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecSetStr_empty(self)

    def size(self) -> "std::vector< std::unordered_set< std::string > >::size_type":
        return _cstl.VecSetStr_size(self)

    def swap(self, v: "VecSetStr") -> "void":
        return _cstl.VecSetStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_set< std::string > >::iterator":
        return _cstl.VecSetStr_begin(self)

    def end(self) -> "std::vector< std::unordered_set< std::string > >::iterator":
        return _cstl.VecSetStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_set< std::string > >::reverse_iterator":
        return _cstl.VecSetStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_set< std::string > >::reverse_iterator":
        return _cstl.VecSetStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecSetStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_set< std::string > >::allocator_type":
        return _cstl.VecSetStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecSetStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_set< std::string > >::iterator":
        return _cstl.VecSetStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecSetStr_swiginit(self, _cstl.new_VecSetStr(*args))

    def push_back(self, x: "SetStr") -> "void":
        return _cstl.VecSetStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_set< std::string > >::value_type const &":
        return _cstl.VecSetStr_front(self)

    def back(self) -> "std::vector< std::unordered_set< std::string > >::value_type const &":
        return _cstl.VecSetStr_back(self)

    def assign(self, n: "std::vector< std::unordered_set< std::string > >::size_type", x: "SetStr") -> "void":
        return _cstl.VecSetStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecSetStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecSetStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_set< std::string > >::size_type") -> "void":
        return _cstl.VecSetStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_set< std::string > >::size_type":
        return _cstl.VecSetStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecSetStr

# Register VecSetStr in _cstl:
_cstl.VecSetStr_swigregister(VecSetStr)

class VecSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecSetLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_set< std::int64_t > >::size_type":
        return _cstl.VecSetLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_set< std::int64_t > >::difference_type", j: "std::vector< std::unordered_set< std::int64_t > >::difference_type") -> "std::vector< std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > >,std::allocator< std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > > > > *":
        return _cstl.VecSetLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecSetLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_set< std::int64_t > >::difference_type", j: "std::vector< std::unordered_set< std::int64_t > >::difference_type") -> "void":
        return _cstl.VecSetLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecSetLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_set< std::int64_t > >::value_type const &":
        return _cstl.VecSetLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecSetLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_set< std::int64_t > >::value_type":
        return _cstl.VecSetLong_pop(self)

    def append(self, x: "SetLong") -> "void":
        return _cstl.VecSetLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecSetLong_empty(self)

    def size(self) -> "std::vector< std::unordered_set< std::int64_t > >::size_type":
        return _cstl.VecSetLong_size(self)

    def swap(self, v: "VecSetLong") -> "void":
        return _cstl.VecSetLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_set< std::int64_t > >::iterator":
        return _cstl.VecSetLong_begin(self)

    def end(self) -> "std::vector< std::unordered_set< std::int64_t > >::iterator":
        return _cstl.VecSetLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_set< std::int64_t > >::reverse_iterator":
        return _cstl.VecSetLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_set< std::int64_t > >::reverse_iterator":
        return _cstl.VecSetLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecSetLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_set< std::int64_t > >::allocator_type":
        return _cstl.VecSetLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecSetLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_set< std::int64_t > >::iterator":
        return _cstl.VecSetLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecSetLong_swiginit(self, _cstl.new_VecSetLong(*args))

    def push_back(self, x: "SetLong") -> "void":
        return _cstl.VecSetLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_set< std::int64_t > >::value_type const &":
        return _cstl.VecSetLong_front(self)

    def back(self) -> "std::vector< std::unordered_set< std::int64_t > >::value_type const &":
        return _cstl.VecSetLong_back(self)

    def assign(self, n: "std::vector< std::unordered_set< std::int64_t > >::size_type", x: "SetLong") -> "void":
        return _cstl.VecSetLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecSetLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecSetLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_set< std::int64_t > >::size_type") -> "void":
        return _cstl.VecSetLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_set< std::int64_t > >::size_type":
        return _cstl.VecSetLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecSetLong

# Register VecSetLong in _cstl:
_cstl.VecSetLong_swigregister(VecSetLong)

class VecMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,int > >::size_type":
        return _cstl.VecMapIntInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,int > >::difference_type", j: "std::vector< std::unordered_map< int,int > >::difference_type") -> "std::vector< std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > >,std::allocator< std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > > > > *":
        return _cstl.VecMapIntInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,int > >::difference_type", j: "std::vector< std::unordered_map< int,int > >::difference_type") -> "void":
        return _cstl.VecMapIntInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,int > >::value_type const &":
        return _cstl.VecMapIntInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,int > >::value_type":
        return _cstl.VecMapIntInt_pop(self)

    def append(self, x: "MapIntInt") -> "void":
        return _cstl.VecMapIntInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,int > >::size_type":
        return _cstl.VecMapIntInt_size(self)

    def swap(self, v: "VecMapIntInt") -> "void":
        return _cstl.VecMapIntInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,int > >::iterator":
        return _cstl.VecMapIntInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,int > >::iterator":
        return _cstl.VecMapIntInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,int > >::reverse_iterator":
        return _cstl.VecMapIntInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,int > >::reverse_iterator":
        return _cstl.VecMapIntInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,int > >::allocator_type":
        return _cstl.VecMapIntInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,int > >::iterator":
        return _cstl.VecMapIntInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntInt_swiginit(self, _cstl.new_VecMapIntInt(*args))

    def push_back(self, x: "MapIntInt") -> "void":
        return _cstl.VecMapIntInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,int > >::value_type const &":
        return _cstl.VecMapIntInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,int > >::value_type const &":
        return _cstl.VecMapIntInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,int > >::size_type", x: "MapIntInt") -> "void":
        return _cstl.VecMapIntInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,int > >::size_type") -> "void":
        return _cstl.VecMapIntInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,int > >::size_type":
        return _cstl.VecMapIntInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntInt

# Register VecMapIntInt in _cstl:
_cstl.VecMapIntInt_swigregister(VecMapIntInt)

class VecMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::string > >::size_type":
        return _cstl.VecMapIntStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::string > >::difference_type", j: "std::vector< std::unordered_map< int,std::string > >::difference_type") -> "std::vector< std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > >,std::allocator< std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > > > > *":
        return _cstl.VecMapIntStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::string > >::difference_type", j: "std::vector< std::unordered_map< int,std::string > >::difference_type") -> "void":
        return _cstl.VecMapIntStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::string > >::value_type const &":
        return _cstl.VecMapIntStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::string > >::value_type":
        return _cstl.VecMapIntStr_pop(self)

    def append(self, x: "MapIntStr") -> "void":
        return _cstl.VecMapIntStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::string > >::size_type":
        return _cstl.VecMapIntStr_size(self)

    def swap(self, v: "VecMapIntStr") -> "void":
        return _cstl.VecMapIntStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::string > >::iterator":
        return _cstl.VecMapIntStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::string > >::iterator":
        return _cstl.VecMapIntStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::string > >::reverse_iterator":
        return _cstl.VecMapIntStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::string > >::reverse_iterator":
        return _cstl.VecMapIntStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::string > >::allocator_type":
        return _cstl.VecMapIntStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::string > >::iterator":
        return _cstl.VecMapIntStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntStr_swiginit(self, _cstl.new_VecMapIntStr(*args))

    def push_back(self, x: "MapIntStr") -> "void":
        return _cstl.VecMapIntStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::string > >::value_type const &":
        return _cstl.VecMapIntStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::string > >::value_type const &":
        return _cstl.VecMapIntStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::string > >::size_type", x: "MapIntStr") -> "void":
        return _cstl.VecMapIntStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::string > >::size_type") -> "void":
        return _cstl.VecMapIntStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::string > >::size_type":
        return _cstl.VecMapIntStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntStr

# Register VecMapIntStr in _cstl:
_cstl.VecMapIntStr_swigregister(VecMapIntStr)

class VecMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntFloat___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,float > >::size_type":
        return _cstl.VecMapIntFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,float > >::difference_type", j: "std::vector< std::unordered_map< int,float > >::difference_type") -> "std::vector< std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > >,std::allocator< std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > > > > *":
        return _cstl.VecMapIntFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,float > >::difference_type", j: "std::vector< std::unordered_map< int,float > >::difference_type") -> "void":
        return _cstl.VecMapIntFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,float > >::value_type const &":
        return _cstl.VecMapIntFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,float > >::value_type":
        return _cstl.VecMapIntFloat_pop(self)

    def append(self, x: "MapIntFloat") -> "void":
        return _cstl.VecMapIntFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntFloat_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,float > >::size_type":
        return _cstl.VecMapIntFloat_size(self)

    def swap(self, v: "VecMapIntFloat") -> "void":
        return _cstl.VecMapIntFloat_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,float > >::iterator":
        return _cstl.VecMapIntFloat_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,float > >::iterator":
        return _cstl.VecMapIntFloat_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,float > >::reverse_iterator":
        return _cstl.VecMapIntFloat_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,float > >::reverse_iterator":
        return _cstl.VecMapIntFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,float > >::allocator_type":
        return _cstl.VecMapIntFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,float > >::iterator":
        return _cstl.VecMapIntFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntFloat_swiginit(self, _cstl.new_VecMapIntFloat(*args))

    def push_back(self, x: "MapIntFloat") -> "void":
        return _cstl.VecMapIntFloat_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,float > >::value_type const &":
        return _cstl.VecMapIntFloat_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,float > >::value_type const &":
        return _cstl.VecMapIntFloat_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,float > >::size_type", x: "MapIntFloat") -> "void":
        return _cstl.VecMapIntFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,float > >::size_type") -> "void":
        return _cstl.VecMapIntFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,float > >::size_type":
        return _cstl.VecMapIntFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntFloat

# Register VecMapIntFloat in _cstl:
_cstl.VecMapIntFloat_swigregister(VecMapIntFloat)

class VecMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntDouble___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,double > >::size_type":
        return _cstl.VecMapIntDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,double > >::difference_type", j: "std::vector< std::unordered_map< int,double > >::difference_type") -> "std::vector< std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > >,std::allocator< std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > > > > *":
        return _cstl.VecMapIntDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,double > >::difference_type", j: "std::vector< std::unordered_map< int,double > >::difference_type") -> "void":
        return _cstl.VecMapIntDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,double > >::value_type const &":
        return _cstl.VecMapIntDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,double > >::value_type":
        return _cstl.VecMapIntDouble_pop(self)

    def append(self, x: "MapIntDouble") -> "void":
        return _cstl.VecMapIntDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntDouble_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,double > >::size_type":
        return _cstl.VecMapIntDouble_size(self)

    def swap(self, v: "VecMapIntDouble") -> "void":
        return _cstl.VecMapIntDouble_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,double > >::iterator":
        return _cstl.VecMapIntDouble_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,double > >::iterator":
        return _cstl.VecMapIntDouble_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,double > >::reverse_iterator":
        return _cstl.VecMapIntDouble_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,double > >::reverse_iterator":
        return _cstl.VecMapIntDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,double > >::allocator_type":
        return _cstl.VecMapIntDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,double > >::iterator":
        return _cstl.VecMapIntDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntDouble_swiginit(self, _cstl.new_VecMapIntDouble(*args))

    def push_back(self, x: "MapIntDouble") -> "void":
        return _cstl.VecMapIntDouble_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,double > >::value_type const &":
        return _cstl.VecMapIntDouble_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,double > >::value_type const &":
        return _cstl.VecMapIntDouble_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,double > >::size_type", x: "MapIntDouble") -> "void":
        return _cstl.VecMapIntDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,double > >::size_type") -> "void":
        return _cstl.VecMapIntDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,double > >::size_type":
        return _cstl.VecMapIntDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntDouble

# Register VecMapIntDouble in _cstl:
_cstl.VecMapIntDouble_swigregister(VecMapIntDouble)

class VecMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntBool___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,bool > >::size_type":
        return _cstl.VecMapIntBool___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,bool > >::difference_type", j: "std::vector< std::unordered_map< int,bool > >::difference_type") -> "std::vector< std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > >,std::allocator< std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > > > > *":
        return _cstl.VecMapIntBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,bool > >::difference_type", j: "std::vector< std::unordered_map< int,bool > >::difference_type") -> "void":
        return _cstl.VecMapIntBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,bool > >::value_type const &":
        return _cstl.VecMapIntBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,bool > >::value_type":
        return _cstl.VecMapIntBool_pop(self)

    def append(self, x: "MapIntBool") -> "void":
        return _cstl.VecMapIntBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntBool_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,bool > >::size_type":
        return _cstl.VecMapIntBool_size(self)

    def swap(self, v: "VecMapIntBool") -> "void":
        return _cstl.VecMapIntBool_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,bool > >::iterator":
        return _cstl.VecMapIntBool_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,bool > >::iterator":
        return _cstl.VecMapIntBool_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,bool > >::reverse_iterator":
        return _cstl.VecMapIntBool_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,bool > >::reverse_iterator":
        return _cstl.VecMapIntBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntBool_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,bool > >::allocator_type":
        return _cstl.VecMapIntBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,bool > >::iterator":
        return _cstl.VecMapIntBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntBool_swiginit(self, _cstl.new_VecMapIntBool(*args))

    def push_back(self, x: "MapIntBool") -> "void":
        return _cstl.VecMapIntBool_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,bool > >::value_type const &":
        return _cstl.VecMapIntBool_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,bool > >::value_type const &":
        return _cstl.VecMapIntBool_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,bool > >::size_type", x: "MapIntBool") -> "void":
        return _cstl.VecMapIntBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,bool > >::size_type") -> "void":
        return _cstl.VecMapIntBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,bool > >::size_type":
        return _cstl.VecMapIntBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntBool

# Register VecMapIntBool in _cstl:
_cstl.VecMapIntBool_swigregister(VecMapIntBool)

class VecMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::size_type":
        return _cstl.VecMapIntLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::int64_t > >::difference_type", j: "std::vector< std::unordered_map< int,std::int64_t > >::difference_type") -> "std::vector< std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > >,std::allocator< std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > > > > *":
        return _cstl.VecMapIntLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::int64_t > >::difference_type", j: "std::vector< std::unordered_map< int,std::int64_t > >::difference_type") -> "void":
        return _cstl.VecMapIntLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::int64_t > >::value_type const &":
        return _cstl.VecMapIntLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::value_type":
        return _cstl.VecMapIntLong_pop(self)

    def append(self, x: "MapIntLong") -> "void":
        return _cstl.VecMapIntLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::size_type":
        return _cstl.VecMapIntLong_size(self)

    def swap(self, v: "VecMapIntLong") -> "void":
        return _cstl.VecMapIntLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::iterator":
        return _cstl.VecMapIntLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::iterator":
        return _cstl.VecMapIntLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::reverse_iterator":
        return _cstl.VecMapIntLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::reverse_iterator":
        return _cstl.VecMapIntLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::allocator_type":
        return _cstl.VecMapIntLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::int64_t > >::iterator":
        return _cstl.VecMapIntLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntLong_swiginit(self, _cstl.new_VecMapIntLong(*args))

    def push_back(self, x: "MapIntLong") -> "void":
        return _cstl.VecMapIntLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::value_type const &":
        return _cstl.VecMapIntLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::value_type const &":
        return _cstl.VecMapIntLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::int64_t > >::size_type", x: "MapIntLong") -> "void":
        return _cstl.VecMapIntLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::int64_t > >::size_type") -> "void":
        return _cstl.VecMapIntLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::int64_t > >::size_type":
        return _cstl.VecMapIntLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntLong

# Register VecMapIntLong in _cstl:
_cstl.VecMapIntLong_swigregister(VecMapIntLong)

class VecMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,int > >::size_type":
        return _cstl.VecMapStrInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,int > >::difference_type", j: "std::vector< std::unordered_map< std::string,int > >::difference_type") -> "std::vector< std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > >,std::allocator< std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > > > > *":
        return _cstl.VecMapStrInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,int > >::difference_type", j: "std::vector< std::unordered_map< std::string,int > >::difference_type") -> "void":
        return _cstl.VecMapStrInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,int > >::value_type const &":
        return _cstl.VecMapStrInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,int > >::value_type":
        return _cstl.VecMapStrInt_pop(self)

    def append(self, x: "MapStrInt") -> "void":
        return _cstl.VecMapStrInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,int > >::size_type":
        return _cstl.VecMapStrInt_size(self)

    def swap(self, v: "VecMapStrInt") -> "void":
        return _cstl.VecMapStrInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,int > >::iterator":
        return _cstl.VecMapStrInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,int > >::iterator":
        return _cstl.VecMapStrInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,int > >::reverse_iterator":
        return _cstl.VecMapStrInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,int > >::reverse_iterator":
        return _cstl.VecMapStrInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,int > >::allocator_type":
        return _cstl.VecMapStrInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,int > >::iterator":
        return _cstl.VecMapStrInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrInt_swiginit(self, _cstl.new_VecMapStrInt(*args))

    def push_back(self, x: "MapStrInt") -> "void":
        return _cstl.VecMapStrInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,int > >::value_type const &":
        return _cstl.VecMapStrInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,int > >::value_type const &":
        return _cstl.VecMapStrInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,int > >::size_type", x: "MapStrInt") -> "void":
        return _cstl.VecMapStrInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,int > >::size_type") -> "void":
        return _cstl.VecMapStrInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,int > >::size_type":
        return _cstl.VecMapStrInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrInt

# Register VecMapStrInt in _cstl:
_cstl.VecMapStrInt_swigregister(VecMapStrInt)

class VecMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::string > >::size_type":
        return _cstl.VecMapStrStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::string > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::string > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > >,std::allocator< std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > > > > *":
        return _cstl.VecMapStrStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::string > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::string > >::difference_type") -> "void":
        return _cstl.VecMapStrStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::string > >::value_type const &":
        return _cstl.VecMapStrStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::string > >::value_type":
        return _cstl.VecMapStrStr_pop(self)

    def append(self, x: "MapStrStr") -> "void":
        return _cstl.VecMapStrStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::string > >::size_type":
        return _cstl.VecMapStrStr_size(self)

    def swap(self, v: "VecMapStrStr") -> "void":
        return _cstl.VecMapStrStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::string > >::iterator":
        return _cstl.VecMapStrStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::string > >::iterator":
        return _cstl.VecMapStrStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::string > >::reverse_iterator":
        return _cstl.VecMapStrStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::string > >::reverse_iterator":
        return _cstl.VecMapStrStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::string > >::allocator_type":
        return _cstl.VecMapStrStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::string > >::iterator":
        return _cstl.VecMapStrStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrStr_swiginit(self, _cstl.new_VecMapStrStr(*args))

    def push_back(self, x: "MapStrStr") -> "void":
        return _cstl.VecMapStrStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::string > >::value_type const &":
        return _cstl.VecMapStrStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::string > >::value_type const &":
        return _cstl.VecMapStrStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::string > >::size_type", x: "MapStrStr") -> "void":
        return _cstl.VecMapStrStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::string > >::size_type") -> "void":
        return _cstl.VecMapStrStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::string > >::size_type":
        return _cstl.VecMapStrStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrStr

# Register VecMapStrStr in _cstl:
_cstl.VecMapStrStr_swigregister(VecMapStrStr)

class VecMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrFloat___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,float > >::size_type":
        return _cstl.VecMapStrFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,float > >::difference_type", j: "std::vector< std::unordered_map< std::string,float > >::difference_type") -> "std::vector< std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > >,std::allocator< std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > > > > *":
        return _cstl.VecMapStrFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,float > >::difference_type", j: "std::vector< std::unordered_map< std::string,float > >::difference_type") -> "void":
        return _cstl.VecMapStrFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,float > >::value_type const &":
        return _cstl.VecMapStrFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,float > >::value_type":
        return _cstl.VecMapStrFloat_pop(self)

    def append(self, x: "MapStrFloat") -> "void":
        return _cstl.VecMapStrFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrFloat_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,float > >::size_type":
        return _cstl.VecMapStrFloat_size(self)

    def swap(self, v: "VecMapStrFloat") -> "void":
        return _cstl.VecMapStrFloat_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,float > >::iterator":
        return _cstl.VecMapStrFloat_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,float > >::iterator":
        return _cstl.VecMapStrFloat_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,float > >::reverse_iterator":
        return _cstl.VecMapStrFloat_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,float > >::reverse_iterator":
        return _cstl.VecMapStrFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,float > >::allocator_type":
        return _cstl.VecMapStrFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,float > >::iterator":
        return _cstl.VecMapStrFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrFloat_swiginit(self, _cstl.new_VecMapStrFloat(*args))

    def push_back(self, x: "MapStrFloat") -> "void":
        return _cstl.VecMapStrFloat_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,float > >::value_type const &":
        return _cstl.VecMapStrFloat_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,float > >::value_type const &":
        return _cstl.VecMapStrFloat_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,float > >::size_type", x: "MapStrFloat") -> "void":
        return _cstl.VecMapStrFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,float > >::size_type") -> "void":
        return _cstl.VecMapStrFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,float > >::size_type":
        return _cstl.VecMapStrFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrFloat

# Register VecMapStrFloat in _cstl:
_cstl.VecMapStrFloat_swigregister(VecMapStrFloat)

class VecMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrDouble___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,double > >::size_type":
        return _cstl.VecMapStrDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,double > >::difference_type", j: "std::vector< std::unordered_map< std::string,double > >::difference_type") -> "std::vector< std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > >,std::allocator< std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > > > > *":
        return _cstl.VecMapStrDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,double > >::difference_type", j: "std::vector< std::unordered_map< std::string,double > >::difference_type") -> "void":
        return _cstl.VecMapStrDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,double > >::value_type const &":
        return _cstl.VecMapStrDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,double > >::value_type":
        return _cstl.VecMapStrDouble_pop(self)

    def append(self, x: "MapStrDouble") -> "void":
        return _cstl.VecMapStrDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrDouble_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,double > >::size_type":
        return _cstl.VecMapStrDouble_size(self)

    def swap(self, v: "VecMapStrDouble") -> "void":
        return _cstl.VecMapStrDouble_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,double > >::iterator":
        return _cstl.VecMapStrDouble_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,double > >::iterator":
        return _cstl.VecMapStrDouble_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,double > >::reverse_iterator":
        return _cstl.VecMapStrDouble_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,double > >::reverse_iterator":
        return _cstl.VecMapStrDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,double > >::allocator_type":
        return _cstl.VecMapStrDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,double > >::iterator":
        return _cstl.VecMapStrDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrDouble_swiginit(self, _cstl.new_VecMapStrDouble(*args))

    def push_back(self, x: "MapStrDouble") -> "void":
        return _cstl.VecMapStrDouble_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,double > >::value_type const &":
        return _cstl.VecMapStrDouble_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,double > >::value_type const &":
        return _cstl.VecMapStrDouble_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,double > >::size_type", x: "MapStrDouble") -> "void":
        return _cstl.VecMapStrDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,double > >::size_type") -> "void":
        return _cstl.VecMapStrDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,double > >::size_type":
        return _cstl.VecMapStrDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrDouble

# Register VecMapStrDouble in _cstl:
_cstl.VecMapStrDouble_swigregister(VecMapStrDouble)

class VecMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrBool___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,bool > >::size_type":
        return _cstl.VecMapStrBool___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,bool > >::difference_type", j: "std::vector< std::unordered_map< std::string,bool > >::difference_type") -> "std::vector< std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > >,std::allocator< std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > > > > *":
        return _cstl.VecMapStrBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,bool > >::difference_type", j: "std::vector< std::unordered_map< std::string,bool > >::difference_type") -> "void":
        return _cstl.VecMapStrBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,bool > >::value_type const &":
        return _cstl.VecMapStrBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,bool > >::value_type":
        return _cstl.VecMapStrBool_pop(self)

    def append(self, x: "MapStrBool") -> "void":
        return _cstl.VecMapStrBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrBool_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,bool > >::size_type":
        return _cstl.VecMapStrBool_size(self)

    def swap(self, v: "VecMapStrBool") -> "void":
        return _cstl.VecMapStrBool_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,bool > >::iterator":
        return _cstl.VecMapStrBool_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,bool > >::iterator":
        return _cstl.VecMapStrBool_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,bool > >::reverse_iterator":
        return _cstl.VecMapStrBool_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,bool > >::reverse_iterator":
        return _cstl.VecMapStrBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrBool_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,bool > >::allocator_type":
        return _cstl.VecMapStrBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,bool > >::iterator":
        return _cstl.VecMapStrBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrBool_swiginit(self, _cstl.new_VecMapStrBool(*args))

    def push_back(self, x: "MapStrBool") -> "void":
        return _cstl.VecMapStrBool_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,bool > >::value_type const &":
        return _cstl.VecMapStrBool_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,bool > >::value_type const &":
        return _cstl.VecMapStrBool_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,bool > >::size_type", x: "MapStrBool") -> "void":
        return _cstl.VecMapStrBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,bool > >::size_type") -> "void":
        return _cstl.VecMapStrBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,bool > >::size_type":
        return _cstl.VecMapStrBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrBool

# Register VecMapStrBool in _cstl:
_cstl.VecMapStrBool_swigregister(VecMapStrBool)

class VecMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::size_type":
        return _cstl.VecMapStrLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::int64_t > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::int64_t > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > >,std::allocator< std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > > > > *":
        return _cstl.VecMapStrLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::int64_t > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::int64_t > >::difference_type") -> "void":
        return _cstl.VecMapStrLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::value_type const &":
        return _cstl.VecMapStrLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::value_type":
        return _cstl.VecMapStrLong_pop(self)

    def append(self, x: "MapStrLong") -> "void":
        return _cstl.VecMapStrLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::size_type":
        return _cstl.VecMapStrLong_size(self)

    def swap(self, v: "VecMapStrLong") -> "void":
        return _cstl.VecMapStrLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::iterator":
        return _cstl.VecMapStrLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::iterator":
        return _cstl.VecMapStrLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::reverse_iterator":
        return _cstl.VecMapStrLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::reverse_iterator":
        return _cstl.VecMapStrLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::allocator_type":
        return _cstl.VecMapStrLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::iterator":
        return _cstl.VecMapStrLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrLong_swiginit(self, _cstl.new_VecMapStrLong(*args))

    def push_back(self, x: "MapStrLong") -> "void":
        return _cstl.VecMapStrLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::value_type const &":
        return _cstl.VecMapStrLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::value_type const &":
        return _cstl.VecMapStrLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::int64_t > >::size_type", x: "MapStrLong") -> "void":
        return _cstl.VecMapStrLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::int64_t > >::size_type") -> "void":
        return _cstl.VecMapStrLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::int64_t > >::size_type":
        return _cstl.VecMapStrLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrLong

# Register VecMapStrLong in _cstl:
_cstl.VecMapStrLong_swigregister(VecMapStrLong)

class VecMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::size_type":
        return _cstl.VecMapLongInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,int > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,int > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > >,std::allocator< std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > > > > *":
        return _cstl.VecMapLongInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,int > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,int > >::difference_type") -> "void":
        return _cstl.VecMapLongInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,int > >::value_type const &":
        return _cstl.VecMapLongInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::value_type":
        return _cstl.VecMapLongInt_pop(self)

    def append(self, x: "MapLongInt") -> "void":
        return _cstl.VecMapLongInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::size_type":
        return _cstl.VecMapLongInt_size(self)

    def swap(self, v: "VecMapLongInt") -> "void":
        return _cstl.VecMapLongInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::iterator":
        return _cstl.VecMapLongInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::iterator":
        return _cstl.VecMapLongInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::reverse_iterator":
        return _cstl.VecMapLongInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::reverse_iterator":
        return _cstl.VecMapLongInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::allocator_type":
        return _cstl.VecMapLongInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,int > >::iterator":
        return _cstl.VecMapLongInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongInt_swiginit(self, _cstl.new_VecMapLongInt(*args))

    def push_back(self, x: "MapLongInt") -> "void":
        return _cstl.VecMapLongInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::value_type const &":
        return _cstl.VecMapLongInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::value_type const &":
        return _cstl.VecMapLongInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,int > >::size_type", x: "MapLongInt") -> "void":
        return _cstl.VecMapLongInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,int > >::size_type") -> "void":
        return _cstl.VecMapLongInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,int > >::size_type":
        return _cstl.VecMapLongInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongInt

# Register VecMapLongInt in _cstl:
_cstl.VecMapLongInt_swigregister(VecMapLongInt)

class VecMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::size_type":
        return _cstl.VecMapLongStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::string > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::string > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > >,std::allocator< std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > > > > *":
        return _cstl.VecMapLongStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::string > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::string > >::difference_type") -> "void":
        return _cstl.VecMapLongStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::value_type const &":
        return _cstl.VecMapLongStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::value_type":
        return _cstl.VecMapLongStr_pop(self)

    def append(self, x: "MapLongStr") -> "void":
        return _cstl.VecMapLongStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::size_type":
        return _cstl.VecMapLongStr_size(self)

    def swap(self, v: "VecMapLongStr") -> "void":
        return _cstl.VecMapLongStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::iterator":
        return _cstl.VecMapLongStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::iterator":
        return _cstl.VecMapLongStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::reverse_iterator":
        return _cstl.VecMapLongStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::reverse_iterator":
        return _cstl.VecMapLongStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::allocator_type":
        return _cstl.VecMapLongStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::iterator":
        return _cstl.VecMapLongStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongStr_swiginit(self, _cstl.new_VecMapLongStr(*args))

    def push_back(self, x: "MapLongStr") -> "void":
        return _cstl.VecMapLongStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::value_type const &":
        return _cstl.VecMapLongStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::value_type const &":
        return _cstl.VecMapLongStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::string > >::size_type", x: "MapLongStr") -> "void":
        return _cstl.VecMapLongStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::string > >::size_type") -> "void":
        return _cstl.VecMapLongStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::string > >::size_type":
        return _cstl.VecMapLongStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongStr

# Register VecMapLongStr in _cstl:
_cstl.VecMapLongStr_swigregister(VecMapLongStr)

class VecMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongFloat___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::size_type":
        return _cstl.VecMapLongFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,float > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,float > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > >,std::allocator< std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > > > > *":
        return _cstl.VecMapLongFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,float > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,float > >::difference_type") -> "void":
        return _cstl.VecMapLongFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,float > >::value_type const &":
        return _cstl.VecMapLongFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::value_type":
        return _cstl.VecMapLongFloat_pop(self)

    def append(self, x: "MapLongFloat") -> "void":
        return _cstl.VecMapLongFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongFloat_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::size_type":
        return _cstl.VecMapLongFloat_size(self)

    def swap(self, v: "VecMapLongFloat") -> "void":
        return _cstl.VecMapLongFloat_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::iterator":
        return _cstl.VecMapLongFloat_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::iterator":
        return _cstl.VecMapLongFloat_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::reverse_iterator":
        return _cstl.VecMapLongFloat_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::reverse_iterator":
        return _cstl.VecMapLongFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::allocator_type":
        return _cstl.VecMapLongFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,float > >::iterator":
        return _cstl.VecMapLongFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongFloat_swiginit(self, _cstl.new_VecMapLongFloat(*args))

    def push_back(self, x: "MapLongFloat") -> "void":
        return _cstl.VecMapLongFloat_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::value_type const &":
        return _cstl.VecMapLongFloat_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::value_type const &":
        return _cstl.VecMapLongFloat_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,float > >::size_type", x: "MapLongFloat") -> "void":
        return _cstl.VecMapLongFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,float > >::size_type") -> "void":
        return _cstl.VecMapLongFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,float > >::size_type":
        return _cstl.VecMapLongFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongFloat

# Register VecMapLongFloat in _cstl:
_cstl.VecMapLongFloat_swigregister(VecMapLongFloat)

class VecMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongDouble___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::size_type":
        return _cstl.VecMapLongDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,double > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,double > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > >,std::allocator< std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > > > > *":
        return _cstl.VecMapLongDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,double > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,double > >::difference_type") -> "void":
        return _cstl.VecMapLongDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,double > >::value_type const &":
        return _cstl.VecMapLongDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::value_type":
        return _cstl.VecMapLongDouble_pop(self)

    def append(self, x: "MapLongDouble") -> "void":
        return _cstl.VecMapLongDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongDouble_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::size_type":
        return _cstl.VecMapLongDouble_size(self)

    def swap(self, v: "VecMapLongDouble") -> "void":
        return _cstl.VecMapLongDouble_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::iterator":
        return _cstl.VecMapLongDouble_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::iterator":
        return _cstl.VecMapLongDouble_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::reverse_iterator":
        return _cstl.VecMapLongDouble_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::reverse_iterator":
        return _cstl.VecMapLongDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::allocator_type":
        return _cstl.VecMapLongDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,double > >::iterator":
        return _cstl.VecMapLongDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongDouble_swiginit(self, _cstl.new_VecMapLongDouble(*args))

    def push_back(self, x: "MapLongDouble") -> "void":
        return _cstl.VecMapLongDouble_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::value_type const &":
        return _cstl.VecMapLongDouble_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::value_type const &":
        return _cstl.VecMapLongDouble_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,double > >::size_type", x: "MapLongDouble") -> "void":
        return _cstl.VecMapLongDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,double > >::size_type") -> "void":
        return _cstl.VecMapLongDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,double > >::size_type":
        return _cstl.VecMapLongDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongDouble

# Register VecMapLongDouble in _cstl:
_cstl.VecMapLongDouble_swigregister(VecMapLongDouble)

class VecMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongBool___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::size_type":
        return _cstl.VecMapLongBool___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,bool > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,bool > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > >,std::allocator< std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > > > > *":
        return _cstl.VecMapLongBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,bool > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,bool > >::difference_type") -> "void":
        return _cstl.VecMapLongBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,bool > >::value_type const &":
        return _cstl.VecMapLongBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::value_type":
        return _cstl.VecMapLongBool_pop(self)

    def append(self, x: "MapLongBool") -> "void":
        return _cstl.VecMapLongBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongBool_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::size_type":
        return _cstl.VecMapLongBool_size(self)

    def swap(self, v: "VecMapLongBool") -> "void":
        return _cstl.VecMapLongBool_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::iterator":
        return _cstl.VecMapLongBool_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::iterator":
        return _cstl.VecMapLongBool_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::reverse_iterator":
        return _cstl.VecMapLongBool_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::reverse_iterator":
        return _cstl.VecMapLongBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongBool_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::allocator_type":
        return _cstl.VecMapLongBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,bool > >::iterator":
        return _cstl.VecMapLongBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongBool_swiginit(self, _cstl.new_VecMapLongBool(*args))

    def push_back(self, x: "MapLongBool") -> "void":
        return _cstl.VecMapLongBool_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::value_type const &":
        return _cstl.VecMapLongBool_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::value_type const &":
        return _cstl.VecMapLongBool_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,bool > >::size_type", x: "MapLongBool") -> "void":
        return _cstl.VecMapLongBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,bool > >::size_type") -> "void":
        return _cstl.VecMapLongBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,bool > >::size_type":
        return _cstl.VecMapLongBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongBool

# Register VecMapLongBool in _cstl:
_cstl.VecMapLongBool_swigregister(VecMapLongBool)

class VecMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _cstl.VecMapLongLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > >,std::allocator< std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > > > > *":
        return _cstl.VecMapLongLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::difference_type") -> "void":
        return _cstl.VecMapLongLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::value_type const &":
        return _cstl.VecMapLongLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::value_type":
        return _cstl.VecMapLongLong_pop(self)

    def append(self, x: "MapLongLong") -> "void":
        return _cstl.VecMapLongLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _cstl.VecMapLongLong_size(self)

    def swap(self, v: "VecMapLongLong") -> "void":
        return _cstl.VecMapLongLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _cstl.VecMapLongLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _cstl.VecMapLongLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::reverse_iterator":
        return _cstl.VecMapLongLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::reverse_iterator":
        return _cstl.VecMapLongLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::allocator_type":
        return _cstl.VecMapLongLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _cstl.VecMapLongLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongLong_swiginit(self, _cstl.new_VecMapLongLong(*args))

    def push_back(self, x: "MapLongLong") -> "void":
        return _cstl.VecMapLongLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::value_type const &":
        return _cstl.VecMapLongLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::value_type const &":
        return _cstl.VecMapLongLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::size_type", x: "MapLongLong") -> "void":
        return _cstl.VecMapLongLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::size_type") -> "void":
        return _cstl.VecMapLongLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _cstl.VecMapLongLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongLong

# Register VecMapLongLong in _cstl:
_cstl.VecMapLongLong_swigregister(VecMapLongLong)

class MapIntVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< int > >::size_type":
        return _cstl.MapIntVecInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< int > >::key_type const &") -> "std::unordered_map< int,std::vector< int > >::mapped_type const &":
        return _cstl.MapIntVecInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< int > >::key_type const &") -> "void":
        return _cstl.MapIntVecInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< int > >::key_type const &") -> "bool":
        return _cstl.MapIntVecInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< int > >::key_type const &") -> "bool":
        return _cstl.MapIntVecInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecInt_swiginit(self, _cstl.new_MapIntVecInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< int > >::size_type":
        return _cstl.MapIntVecInt_size(self)

    def swap(self, v: "MapIntVecInt") -> "void":
        return _cstl.MapIntVecInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< int > >::iterator":
        return _cstl.MapIntVecInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< int > >::iterator":
        return _cstl.MapIntVecInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< int > >::allocator_type":
        return _cstl.MapIntVecInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< int > >::key_type const &") -> "std::unordered_map< int,std::vector< int > >::size_type":
        return _cstl.MapIntVecInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< int > >::key_type const &") -> "std::unordered_map< int,std::vector< int > >::iterator":
        return _cstl.MapIntVecInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecInt

# Register MapIntVecInt in _cstl:
_cstl.MapIntVecInt_swigregister(MapIntVecInt)

class MapIntVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::string > >::size_type":
        return _cstl.MapIntVecStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::string > >::key_type const &") -> "std::unordered_map< int,std::vector< std::string > >::mapped_type const &":
        return _cstl.MapIntVecStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::string > >::key_type const &") -> "void":
        return _cstl.MapIntVecStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::string > >::key_type const &") -> "bool":
        return _cstl.MapIntVecStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::string > >::key_type const &") -> "bool":
        return _cstl.MapIntVecStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecStr_swiginit(self, _cstl.new_MapIntVecStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::string > >::size_type":
        return _cstl.MapIntVecStr_size(self)

    def swap(self, v: "MapIntVecStr") -> "void":
        return _cstl.MapIntVecStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::string > >::iterator":
        return _cstl.MapIntVecStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::string > >::iterator":
        return _cstl.MapIntVecStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::string > >::allocator_type":
        return _cstl.MapIntVecStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::string > >::key_type const &") -> "std::unordered_map< int,std::vector< std::string > >::size_type":
        return _cstl.MapIntVecStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::string > >::key_type const &") -> "std::unordered_map< int,std::vector< std::string > >::iterator":
        return _cstl.MapIntVecStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecStr

# Register MapIntVecStr in _cstl:
_cstl.MapIntVecStr_swigregister(MapIntVecStr)

class MapIntVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< float > >::size_type":
        return _cstl.MapIntVecFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< float > >::key_type const &") -> "std::unordered_map< int,std::vector< float > >::mapped_type const &":
        return _cstl.MapIntVecFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< float > >::key_type const &") -> "void":
        return _cstl.MapIntVecFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< float > >::key_type const &") -> "bool":
        return _cstl.MapIntVecFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< float > >::key_type const &") -> "bool":
        return _cstl.MapIntVecFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecFloat_swiginit(self, _cstl.new_MapIntVecFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< float > >::size_type":
        return _cstl.MapIntVecFloat_size(self)

    def swap(self, v: "MapIntVecFloat") -> "void":
        return _cstl.MapIntVecFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< float > >::iterator":
        return _cstl.MapIntVecFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< float > >::iterator":
        return _cstl.MapIntVecFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< float > >::allocator_type":
        return _cstl.MapIntVecFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< float > >::key_type const &") -> "std::unordered_map< int,std::vector< float > >::size_type":
        return _cstl.MapIntVecFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< float > >::key_type const &") -> "std::unordered_map< int,std::vector< float > >::iterator":
        return _cstl.MapIntVecFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecFloat

# Register MapIntVecFloat in _cstl:
_cstl.MapIntVecFloat_swigregister(MapIntVecFloat)

class MapIntVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< double > >::size_type":
        return _cstl.MapIntVecDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< double > >::key_type const &") -> "std::unordered_map< int,std::vector< double > >::mapped_type const &":
        return _cstl.MapIntVecDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< double > >::key_type const &") -> "void":
        return _cstl.MapIntVecDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< double > >::key_type const &") -> "bool":
        return _cstl.MapIntVecDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< double > >::key_type const &") -> "bool":
        return _cstl.MapIntVecDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecDouble_swiginit(self, _cstl.new_MapIntVecDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< double > >::size_type":
        return _cstl.MapIntVecDouble_size(self)

    def swap(self, v: "MapIntVecDouble") -> "void":
        return _cstl.MapIntVecDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< double > >::iterator":
        return _cstl.MapIntVecDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< double > >::iterator":
        return _cstl.MapIntVecDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< double > >::allocator_type":
        return _cstl.MapIntVecDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< double > >::key_type const &") -> "std::unordered_map< int,std::vector< double > >::size_type":
        return _cstl.MapIntVecDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< double > >::key_type const &") -> "std::unordered_map< int,std::vector< double > >::iterator":
        return _cstl.MapIntVecDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecDouble

# Register MapIntVecDouble in _cstl:
_cstl.MapIntVecDouble_swigregister(MapIntVecDouble)

class MapIntVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< bool > >::size_type":
        return _cstl.MapIntVecBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< bool > >::key_type const &") -> "std::unordered_map< int,std::vector< bool > >::mapped_type const &":
        return _cstl.MapIntVecBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< bool > >::key_type const &") -> "void":
        return _cstl.MapIntVecBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< bool > >::key_type const &") -> "bool":
        return _cstl.MapIntVecBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< bool > >::key_type const &") -> "bool":
        return _cstl.MapIntVecBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecBool_swiginit(self, _cstl.new_MapIntVecBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< bool > >::size_type":
        return _cstl.MapIntVecBool_size(self)

    def swap(self, v: "MapIntVecBool") -> "void":
        return _cstl.MapIntVecBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< bool > >::iterator":
        return _cstl.MapIntVecBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< bool > >::iterator":
        return _cstl.MapIntVecBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< bool > >::allocator_type":
        return _cstl.MapIntVecBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< bool > >::key_type const &") -> "std::unordered_map< int,std::vector< bool > >::size_type":
        return _cstl.MapIntVecBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< bool > >::key_type const &") -> "std::unordered_map< int,std::vector< bool > >::iterator":
        return _cstl.MapIntVecBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecBool

# Register MapIntVecBool in _cstl:
_cstl.MapIntVecBool_swigregister(MapIntVecBool)

class MapIntVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::int64_t > >::size_type":
        return _cstl.MapIntVecLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::vector< std::int64_t > >::mapped_type const &":
        return _cstl.MapIntVecLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::int64_t > >::key_type const &") -> "void":
        return _cstl.MapIntVecLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapIntVecLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapIntVecLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecLong_swiginit(self, _cstl.new_MapIntVecLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::int64_t > >::size_type":
        return _cstl.MapIntVecLong_size(self)

    def swap(self, v: "MapIntVecLong") -> "void":
        return _cstl.MapIntVecLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::int64_t > >::iterator":
        return _cstl.MapIntVecLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::int64_t > >::iterator":
        return _cstl.MapIntVecLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::int64_t > >::allocator_type":
        return _cstl.MapIntVecLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::vector< std::int64_t > >::size_type":
        return _cstl.MapIntVecLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::vector< std::int64_t > >::iterator":
        return _cstl.MapIntVecLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecLong

# Register MapIntVecLong in _cstl:
_cstl.MapIntVecLong_swigregister(MapIntVecLong)

class MapIntSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntSetInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_set< int > >::size_type":
        return _cstl.MapIntSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_set< int > >::key_type const &") -> "std::unordered_map< int,std::unordered_set< int > >::mapped_type const &":
        return _cstl.MapIntSetInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_set< int > >::key_type const &") -> "void":
        return _cstl.MapIntSetInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_set< int > >::key_type const &") -> "bool":
        return _cstl.MapIntSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntSetInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntSetInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_set< int > >::key_type const &") -> "bool":
        return _cstl.MapIntSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntSetInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntSetInt_swiginit(self, _cstl.new_MapIntSetInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntSetInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_set< int > >::size_type":
        return _cstl.MapIntSetInt_size(self)

    def swap(self, v: "MapIntSetInt") -> "void":
        return _cstl.MapIntSetInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_set< int > >::iterator":
        return _cstl.MapIntSetInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_set< int > >::iterator":
        return _cstl.MapIntSetInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntSetInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_set< int > >::allocator_type":
        return _cstl.MapIntSetInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_set< int > >::key_type const &") -> "std::unordered_map< int,std::unordered_set< int > >::size_type":
        return _cstl.MapIntSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntSetInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_set< int > >::key_type const &") -> "std::unordered_map< int,std::unordered_set< int > >::iterator":
        return _cstl.MapIntSetInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntSetInt

# Register MapIntSetInt in _cstl:
_cstl.MapIntSetInt_swigregister(MapIntSetInt)

class MapIntSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntSetStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_set< std::string > >::size_type":
        return _cstl.MapIntSetStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_set< std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_set< std::string > >::mapped_type const &":
        return _cstl.MapIntSetStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_set< std::string > >::key_type const &") -> "void":
        return _cstl.MapIntSetStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_set< std::string > >::key_type const &") -> "bool":
        return _cstl.MapIntSetStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntSetStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntSetStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntSetStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_set< std::string > >::key_type const &") -> "bool":
        return _cstl.MapIntSetStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntSetStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntSetStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntSetStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntSetStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntSetStr_swiginit(self, _cstl.new_MapIntSetStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntSetStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_set< std::string > >::size_type":
        return _cstl.MapIntSetStr_size(self)

    def swap(self, v: "MapIntSetStr") -> "void":
        return _cstl.MapIntSetStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_set< std::string > >::iterator":
        return _cstl.MapIntSetStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_set< std::string > >::iterator":
        return _cstl.MapIntSetStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntSetStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_set< std::string > >::allocator_type":
        return _cstl.MapIntSetStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_set< std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_set< std::string > >::size_type":
        return _cstl.MapIntSetStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntSetStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_set< std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_set< std::string > >::iterator":
        return _cstl.MapIntSetStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntSetStr

# Register MapIntSetStr in _cstl:
_cstl.MapIntSetStr_swigregister(MapIntSetStr)

class MapIntSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntSetLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_set< std::int64_t > >::size_type":
        return _cstl.MapIntSetLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_set< std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_set< std::int64_t > >::mapped_type const &":
        return _cstl.MapIntSetLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_set< std::int64_t > >::key_type const &") -> "void":
        return _cstl.MapIntSetLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_set< std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapIntSetLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntSetLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntSetLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntSetLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_set< std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapIntSetLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntSetLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntSetLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntSetLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntSetLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntSetLong_swiginit(self, _cstl.new_MapIntSetLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntSetLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_set< std::int64_t > >::size_type":
        return _cstl.MapIntSetLong_size(self)

    def swap(self, v: "MapIntSetLong") -> "void":
        return _cstl.MapIntSetLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_set< std::int64_t > >::iterator":
        return _cstl.MapIntSetLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_set< std::int64_t > >::iterator":
        return _cstl.MapIntSetLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntSetLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_set< std::int64_t > >::allocator_type":
        return _cstl.MapIntSetLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_set< std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_set< std::int64_t > >::size_type":
        return _cstl.MapIntSetLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntSetLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_set< std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_set< std::int64_t > >::iterator":
        return _cstl.MapIntSetLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntSetLong

# Register MapIntSetLong in _cstl:
_cstl.MapIntSetLong_swigregister(MapIntSetLong)

class MapIntMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,int > >::size_type":
        return _cstl.MapIntMapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,int > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,int > >::mapped_type const &":
        return _cstl.MapIntMapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,int > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,int > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,int > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntInt_swiginit(self, _cstl.new_MapIntMapIntInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,int > >::size_type":
        return _cstl.MapIntMapIntInt_size(self)

    def swap(self, v: "MapIntMapIntInt") -> "void":
        return _cstl.MapIntMapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,int > >::iterator":
        return _cstl.MapIntMapIntInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,int > >::iterator":
        return _cstl.MapIntMapIntInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,int > >::allocator_type":
        return _cstl.MapIntMapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,int > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,int > >::size_type":
        return _cstl.MapIntMapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,int > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,int > >::iterator":
        return _cstl.MapIntMapIntInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntInt

# Register MapIntMapIntInt in _cstl:
_cstl.MapIntMapIntInt_swigregister(MapIntMapIntInt)

class MapIntMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::string > >::size_type":
        return _cstl.MapIntMapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::string > >::mapped_type const &":
        return _cstl.MapIntMapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::string > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::string > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::string > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntStr_swiginit(self, _cstl.new_MapIntMapIntStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::string > >::size_type":
        return _cstl.MapIntMapIntStr_size(self)

    def swap(self, v: "MapIntMapIntStr") -> "void":
        return _cstl.MapIntMapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::string > >::iterator":
        return _cstl.MapIntMapIntStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::string > >::iterator":
        return _cstl.MapIntMapIntStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::string > >::allocator_type":
        return _cstl.MapIntMapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::string > >::size_type":
        return _cstl.MapIntMapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::string > >::iterator":
        return _cstl.MapIntMapIntStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntStr

# Register MapIntMapIntStr in _cstl:
_cstl.MapIntMapIntStr_swigregister(MapIntMapIntStr)

class MapIntMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,float > >::size_type":
        return _cstl.MapIntMapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,float > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,float > >::mapped_type const &":
        return _cstl.MapIntMapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,float > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,float > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,float > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntFloat_swiginit(self, _cstl.new_MapIntMapIntFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,float > >::size_type":
        return _cstl.MapIntMapIntFloat_size(self)

    def swap(self, v: "MapIntMapIntFloat") -> "void":
        return _cstl.MapIntMapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,float > >::iterator":
        return _cstl.MapIntMapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,float > >::iterator":
        return _cstl.MapIntMapIntFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,float > >::allocator_type":
        return _cstl.MapIntMapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,float > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,float > >::size_type":
        return _cstl.MapIntMapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,float > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,float > >::iterator":
        return _cstl.MapIntMapIntFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntFloat

# Register MapIntMapIntFloat in _cstl:
_cstl.MapIntMapIntFloat_swigregister(MapIntMapIntFloat)

class MapIntMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,double > >::size_type":
        return _cstl.MapIntMapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,double > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,double > >::mapped_type const &":
        return _cstl.MapIntMapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,double > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,double > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,double > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntDouble_swiginit(self, _cstl.new_MapIntMapIntDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,double > >::size_type":
        return _cstl.MapIntMapIntDouble_size(self)

    def swap(self, v: "MapIntMapIntDouble") -> "void":
        return _cstl.MapIntMapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,double > >::iterator":
        return _cstl.MapIntMapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,double > >::iterator":
        return _cstl.MapIntMapIntDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,double > >::allocator_type":
        return _cstl.MapIntMapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,double > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,double > >::size_type":
        return _cstl.MapIntMapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,double > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,double > >::iterator":
        return _cstl.MapIntMapIntDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntDouble

# Register MapIntMapIntDouble in _cstl:
_cstl.MapIntMapIntDouble_swigregister(MapIntMapIntDouble)

class MapIntMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,bool > >::size_type":
        return _cstl.MapIntMapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,bool > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,bool > >::mapped_type const &":
        return _cstl.MapIntMapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,bool > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,bool > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,bool > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntBool_swiginit(self, _cstl.new_MapIntMapIntBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,bool > >::size_type":
        return _cstl.MapIntMapIntBool_size(self)

    def swap(self, v: "MapIntMapIntBool") -> "void":
        return _cstl.MapIntMapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,bool > >::iterator":
        return _cstl.MapIntMapIntBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,bool > >::iterator":
        return _cstl.MapIntMapIntBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,bool > >::allocator_type":
        return _cstl.MapIntMapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,bool > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,bool > >::size_type":
        return _cstl.MapIntMapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,bool > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,bool > >::iterator":
        return _cstl.MapIntMapIntBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntBool

# Register MapIntMapIntBool in _cstl:
_cstl.MapIntMapIntBool_swigregister(MapIntMapIntBool)

class MapIntMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::size_type":
        return _cstl.MapIntMapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::mapped_type const &":
        return _cstl.MapIntMapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntLong_swiginit(self, _cstl.new_MapIntMapIntLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::size_type":
        return _cstl.MapIntMapIntLong_size(self)

    def swap(self, v: "MapIntMapIntLong") -> "void":
        return _cstl.MapIntMapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::iterator":
        return _cstl.MapIntMapIntLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::iterator":
        return _cstl.MapIntMapIntLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::allocator_type":
        return _cstl.MapIntMapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::size_type":
        return _cstl.MapIntMapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::int64_t > >::iterator":
        return _cstl.MapIntMapIntLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntLong

# Register MapIntMapIntLong in _cstl:
_cstl.MapIntMapIntLong_swigregister(MapIntMapIntLong)

class MapIntMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,int > >::size_type":
        return _cstl.MapIntMapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,int > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,int > >::mapped_type const &":
        return _cstl.MapIntMapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,int > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,int > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,int > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrInt_swiginit(self, _cstl.new_MapIntMapStrInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,int > >::size_type":
        return _cstl.MapIntMapStrInt_size(self)

    def swap(self, v: "MapIntMapStrInt") -> "void":
        return _cstl.MapIntMapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,int > >::iterator":
        return _cstl.MapIntMapStrInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,int > >::iterator":
        return _cstl.MapIntMapStrInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,int > >::allocator_type":
        return _cstl.MapIntMapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,int > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,int > >::size_type":
        return _cstl.MapIntMapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,int > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,int > >::iterator":
        return _cstl.MapIntMapStrInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrInt

# Register MapIntMapStrInt in _cstl:
_cstl.MapIntMapStrInt_swigregister(MapIntMapStrInt)

class MapIntMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::string > >::size_type":
        return _cstl.MapIntMapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::string > >::mapped_type const &":
        return _cstl.MapIntMapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::string > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::string > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::string > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrStr_swiginit(self, _cstl.new_MapIntMapStrStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::string > >::size_type":
        return _cstl.MapIntMapStrStr_size(self)

    def swap(self, v: "MapIntMapStrStr") -> "void":
        return _cstl.MapIntMapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::string > >::iterator":
        return _cstl.MapIntMapStrStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::string > >::iterator":
        return _cstl.MapIntMapStrStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::string > >::allocator_type":
        return _cstl.MapIntMapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::string > >::size_type":
        return _cstl.MapIntMapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::string > >::iterator":
        return _cstl.MapIntMapStrStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrStr

# Register MapIntMapStrStr in _cstl:
_cstl.MapIntMapStrStr_swigregister(MapIntMapStrStr)

class MapIntMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,float > >::size_type":
        return _cstl.MapIntMapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,float > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,float > >::mapped_type const &":
        return _cstl.MapIntMapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,float > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,float > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,float > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrFloat_swiginit(self, _cstl.new_MapIntMapStrFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,float > >::size_type":
        return _cstl.MapIntMapStrFloat_size(self)

    def swap(self, v: "MapIntMapStrFloat") -> "void":
        return _cstl.MapIntMapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,float > >::iterator":
        return _cstl.MapIntMapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,float > >::iterator":
        return _cstl.MapIntMapStrFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,float > >::allocator_type":
        return _cstl.MapIntMapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,float > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,float > >::size_type":
        return _cstl.MapIntMapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,float > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,float > >::iterator":
        return _cstl.MapIntMapStrFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrFloat

# Register MapIntMapStrFloat in _cstl:
_cstl.MapIntMapStrFloat_swigregister(MapIntMapStrFloat)

class MapIntMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,double > >::size_type":
        return _cstl.MapIntMapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,double > >::mapped_type const &":
        return _cstl.MapIntMapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,double > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,double > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,double > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrDouble_swiginit(self, _cstl.new_MapIntMapStrDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,double > >::size_type":
        return _cstl.MapIntMapStrDouble_size(self)

    def swap(self, v: "MapIntMapStrDouble") -> "void":
        return _cstl.MapIntMapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,double > >::iterator":
        return _cstl.MapIntMapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,double > >::iterator":
        return _cstl.MapIntMapStrDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,double > >::allocator_type":
        return _cstl.MapIntMapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,double > >::size_type":
        return _cstl.MapIntMapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,double > >::iterator":
        return _cstl.MapIntMapStrDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrDouble

# Register MapIntMapStrDouble in _cstl:
_cstl.MapIntMapStrDouble_swigregister(MapIntMapStrDouble)

class MapIntMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,bool > >::size_type":
        return _cstl.MapIntMapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,bool > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,bool > >::mapped_type const &":
        return _cstl.MapIntMapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,bool > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,bool > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,bool > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrBool_swiginit(self, _cstl.new_MapIntMapStrBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,bool > >::size_type":
        return _cstl.MapIntMapStrBool_size(self)

    def swap(self, v: "MapIntMapStrBool") -> "void":
        return _cstl.MapIntMapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,bool > >::iterator":
        return _cstl.MapIntMapStrBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,bool > >::iterator":
        return _cstl.MapIntMapStrBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,bool > >::allocator_type":
        return _cstl.MapIntMapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,bool > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,bool > >::size_type":
        return _cstl.MapIntMapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,bool > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,bool > >::iterator":
        return _cstl.MapIntMapStrBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrBool

# Register MapIntMapStrBool in _cstl:
_cstl.MapIntMapStrBool_swigregister(MapIntMapStrBool)

class MapIntMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::size_type":
        return _cstl.MapIntMapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::mapped_type const &":
        return _cstl.MapIntMapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrLong_swiginit(self, _cstl.new_MapIntMapStrLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::size_type":
        return _cstl.MapIntMapStrLong_size(self)

    def swap(self, v: "MapIntMapStrLong") -> "void":
        return _cstl.MapIntMapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::iterator":
        return _cstl.MapIntMapStrLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::iterator":
        return _cstl.MapIntMapStrLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::allocator_type":
        return _cstl.MapIntMapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::size_type":
        return _cstl.MapIntMapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::int64_t > >::iterator":
        return _cstl.MapIntMapStrLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrLong

# Register MapIntMapStrLong in _cstl:
_cstl.MapIntMapStrLong_swigregister(MapIntMapStrLong)

class MapIntMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::size_type":
        return _cstl.MapIntMapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::mapped_type const &":
        return _cstl.MapIntMapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongInt_swiginit(self, _cstl.new_MapIntMapLongInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::size_type":
        return _cstl.MapIntMapLongInt_size(self)

    def swap(self, v: "MapIntMapLongInt") -> "void":
        return _cstl.MapIntMapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::iterator":
        return _cstl.MapIntMapLongInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::iterator":
        return _cstl.MapIntMapLongInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::allocator_type":
        return _cstl.MapIntMapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::size_type":
        return _cstl.MapIntMapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,int > >::iterator":
        return _cstl.MapIntMapLongInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongInt

# Register MapIntMapLongInt in _cstl:
_cstl.MapIntMapLongInt_swigregister(MapIntMapLongInt)

class MapIntMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::size_type":
        return _cstl.MapIntMapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::mapped_type const &":
        return _cstl.MapIntMapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongStr_swiginit(self, _cstl.new_MapIntMapLongStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::size_type":
        return _cstl.MapIntMapLongStr_size(self)

    def swap(self, v: "MapIntMapLongStr") -> "void":
        return _cstl.MapIntMapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::iterator":
        return _cstl.MapIntMapLongStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::iterator":
        return _cstl.MapIntMapLongStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::allocator_type":
        return _cstl.MapIntMapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::size_type":
        return _cstl.MapIntMapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::string > >::iterator":
        return _cstl.MapIntMapLongStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongStr

# Register MapIntMapLongStr in _cstl:
_cstl.MapIntMapLongStr_swigregister(MapIntMapLongStr)

class MapIntMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::size_type":
        return _cstl.MapIntMapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::mapped_type const &":
        return _cstl.MapIntMapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongFloat_swiginit(self, _cstl.new_MapIntMapLongFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::size_type":
        return _cstl.MapIntMapLongFloat_size(self)

    def swap(self, v: "MapIntMapLongFloat") -> "void":
        return _cstl.MapIntMapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::iterator":
        return _cstl.MapIntMapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::iterator":
        return _cstl.MapIntMapLongFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::allocator_type":
        return _cstl.MapIntMapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::size_type":
        return _cstl.MapIntMapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,float > >::iterator":
        return _cstl.MapIntMapLongFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongFloat

# Register MapIntMapLongFloat in _cstl:
_cstl.MapIntMapLongFloat_swigregister(MapIntMapLongFloat)

class MapIntMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::size_type":
        return _cstl.MapIntMapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::mapped_type const &":
        return _cstl.MapIntMapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongDouble_swiginit(self, _cstl.new_MapIntMapLongDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::size_type":
        return _cstl.MapIntMapLongDouble_size(self)

    def swap(self, v: "MapIntMapLongDouble") -> "void":
        return _cstl.MapIntMapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::iterator":
        return _cstl.MapIntMapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::iterator":
        return _cstl.MapIntMapLongDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::allocator_type":
        return _cstl.MapIntMapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::size_type":
        return _cstl.MapIntMapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,double > >::iterator":
        return _cstl.MapIntMapLongDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongDouble

# Register MapIntMapLongDouble in _cstl:
_cstl.MapIntMapLongDouble_swigregister(MapIntMapLongDouble)

class MapIntMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::size_type":
        return _cstl.MapIntMapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::mapped_type const &":
        return _cstl.MapIntMapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongBool_swiginit(self, _cstl.new_MapIntMapLongBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::size_type":
        return _cstl.MapIntMapLongBool_size(self)

    def swap(self, v: "MapIntMapLongBool") -> "void":
        return _cstl.MapIntMapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::iterator":
        return _cstl.MapIntMapLongBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::iterator":
        return _cstl.MapIntMapLongBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::allocator_type":
        return _cstl.MapIntMapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::size_type":
        return _cstl.MapIntMapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,bool > >::iterator":
        return _cstl.MapIntMapLongBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongBool

# Register MapIntMapLongBool in _cstl:
_cstl.MapIntMapLongBool_swigregister(MapIntMapLongBool)

class MapIntMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _cstl.MapIntMapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::mapped_type const &":
        return _cstl.MapIntMapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongLong_swiginit(self, _cstl.new_MapIntMapLongLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _cstl.MapIntMapLongLong_size(self)

    def swap(self, v: "MapIntMapLongLong") -> "void":
        return _cstl.MapIntMapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _cstl.MapIntMapLongLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _cstl.MapIntMapLongLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::allocator_type":
        return _cstl.MapIntMapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _cstl.MapIntMapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _cstl.MapIntMapLongLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongLong

# Register MapIntMapLongLong in _cstl:
_cstl.MapIntMapLongLong_swigregister(MapIntMapLongLong)

class MapStrVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< int > >::size_type":
        return _cstl.MapStrVecInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< int > >::key_type const &") -> "std::unordered_map< std::string,std::vector< int > >::mapped_type const &":
        return _cstl.MapStrVecInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< int > >::key_type const &") -> "void":
        return _cstl.MapStrVecInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< int > >::key_type const &") -> "bool":
        return _cstl.MapStrVecInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< int > >::key_type const &") -> "bool":
        return _cstl.MapStrVecInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecInt_swiginit(self, _cstl.new_MapStrVecInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< int > >::size_type":
        return _cstl.MapStrVecInt_size(self)

    def swap(self, v: "MapStrVecInt") -> "void":
        return _cstl.MapStrVecInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< int > >::iterator":
        return _cstl.MapStrVecInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< int > >::iterator":
        return _cstl.MapStrVecInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< int > >::allocator_type":
        return _cstl.MapStrVecInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< int > >::key_type const &") -> "std::unordered_map< std::string,std::vector< int > >::size_type":
        return _cstl.MapStrVecInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< int > >::key_type const &") -> "std::unordered_map< std::string,std::vector< int > >::iterator":
        return _cstl.MapStrVecInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecInt

# Register MapStrVecInt in _cstl:
_cstl.MapStrVecInt_swigregister(MapStrVecInt)

class MapStrVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::string > >::size_type":
        return _cstl.MapStrVecStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::string > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::string > >::mapped_type const &":
        return _cstl.MapStrVecStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::string > >::key_type const &") -> "void":
        return _cstl.MapStrVecStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::string > >::key_type const &") -> "bool":
        return _cstl.MapStrVecStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::string > >::key_type const &") -> "bool":
        return _cstl.MapStrVecStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecStr_swiginit(self, _cstl.new_MapStrVecStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::string > >::size_type":
        return _cstl.MapStrVecStr_size(self)

    def swap(self, v: "MapStrVecStr") -> "void":
        return _cstl.MapStrVecStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::string > >::iterator":
        return _cstl.MapStrVecStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::string > >::iterator":
        return _cstl.MapStrVecStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::string > >::allocator_type":
        return _cstl.MapStrVecStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::string > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::string > >::size_type":
        return _cstl.MapStrVecStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::string > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::string > >::iterator":
        return _cstl.MapStrVecStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecStr

# Register MapStrVecStr in _cstl:
_cstl.MapStrVecStr_swigregister(MapStrVecStr)

class MapStrVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< float > >::size_type":
        return _cstl.MapStrVecFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< float > >::key_type const &") -> "std::unordered_map< std::string,std::vector< float > >::mapped_type const &":
        return _cstl.MapStrVecFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< float > >::key_type const &") -> "void":
        return _cstl.MapStrVecFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< float > >::key_type const &") -> "bool":
        return _cstl.MapStrVecFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< float > >::key_type const &") -> "bool":
        return _cstl.MapStrVecFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecFloat_swiginit(self, _cstl.new_MapStrVecFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< float > >::size_type":
        return _cstl.MapStrVecFloat_size(self)

    def swap(self, v: "MapStrVecFloat") -> "void":
        return _cstl.MapStrVecFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< float > >::iterator":
        return _cstl.MapStrVecFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< float > >::iterator":
        return _cstl.MapStrVecFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< float > >::allocator_type":
        return _cstl.MapStrVecFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< float > >::key_type const &") -> "std::unordered_map< std::string,std::vector< float > >::size_type":
        return _cstl.MapStrVecFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< float > >::key_type const &") -> "std::unordered_map< std::string,std::vector< float > >::iterator":
        return _cstl.MapStrVecFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecFloat

# Register MapStrVecFloat in _cstl:
_cstl.MapStrVecFloat_swigregister(MapStrVecFloat)

class MapStrVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< double > >::size_type":
        return _cstl.MapStrVecDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< double > >::key_type const &") -> "std::unordered_map< std::string,std::vector< double > >::mapped_type const &":
        return _cstl.MapStrVecDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< double > >::key_type const &") -> "void":
        return _cstl.MapStrVecDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< double > >::key_type const &") -> "bool":
        return _cstl.MapStrVecDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< double > >::key_type const &") -> "bool":
        return _cstl.MapStrVecDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecDouble_swiginit(self, _cstl.new_MapStrVecDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< double > >::size_type":
        return _cstl.MapStrVecDouble_size(self)

    def swap(self, v: "MapStrVecDouble") -> "void":
        return _cstl.MapStrVecDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< double > >::iterator":
        return _cstl.MapStrVecDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< double > >::iterator":
        return _cstl.MapStrVecDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< double > >::allocator_type":
        return _cstl.MapStrVecDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< double > >::key_type const &") -> "std::unordered_map< std::string,std::vector< double > >::size_type":
        return _cstl.MapStrVecDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< double > >::key_type const &") -> "std::unordered_map< std::string,std::vector< double > >::iterator":
        return _cstl.MapStrVecDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecDouble

# Register MapStrVecDouble in _cstl:
_cstl.MapStrVecDouble_swigregister(MapStrVecDouble)

class MapStrVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< bool > >::size_type":
        return _cstl.MapStrVecBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< bool > >::key_type const &") -> "std::unordered_map< std::string,std::vector< bool > >::mapped_type const &":
        return _cstl.MapStrVecBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< bool > >::key_type const &") -> "void":
        return _cstl.MapStrVecBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< bool > >::key_type const &") -> "bool":
        return _cstl.MapStrVecBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< bool > >::key_type const &") -> "bool":
        return _cstl.MapStrVecBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecBool_swiginit(self, _cstl.new_MapStrVecBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< bool > >::size_type":
        return _cstl.MapStrVecBool_size(self)

    def swap(self, v: "MapStrVecBool") -> "void":
        return _cstl.MapStrVecBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< bool > >::iterator":
        return _cstl.MapStrVecBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< bool > >::iterator":
        return _cstl.MapStrVecBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< bool > >::allocator_type":
        return _cstl.MapStrVecBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< bool > >::key_type const &") -> "std::unordered_map< std::string,std::vector< bool > >::size_type":
        return _cstl.MapStrVecBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< bool > >::key_type const &") -> "std::unordered_map< std::string,std::vector< bool > >::iterator":
        return _cstl.MapStrVecBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecBool

# Register MapStrVecBool in _cstl:
_cstl.MapStrVecBool_swigregister(MapStrVecBool)

class MapStrVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::int64_t > >::size_type":
        return _cstl.MapStrVecLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::int64_t > >::mapped_type const &":
        return _cstl.MapStrVecLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::int64_t > >::key_type const &") -> "void":
        return _cstl.MapStrVecLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapStrVecLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapStrVecLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecLong_swiginit(self, _cstl.new_MapStrVecLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::int64_t > >::size_type":
        return _cstl.MapStrVecLong_size(self)

    def swap(self, v: "MapStrVecLong") -> "void":
        return _cstl.MapStrVecLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::int64_t > >::iterator":
        return _cstl.MapStrVecLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::int64_t > >::iterator":
        return _cstl.MapStrVecLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::int64_t > >::allocator_type":
        return _cstl.MapStrVecLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::int64_t > >::size_type":
        return _cstl.MapStrVecLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::int64_t > >::iterator":
        return _cstl.MapStrVecLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecLong

# Register MapStrVecLong in _cstl:
_cstl.MapStrVecLong_swigregister(MapStrVecLong)

class MapStrSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrSetInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_set< int > >::size_type":
        return _cstl.MapStrSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_set< int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_set< int > >::mapped_type const &":
        return _cstl.MapStrSetInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_set< int > >::key_type const &") -> "void":
        return _cstl.MapStrSetInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_set< int > >::key_type const &") -> "bool":
        return _cstl.MapStrSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrSetInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrSetInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_set< int > >::key_type const &") -> "bool":
        return _cstl.MapStrSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrSetInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrSetInt_swiginit(self, _cstl.new_MapStrSetInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrSetInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_set< int > >::size_type":
        return _cstl.MapStrSetInt_size(self)

    def swap(self, v: "MapStrSetInt") -> "void":
        return _cstl.MapStrSetInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_set< int > >::iterator":
        return _cstl.MapStrSetInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_set< int > >::iterator":
        return _cstl.MapStrSetInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrSetInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_set< int > >::allocator_type":
        return _cstl.MapStrSetInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_set< int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_set< int > >::size_type":
        return _cstl.MapStrSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrSetInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_set< int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_set< int > >::iterator":
        return _cstl.MapStrSetInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrSetInt

# Register MapStrSetInt in _cstl:
_cstl.MapStrSetInt_swigregister(MapStrSetInt)

class MapStrSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrSetStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_set< std::string > >::size_type":
        return _cstl.MapStrSetStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_set< std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_set< std::string > >::mapped_type const &":
        return _cstl.MapStrSetStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_set< std::string > >::key_type const &") -> "void":
        return _cstl.MapStrSetStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_set< std::string > >::key_type const &") -> "bool":
        return _cstl.MapStrSetStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrSetStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrSetStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrSetStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_set< std::string > >::key_type const &") -> "bool":
        return _cstl.MapStrSetStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrSetStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrSetStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrSetStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrSetStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrSetStr_swiginit(self, _cstl.new_MapStrSetStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrSetStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_set< std::string > >::size_type":
        return _cstl.MapStrSetStr_size(self)

    def swap(self, v: "MapStrSetStr") -> "void":
        return _cstl.MapStrSetStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_set< std::string > >::iterator":
        return _cstl.MapStrSetStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_set< std::string > >::iterator":
        return _cstl.MapStrSetStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrSetStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_set< std::string > >::allocator_type":
        return _cstl.MapStrSetStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_set< std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_set< std::string > >::size_type":
        return _cstl.MapStrSetStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrSetStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_set< std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_set< std::string > >::iterator":
        return _cstl.MapStrSetStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrSetStr

# Register MapStrSetStr in _cstl:
_cstl.MapStrSetStr_swigregister(MapStrSetStr)

class MapStrSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrSetLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::size_type":
        return _cstl.MapStrSetLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::mapped_type const &":
        return _cstl.MapStrSetLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::key_type const &") -> "void":
        return _cstl.MapStrSetLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapStrSetLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrSetLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrSetLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrSetLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapStrSetLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrSetLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrSetLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrSetLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrSetLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrSetLong_swiginit(self, _cstl.new_MapStrSetLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrSetLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::size_type":
        return _cstl.MapStrSetLong_size(self)

    def swap(self, v: "MapStrSetLong") -> "void":
        return _cstl.MapStrSetLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::iterator":
        return _cstl.MapStrSetLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::iterator":
        return _cstl.MapStrSetLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrSetLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::allocator_type":
        return _cstl.MapStrSetLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::size_type":
        return _cstl.MapStrSetLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrSetLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_set< std::int64_t > >::iterator":
        return _cstl.MapStrSetLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrSetLong

# Register MapStrSetLong in _cstl:
_cstl.MapStrSetLong_swigregister(MapStrSetLong)

class MapStrMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,int > >::size_type":
        return _cstl.MapStrMapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,int > >::mapped_type const &":
        return _cstl.MapStrMapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,int > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,int > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,int > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntInt_swiginit(self, _cstl.new_MapStrMapIntInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,int > >::size_type":
        return _cstl.MapStrMapIntInt_size(self)

    def swap(self, v: "MapStrMapIntInt") -> "void":
        return _cstl.MapStrMapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,int > >::iterator":
        return _cstl.MapStrMapIntInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,int > >::iterator":
        return _cstl.MapStrMapIntInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,int > >::allocator_type":
        return _cstl.MapStrMapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,int > >::size_type":
        return _cstl.MapStrMapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,int > >::iterator":
        return _cstl.MapStrMapIntInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntInt

# Register MapStrMapIntInt in _cstl:
_cstl.MapStrMapIntInt_swigregister(MapStrMapIntInt)

class MapStrMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::string > >::size_type":
        return _cstl.MapStrMapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::string > >::mapped_type const &":
        return _cstl.MapStrMapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::string > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::string > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::string > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntStr_swiginit(self, _cstl.new_MapStrMapIntStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::string > >::size_type":
        return _cstl.MapStrMapIntStr_size(self)

    def swap(self, v: "MapStrMapIntStr") -> "void":
        return _cstl.MapStrMapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::string > >::iterator":
        return _cstl.MapStrMapIntStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::string > >::iterator":
        return _cstl.MapStrMapIntStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::string > >::allocator_type":
        return _cstl.MapStrMapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::string > >::size_type":
        return _cstl.MapStrMapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::string > >::iterator":
        return _cstl.MapStrMapIntStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntStr

# Register MapStrMapIntStr in _cstl:
_cstl.MapStrMapIntStr_swigregister(MapStrMapIntStr)

class MapStrMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,float > >::size_type":
        return _cstl.MapStrMapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,float > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,float > >::mapped_type const &":
        return _cstl.MapStrMapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,float > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,float > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,float > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntFloat_swiginit(self, _cstl.new_MapStrMapIntFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,float > >::size_type":
        return _cstl.MapStrMapIntFloat_size(self)

    def swap(self, v: "MapStrMapIntFloat") -> "void":
        return _cstl.MapStrMapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,float > >::iterator":
        return _cstl.MapStrMapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,float > >::iterator":
        return _cstl.MapStrMapIntFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,float > >::allocator_type":
        return _cstl.MapStrMapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,float > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,float > >::size_type":
        return _cstl.MapStrMapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,float > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,float > >::iterator":
        return _cstl.MapStrMapIntFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntFloat

# Register MapStrMapIntFloat in _cstl:
_cstl.MapStrMapIntFloat_swigregister(MapStrMapIntFloat)

class MapStrMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,double > >::size_type":
        return _cstl.MapStrMapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,double > >::mapped_type const &":
        return _cstl.MapStrMapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,double > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,double > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,double > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntDouble_swiginit(self, _cstl.new_MapStrMapIntDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,double > >::size_type":
        return _cstl.MapStrMapIntDouble_size(self)

    def swap(self, v: "MapStrMapIntDouble") -> "void":
        return _cstl.MapStrMapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,double > >::iterator":
        return _cstl.MapStrMapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,double > >::iterator":
        return _cstl.MapStrMapIntDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,double > >::allocator_type":
        return _cstl.MapStrMapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,double > >::size_type":
        return _cstl.MapStrMapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,double > >::iterator":
        return _cstl.MapStrMapIntDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntDouble

# Register MapStrMapIntDouble in _cstl:
_cstl.MapStrMapIntDouble_swigregister(MapStrMapIntDouble)

class MapStrMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,bool > >::size_type":
        return _cstl.MapStrMapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,bool > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,bool > >::mapped_type const &":
        return _cstl.MapStrMapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,bool > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,bool > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,bool > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntBool_swiginit(self, _cstl.new_MapStrMapIntBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,bool > >::size_type":
        return _cstl.MapStrMapIntBool_size(self)

    def swap(self, v: "MapStrMapIntBool") -> "void":
        return _cstl.MapStrMapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,bool > >::iterator":
        return _cstl.MapStrMapIntBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,bool > >::iterator":
        return _cstl.MapStrMapIntBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,bool > >::allocator_type":
        return _cstl.MapStrMapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,bool > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,bool > >::size_type":
        return _cstl.MapStrMapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,bool > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,bool > >::iterator":
        return _cstl.MapStrMapIntBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntBool

# Register MapStrMapIntBool in _cstl:
_cstl.MapStrMapIntBool_swigregister(MapStrMapIntBool)

class MapStrMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::size_type":
        return _cstl.MapStrMapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::mapped_type const &":
        return _cstl.MapStrMapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntLong_swiginit(self, _cstl.new_MapStrMapIntLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::size_type":
        return _cstl.MapStrMapIntLong_size(self)

    def swap(self, v: "MapStrMapIntLong") -> "void":
        return _cstl.MapStrMapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::iterator":
        return _cstl.MapStrMapIntLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::iterator":
        return _cstl.MapStrMapIntLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::allocator_type":
        return _cstl.MapStrMapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::size_type":
        return _cstl.MapStrMapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::int64_t > >::iterator":
        return _cstl.MapStrMapIntLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntLong

# Register MapStrMapIntLong in _cstl:
_cstl.MapStrMapIntLong_swigregister(MapStrMapIntLong)

class MapStrMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,int > >::size_type":
        return _cstl.MapStrMapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,int > >::mapped_type const &":
        return _cstl.MapStrMapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,int > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,int > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,int > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrInt_swiginit(self, _cstl.new_MapStrMapStrInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,int > >::size_type":
        return _cstl.MapStrMapStrInt_size(self)

    def swap(self, v: "MapStrMapStrInt") -> "void":
        return _cstl.MapStrMapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,int > >::iterator":
        return _cstl.MapStrMapStrInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,int > >::iterator":
        return _cstl.MapStrMapStrInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,int > >::allocator_type":
        return _cstl.MapStrMapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,int > >::size_type":
        return _cstl.MapStrMapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,int > >::iterator":
        return _cstl.MapStrMapStrInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrInt

# Register MapStrMapStrInt in _cstl:
_cstl.MapStrMapStrInt_swigregister(MapStrMapStrInt)

class MapStrMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::size_type":
        return _cstl.MapStrMapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::mapped_type const &":
        return _cstl.MapStrMapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrStr_swiginit(self, _cstl.new_MapStrMapStrStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::size_type":
        return _cstl.MapStrMapStrStr_size(self)

    def swap(self, v: "MapStrMapStrStr") -> "void":
        return _cstl.MapStrMapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::iterator":
        return _cstl.MapStrMapStrStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::iterator":
        return _cstl.MapStrMapStrStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::allocator_type":
        return _cstl.MapStrMapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::size_type":
        return _cstl.MapStrMapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::string > >::iterator":
        return _cstl.MapStrMapStrStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrStr

# Register MapStrMapStrStr in _cstl:
_cstl.MapStrMapStrStr_swigregister(MapStrMapStrStr)

class MapStrMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,float > >::size_type":
        return _cstl.MapStrMapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,float > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,float > >::mapped_type const &":
        return _cstl.MapStrMapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,float > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,float > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,float > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrFloat_swiginit(self, _cstl.new_MapStrMapStrFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,float > >::size_type":
        return _cstl.MapStrMapStrFloat_size(self)

    def swap(self, v: "MapStrMapStrFloat") -> "void":
        return _cstl.MapStrMapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,float > >::iterator":
        return _cstl.MapStrMapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,float > >::iterator":
        return _cstl.MapStrMapStrFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,float > >::allocator_type":
        return _cstl.MapStrMapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,float > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,float > >::size_type":
        return _cstl.MapStrMapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,float > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,float > >::iterator":
        return _cstl.MapStrMapStrFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrFloat

# Register MapStrMapStrFloat in _cstl:
_cstl.MapStrMapStrFloat_swigregister(MapStrMapStrFloat)

class MapStrMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::size_type":
        return _cstl.MapStrMapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::mapped_type const &":
        return _cstl.MapStrMapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,double > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,double > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,double > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrDouble_swiginit(self, _cstl.new_MapStrMapStrDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::size_type":
        return _cstl.MapStrMapStrDouble_size(self)

    def swap(self, v: "MapStrMapStrDouble") -> "void":
        return _cstl.MapStrMapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::iterator":
        return _cstl.MapStrMapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::iterator":
        return _cstl.MapStrMapStrDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::allocator_type":
        return _cstl.MapStrMapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::size_type":
        return _cstl.MapStrMapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::iterator":
        return _cstl.MapStrMapStrDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrDouble

# Register MapStrMapStrDouble in _cstl:
_cstl.MapStrMapStrDouble_swigregister(MapStrMapStrDouble)

class MapStrMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::size_type":
        return _cstl.MapStrMapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::mapped_type const &":
        return _cstl.MapStrMapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrBool_swiginit(self, _cstl.new_MapStrMapStrBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::size_type":
        return _cstl.MapStrMapStrBool_size(self)

    def swap(self, v: "MapStrMapStrBool") -> "void":
        return _cstl.MapStrMapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::iterator":
        return _cstl.MapStrMapStrBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::iterator":
        return _cstl.MapStrMapStrBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::allocator_type":
        return _cstl.MapStrMapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::size_type":
        return _cstl.MapStrMapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,bool > >::iterator":
        return _cstl.MapStrMapStrBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrBool

# Register MapStrMapStrBool in _cstl:
_cstl.MapStrMapStrBool_swigregister(MapStrMapStrBool)

class MapStrMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::size_type":
        return _cstl.MapStrMapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::mapped_type const &":
        return _cstl.MapStrMapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrLong_swiginit(self, _cstl.new_MapStrMapStrLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::size_type":
        return _cstl.MapStrMapStrLong_size(self)

    def swap(self, v: "MapStrMapStrLong") -> "void":
        return _cstl.MapStrMapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::iterator":
        return _cstl.MapStrMapStrLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::iterator":
        return _cstl.MapStrMapStrLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::allocator_type":
        return _cstl.MapStrMapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::size_type":
        return _cstl.MapStrMapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > >::iterator":
        return _cstl.MapStrMapStrLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrLong

# Register MapStrMapStrLong in _cstl:
_cstl.MapStrMapStrLong_swigregister(MapStrMapStrLong)

class MapStrMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::size_type":
        return _cstl.MapStrMapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::mapped_type const &":
        return _cstl.MapStrMapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongInt_swiginit(self, _cstl.new_MapStrMapLongInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::size_type":
        return _cstl.MapStrMapLongInt_size(self)

    def swap(self, v: "MapStrMapLongInt") -> "void":
        return _cstl.MapStrMapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::iterator":
        return _cstl.MapStrMapLongInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::iterator":
        return _cstl.MapStrMapLongInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::allocator_type":
        return _cstl.MapStrMapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::size_type":
        return _cstl.MapStrMapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,int > >::iterator":
        return _cstl.MapStrMapLongInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongInt

# Register MapStrMapLongInt in _cstl:
_cstl.MapStrMapLongInt_swigregister(MapStrMapLongInt)

class MapStrMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::size_type":
        return _cstl.MapStrMapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::mapped_type const &":
        return _cstl.MapStrMapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongStr_swiginit(self, _cstl.new_MapStrMapLongStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::size_type":
        return _cstl.MapStrMapLongStr_size(self)

    def swap(self, v: "MapStrMapLongStr") -> "void":
        return _cstl.MapStrMapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::iterator":
        return _cstl.MapStrMapLongStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::iterator":
        return _cstl.MapStrMapLongStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::allocator_type":
        return _cstl.MapStrMapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::size_type":
        return _cstl.MapStrMapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > >::iterator":
        return _cstl.MapStrMapLongStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongStr

# Register MapStrMapLongStr in _cstl:
_cstl.MapStrMapLongStr_swigregister(MapStrMapLongStr)

class MapStrMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::size_type":
        return _cstl.MapStrMapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::mapped_type const &":
        return _cstl.MapStrMapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongFloat_swiginit(self, _cstl.new_MapStrMapLongFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::size_type":
        return _cstl.MapStrMapLongFloat_size(self)

    def swap(self, v: "MapStrMapLongFloat") -> "void":
        return _cstl.MapStrMapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::iterator":
        return _cstl.MapStrMapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::iterator":
        return _cstl.MapStrMapLongFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::allocator_type":
        return _cstl.MapStrMapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::size_type":
        return _cstl.MapStrMapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,float > >::iterator":
        return _cstl.MapStrMapLongFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongFloat

# Register MapStrMapLongFloat in _cstl:
_cstl.MapStrMapLongFloat_swigregister(MapStrMapLongFloat)

class MapStrMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::size_type":
        return _cstl.MapStrMapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::mapped_type const &":
        return _cstl.MapStrMapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongDouble_swiginit(self, _cstl.new_MapStrMapLongDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::size_type":
        return _cstl.MapStrMapLongDouble_size(self)

    def swap(self, v: "MapStrMapLongDouble") -> "void":
        return _cstl.MapStrMapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::iterator":
        return _cstl.MapStrMapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::iterator":
        return _cstl.MapStrMapLongDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::allocator_type":
        return _cstl.MapStrMapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::size_type":
        return _cstl.MapStrMapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,double > >::iterator":
        return _cstl.MapStrMapLongDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongDouble

# Register MapStrMapLongDouble in _cstl:
_cstl.MapStrMapLongDouble_swigregister(MapStrMapLongDouble)

class MapStrMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::size_type":
        return _cstl.MapStrMapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::mapped_type const &":
        return _cstl.MapStrMapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongBool_swiginit(self, _cstl.new_MapStrMapLongBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::size_type":
        return _cstl.MapStrMapLongBool_size(self)

    def swap(self, v: "MapStrMapLongBool") -> "void":
        return _cstl.MapStrMapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::iterator":
        return _cstl.MapStrMapLongBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::iterator":
        return _cstl.MapStrMapLongBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::allocator_type":
        return _cstl.MapStrMapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::size_type":
        return _cstl.MapStrMapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > >::iterator":
        return _cstl.MapStrMapLongBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongBool

# Register MapStrMapLongBool in _cstl:
_cstl.MapStrMapLongBool_swigregister(MapStrMapLongBool)

class MapStrMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _cstl.MapStrMapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::mapped_type const &":
        return _cstl.MapStrMapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongLong_swiginit(self, _cstl.new_MapStrMapLongLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _cstl.MapStrMapLongLong_size(self)

    def swap(self, v: "MapStrMapLongLong") -> "void":
        return _cstl.MapStrMapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _cstl.MapStrMapLongLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _cstl.MapStrMapLongLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::allocator_type":
        return _cstl.MapStrMapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _cstl.MapStrMapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _cstl.MapStrMapLongLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongLong

# Register MapStrMapLongLong in _cstl:
_cstl.MapStrMapLongLong_swigregister(MapStrMapLongLong)

class MapLongVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< int > >::size_type":
        return _cstl.MapLongVecInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< int > >::mapped_type const &":
        return _cstl.MapLongVecInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< int > >::key_type const &") -> "void":
        return _cstl.MapLongVecInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< int > >::key_type const &") -> "bool":
        return _cstl.MapLongVecInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< int > >::key_type const &") -> "bool":
        return _cstl.MapLongVecInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecInt_swiginit(self, _cstl.new_MapLongVecInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< int > >::size_type":
        return _cstl.MapLongVecInt_size(self)

    def swap(self, v: "MapLongVecInt") -> "void":
        return _cstl.MapLongVecInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< int > >::iterator":
        return _cstl.MapLongVecInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< int > >::iterator":
        return _cstl.MapLongVecInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< int > >::allocator_type":
        return _cstl.MapLongVecInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< int > >::size_type":
        return _cstl.MapLongVecInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< int > >::iterator":
        return _cstl.MapLongVecInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecInt

# Register MapLongVecInt in _cstl:
_cstl.MapLongVecInt_swigregister(MapLongVecInt)

class MapLongVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::string > >::size_type":
        return _cstl.MapLongVecStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::string > >::mapped_type const &":
        return _cstl.MapLongVecStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::string > >::key_type const &") -> "void":
        return _cstl.MapLongVecStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::string > >::key_type const &") -> "bool":
        return _cstl.MapLongVecStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::string > >::key_type const &") -> "bool":
        return _cstl.MapLongVecStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecStr_swiginit(self, _cstl.new_MapLongVecStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::string > >::size_type":
        return _cstl.MapLongVecStr_size(self)

    def swap(self, v: "MapLongVecStr") -> "void":
        return _cstl.MapLongVecStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::string > >::iterator":
        return _cstl.MapLongVecStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::string > >::iterator":
        return _cstl.MapLongVecStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::string > >::allocator_type":
        return _cstl.MapLongVecStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::string > >::size_type":
        return _cstl.MapLongVecStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::string > >::iterator":
        return _cstl.MapLongVecStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecStr

# Register MapLongVecStr in _cstl:
_cstl.MapLongVecStr_swigregister(MapLongVecStr)

class MapLongVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< float > >::size_type":
        return _cstl.MapLongVecFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< float > >::mapped_type const &":
        return _cstl.MapLongVecFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< float > >::key_type const &") -> "void":
        return _cstl.MapLongVecFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< float > >::key_type const &") -> "bool":
        return _cstl.MapLongVecFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< float > >::key_type const &") -> "bool":
        return _cstl.MapLongVecFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecFloat_swiginit(self, _cstl.new_MapLongVecFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< float > >::size_type":
        return _cstl.MapLongVecFloat_size(self)

    def swap(self, v: "MapLongVecFloat") -> "void":
        return _cstl.MapLongVecFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< float > >::iterator":
        return _cstl.MapLongVecFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< float > >::iterator":
        return _cstl.MapLongVecFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< float > >::allocator_type":
        return _cstl.MapLongVecFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< float > >::size_type":
        return _cstl.MapLongVecFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< float > >::iterator":
        return _cstl.MapLongVecFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecFloat

# Register MapLongVecFloat in _cstl:
_cstl.MapLongVecFloat_swigregister(MapLongVecFloat)

class MapLongVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< double > >::size_type":
        return _cstl.MapLongVecDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< double > >::mapped_type const &":
        return _cstl.MapLongVecDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< double > >::key_type const &") -> "void":
        return _cstl.MapLongVecDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< double > >::key_type const &") -> "bool":
        return _cstl.MapLongVecDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< double > >::key_type const &") -> "bool":
        return _cstl.MapLongVecDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecDouble_swiginit(self, _cstl.new_MapLongVecDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< double > >::size_type":
        return _cstl.MapLongVecDouble_size(self)

    def swap(self, v: "MapLongVecDouble") -> "void":
        return _cstl.MapLongVecDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< double > >::iterator":
        return _cstl.MapLongVecDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< double > >::iterator":
        return _cstl.MapLongVecDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< double > >::allocator_type":
        return _cstl.MapLongVecDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< double > >::size_type":
        return _cstl.MapLongVecDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< double > >::iterator":
        return _cstl.MapLongVecDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecDouble

# Register MapLongVecDouble in _cstl:
_cstl.MapLongVecDouble_swigregister(MapLongVecDouble)

class MapLongVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< bool > >::size_type":
        return _cstl.MapLongVecBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< bool > >::mapped_type const &":
        return _cstl.MapLongVecBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< bool > >::key_type const &") -> "void":
        return _cstl.MapLongVecBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< bool > >::key_type const &") -> "bool":
        return _cstl.MapLongVecBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< bool > >::key_type const &") -> "bool":
        return _cstl.MapLongVecBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecBool_swiginit(self, _cstl.new_MapLongVecBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< bool > >::size_type":
        return _cstl.MapLongVecBool_size(self)

    def swap(self, v: "MapLongVecBool") -> "void":
        return _cstl.MapLongVecBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< bool > >::iterator":
        return _cstl.MapLongVecBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< bool > >::iterator":
        return _cstl.MapLongVecBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< bool > >::allocator_type":
        return _cstl.MapLongVecBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< bool > >::size_type":
        return _cstl.MapLongVecBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< bool > >::iterator":
        return _cstl.MapLongVecBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecBool

# Register MapLongVecBool in _cstl:
_cstl.MapLongVecBool_swigregister(MapLongVecBool)

class MapLongVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::size_type":
        return _cstl.MapLongVecLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::mapped_type const &":
        return _cstl.MapLongVecLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::key_type const &") -> "void":
        return _cstl.MapLongVecLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapLongVecLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapLongVecLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecLong_swiginit(self, _cstl.new_MapLongVecLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::size_type":
        return _cstl.MapLongVecLong_size(self)

    def swap(self, v: "MapLongVecLong") -> "void":
        return _cstl.MapLongVecLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::iterator":
        return _cstl.MapLongVecLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::iterator":
        return _cstl.MapLongVecLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::allocator_type":
        return _cstl.MapLongVecLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::size_type":
        return _cstl.MapLongVecLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::int64_t > >::iterator":
        return _cstl.MapLongVecLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecLong

# Register MapLongVecLong in _cstl:
_cstl.MapLongVecLong_swigregister(MapLongVecLong)

class MapLongSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongSetInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_set< int > >::size_type":
        return _cstl.MapLongSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_set< int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_set< int > >::mapped_type const &":
        return _cstl.MapLongSetInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_set< int > >::key_type const &") -> "void":
        return _cstl.MapLongSetInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_set< int > >::key_type const &") -> "bool":
        return _cstl.MapLongSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongSetInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongSetInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_set< int > >::key_type const &") -> "bool":
        return _cstl.MapLongSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongSetInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongSetInt_swiginit(self, _cstl.new_MapLongSetInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongSetInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_set< int > >::size_type":
        return _cstl.MapLongSetInt_size(self)

    def swap(self, v: "MapLongSetInt") -> "void":
        return _cstl.MapLongSetInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_set< int > >::iterator":
        return _cstl.MapLongSetInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_set< int > >::iterator":
        return _cstl.MapLongSetInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongSetInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_set< int > >::allocator_type":
        return _cstl.MapLongSetInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_set< int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_set< int > >::size_type":
        return _cstl.MapLongSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongSetInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_set< int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_set< int > >::iterator":
        return _cstl.MapLongSetInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongSetInt

# Register MapLongSetInt in _cstl:
_cstl.MapLongSetInt_swigregister(MapLongSetInt)

class MapLongSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongSetStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::size_type":
        return _cstl.MapLongSetStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::mapped_type const &":
        return _cstl.MapLongSetStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::key_type const &") -> "void":
        return _cstl.MapLongSetStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::key_type const &") -> "bool":
        return _cstl.MapLongSetStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongSetStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongSetStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongSetStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::key_type const &") -> "bool":
        return _cstl.MapLongSetStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongSetStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongSetStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongSetStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongSetStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongSetStr_swiginit(self, _cstl.new_MapLongSetStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongSetStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::size_type":
        return _cstl.MapLongSetStr_size(self)

    def swap(self, v: "MapLongSetStr") -> "void":
        return _cstl.MapLongSetStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::iterator":
        return _cstl.MapLongSetStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::iterator":
        return _cstl.MapLongSetStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongSetStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::allocator_type":
        return _cstl.MapLongSetStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::size_type":
        return _cstl.MapLongSetStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongSetStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_set< std::string > >::iterator":
        return _cstl.MapLongSetStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongSetStr

# Register MapLongSetStr in _cstl:
_cstl.MapLongSetStr_swigregister(MapLongSetStr)

class MapLongSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongSetLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::size_type":
        return _cstl.MapLongSetLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::mapped_type const &":
        return _cstl.MapLongSetLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::key_type const &") -> "void":
        return _cstl.MapLongSetLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapLongSetLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongSetLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongSetLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongSetLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapLongSetLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongSetLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongSetLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongSetLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongSetLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongSetLong_swiginit(self, _cstl.new_MapLongSetLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongSetLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::size_type":
        return _cstl.MapLongSetLong_size(self)

    def swap(self, v: "MapLongSetLong") -> "void":
        return _cstl.MapLongSetLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::iterator":
        return _cstl.MapLongSetLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::iterator":
        return _cstl.MapLongSetLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongSetLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::allocator_type":
        return _cstl.MapLongSetLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::size_type":
        return _cstl.MapLongSetLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongSetLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > >::iterator":
        return _cstl.MapLongSetLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongSetLong

# Register MapLongSetLong in _cstl:
_cstl.MapLongSetLong_swigregister(MapLongSetLong)

class MapLongMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::size_type":
        return _cstl.MapLongMapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::mapped_type const &":
        return _cstl.MapLongMapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntInt_swiginit(self, _cstl.new_MapLongMapIntInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::size_type":
        return _cstl.MapLongMapIntInt_size(self)

    def swap(self, v: "MapLongMapIntInt") -> "void":
        return _cstl.MapLongMapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::iterator":
        return _cstl.MapLongMapIntInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::iterator":
        return _cstl.MapLongMapIntInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::allocator_type":
        return _cstl.MapLongMapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::size_type":
        return _cstl.MapLongMapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,int > >::iterator":
        return _cstl.MapLongMapIntInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntInt

# Register MapLongMapIntInt in _cstl:
_cstl.MapLongMapIntInt_swigregister(MapLongMapIntInt)

class MapLongMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::size_type":
        return _cstl.MapLongMapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::mapped_type const &":
        return _cstl.MapLongMapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntStr_swiginit(self, _cstl.new_MapLongMapIntStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::size_type":
        return _cstl.MapLongMapIntStr_size(self)

    def swap(self, v: "MapLongMapIntStr") -> "void":
        return _cstl.MapLongMapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::iterator":
        return _cstl.MapLongMapIntStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::iterator":
        return _cstl.MapLongMapIntStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::allocator_type":
        return _cstl.MapLongMapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::size_type":
        return _cstl.MapLongMapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::string > >::iterator":
        return _cstl.MapLongMapIntStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntStr

# Register MapLongMapIntStr in _cstl:
_cstl.MapLongMapIntStr_swigregister(MapLongMapIntStr)

class MapLongMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::size_type":
        return _cstl.MapLongMapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::mapped_type const &":
        return _cstl.MapLongMapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntFloat_swiginit(self, _cstl.new_MapLongMapIntFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::size_type":
        return _cstl.MapLongMapIntFloat_size(self)

    def swap(self, v: "MapLongMapIntFloat") -> "void":
        return _cstl.MapLongMapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::iterator":
        return _cstl.MapLongMapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::iterator":
        return _cstl.MapLongMapIntFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::allocator_type":
        return _cstl.MapLongMapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::size_type":
        return _cstl.MapLongMapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,float > >::iterator":
        return _cstl.MapLongMapIntFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntFloat

# Register MapLongMapIntFloat in _cstl:
_cstl.MapLongMapIntFloat_swigregister(MapLongMapIntFloat)

class MapLongMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::size_type":
        return _cstl.MapLongMapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::mapped_type const &":
        return _cstl.MapLongMapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntDouble_swiginit(self, _cstl.new_MapLongMapIntDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::size_type":
        return _cstl.MapLongMapIntDouble_size(self)

    def swap(self, v: "MapLongMapIntDouble") -> "void":
        return _cstl.MapLongMapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::iterator":
        return _cstl.MapLongMapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::iterator":
        return _cstl.MapLongMapIntDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::allocator_type":
        return _cstl.MapLongMapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::size_type":
        return _cstl.MapLongMapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,double > >::iterator":
        return _cstl.MapLongMapIntDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntDouble

# Register MapLongMapIntDouble in _cstl:
_cstl.MapLongMapIntDouble_swigregister(MapLongMapIntDouble)

class MapLongMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::size_type":
        return _cstl.MapLongMapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::mapped_type const &":
        return _cstl.MapLongMapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntBool_swiginit(self, _cstl.new_MapLongMapIntBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::size_type":
        return _cstl.MapLongMapIntBool_size(self)

    def swap(self, v: "MapLongMapIntBool") -> "void":
        return _cstl.MapLongMapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::iterator":
        return _cstl.MapLongMapIntBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::iterator":
        return _cstl.MapLongMapIntBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::allocator_type":
        return _cstl.MapLongMapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::size_type":
        return _cstl.MapLongMapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,bool > >::iterator":
        return _cstl.MapLongMapIntBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntBool

# Register MapLongMapIntBool in _cstl:
_cstl.MapLongMapIntBool_swigregister(MapLongMapIntBool)

class MapLongMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::size_type":
        return _cstl.MapLongMapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::mapped_type const &":
        return _cstl.MapLongMapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntLong_swiginit(self, _cstl.new_MapLongMapIntLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::size_type":
        return _cstl.MapLongMapIntLong_size(self)

    def swap(self, v: "MapLongMapIntLong") -> "void":
        return _cstl.MapLongMapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::iterator":
        return _cstl.MapLongMapIntLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::iterator":
        return _cstl.MapLongMapIntLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::allocator_type":
        return _cstl.MapLongMapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::size_type":
        return _cstl.MapLongMapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > >::iterator":
        return _cstl.MapLongMapIntLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntLong

# Register MapLongMapIntLong in _cstl:
_cstl.MapLongMapIntLong_swigregister(MapLongMapIntLong)

class MapLongMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::size_type":
        return _cstl.MapLongMapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::mapped_type const &":
        return _cstl.MapLongMapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrInt_swiginit(self, _cstl.new_MapLongMapStrInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::size_type":
        return _cstl.MapLongMapStrInt_size(self)

    def swap(self, v: "MapLongMapStrInt") -> "void":
        return _cstl.MapLongMapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::iterator":
        return _cstl.MapLongMapStrInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::iterator":
        return _cstl.MapLongMapStrInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::allocator_type":
        return _cstl.MapLongMapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::size_type":
        return _cstl.MapLongMapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,int > >::iterator":
        return _cstl.MapLongMapStrInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrInt

# Register MapLongMapStrInt in _cstl:
_cstl.MapLongMapStrInt_swigregister(MapLongMapStrInt)

class MapLongMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::size_type":
        return _cstl.MapLongMapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::mapped_type const &":
        return _cstl.MapLongMapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrStr_swiginit(self, _cstl.new_MapLongMapStrStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::size_type":
        return _cstl.MapLongMapStrStr_size(self)

    def swap(self, v: "MapLongMapStrStr") -> "void":
        return _cstl.MapLongMapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::iterator":
        return _cstl.MapLongMapStrStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::iterator":
        return _cstl.MapLongMapStrStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::allocator_type":
        return _cstl.MapLongMapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::size_type":
        return _cstl.MapLongMapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > >::iterator":
        return _cstl.MapLongMapStrStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrStr

# Register MapLongMapStrStr in _cstl:
_cstl.MapLongMapStrStr_swigregister(MapLongMapStrStr)

class MapLongMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::size_type":
        return _cstl.MapLongMapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::mapped_type const &":
        return _cstl.MapLongMapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrFloat_swiginit(self, _cstl.new_MapLongMapStrFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::size_type":
        return _cstl.MapLongMapStrFloat_size(self)

    def swap(self, v: "MapLongMapStrFloat") -> "void":
        return _cstl.MapLongMapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::iterator":
        return _cstl.MapLongMapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::iterator":
        return _cstl.MapLongMapStrFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::allocator_type":
        return _cstl.MapLongMapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::size_type":
        return _cstl.MapLongMapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,float > >::iterator":
        return _cstl.MapLongMapStrFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrFloat

# Register MapLongMapStrFloat in _cstl:
_cstl.MapLongMapStrFloat_swigregister(MapLongMapStrFloat)

class MapLongMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::size_type":
        return _cstl.MapLongMapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::mapped_type const &":
        return _cstl.MapLongMapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrDouble_swiginit(self, _cstl.new_MapLongMapStrDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::size_type":
        return _cstl.MapLongMapStrDouble_size(self)

    def swap(self, v: "MapLongMapStrDouble") -> "void":
        return _cstl.MapLongMapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::iterator":
        return _cstl.MapLongMapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::iterator":
        return _cstl.MapLongMapStrDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::allocator_type":
        return _cstl.MapLongMapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::size_type":
        return _cstl.MapLongMapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,double > >::iterator":
        return _cstl.MapLongMapStrDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrDouble

# Register MapLongMapStrDouble in _cstl:
_cstl.MapLongMapStrDouble_swigregister(MapLongMapStrDouble)

class MapLongMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::size_type":
        return _cstl.MapLongMapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::mapped_type const &":
        return _cstl.MapLongMapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrBool_swiginit(self, _cstl.new_MapLongMapStrBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::size_type":
        return _cstl.MapLongMapStrBool_size(self)

    def swap(self, v: "MapLongMapStrBool") -> "void":
        return _cstl.MapLongMapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::iterator":
        return _cstl.MapLongMapStrBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::iterator":
        return _cstl.MapLongMapStrBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::allocator_type":
        return _cstl.MapLongMapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::size_type":
        return _cstl.MapLongMapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > >::iterator":
        return _cstl.MapLongMapStrBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrBool

# Register MapLongMapStrBool in _cstl:
_cstl.MapLongMapStrBool_swigregister(MapLongMapStrBool)

class MapLongMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::size_type":
        return _cstl.MapLongMapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::mapped_type const &":
        return _cstl.MapLongMapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrLong_swiginit(self, _cstl.new_MapLongMapStrLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::size_type":
        return _cstl.MapLongMapStrLong_size(self)

    def swap(self, v: "MapLongMapStrLong") -> "void":
        return _cstl.MapLongMapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::iterator":
        return _cstl.MapLongMapStrLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::iterator":
        return _cstl.MapLongMapStrLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::allocator_type":
        return _cstl.MapLongMapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::size_type":
        return _cstl.MapLongMapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > >::iterator":
        return _cstl.MapLongMapStrLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrLong

# Register MapLongMapStrLong in _cstl:
_cstl.MapLongMapStrLong_swigregister(MapLongMapStrLong)

class MapLongMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::size_type":
        return _cstl.MapLongMapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::mapped_type const &":
        return _cstl.MapLongMapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongInt_swiginit(self, _cstl.new_MapLongMapLongInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::size_type":
        return _cstl.MapLongMapLongInt_size(self)

    def swap(self, v: "MapLongMapLongInt") -> "void":
        return _cstl.MapLongMapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::iterator":
        return _cstl.MapLongMapLongInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::iterator":
        return _cstl.MapLongMapLongInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::allocator_type":
        return _cstl.MapLongMapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::size_type":
        return _cstl.MapLongMapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > >::iterator":
        return _cstl.MapLongMapLongInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongInt

# Register MapLongMapLongInt in _cstl:
_cstl.MapLongMapLongInt_swigregister(MapLongMapLongInt)

class MapLongMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::size_type":
        return _cstl.MapLongMapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::mapped_type const &":
        return _cstl.MapLongMapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongStr_swiginit(self, _cstl.new_MapLongMapLongStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::size_type":
        return _cstl.MapLongMapLongStr_size(self)

    def swap(self, v: "MapLongMapLongStr") -> "void":
        return _cstl.MapLongMapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::iterator":
        return _cstl.MapLongMapLongStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::iterator":
        return _cstl.MapLongMapLongStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::allocator_type":
        return _cstl.MapLongMapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::size_type":
        return _cstl.MapLongMapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > >::iterator":
        return _cstl.MapLongMapLongStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongStr

# Register MapLongMapLongStr in _cstl:
_cstl.MapLongMapLongStr_swigregister(MapLongMapLongStr)

class MapLongMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::size_type":
        return _cstl.MapLongMapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::mapped_type const &":
        return _cstl.MapLongMapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongFloat_swiginit(self, _cstl.new_MapLongMapLongFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::size_type":
        return _cstl.MapLongMapLongFloat_size(self)

    def swap(self, v: "MapLongMapLongFloat") -> "void":
        return _cstl.MapLongMapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::iterator":
        return _cstl.MapLongMapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::iterator":
        return _cstl.MapLongMapLongFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::allocator_type":
        return _cstl.MapLongMapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::size_type":
        return _cstl.MapLongMapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > >::iterator":
        return _cstl.MapLongMapLongFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongFloat

# Register MapLongMapLongFloat in _cstl:
_cstl.MapLongMapLongFloat_swigregister(MapLongMapLongFloat)

class MapLongMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::size_type":
        return _cstl.MapLongMapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::mapped_type const &":
        return _cstl.MapLongMapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongDouble_swiginit(self, _cstl.new_MapLongMapLongDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::size_type":
        return _cstl.MapLongMapLongDouble_size(self)

    def swap(self, v: "MapLongMapLongDouble") -> "void":
        return _cstl.MapLongMapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::iterator":
        return _cstl.MapLongMapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::iterator":
        return _cstl.MapLongMapLongDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::allocator_type":
        return _cstl.MapLongMapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::size_type":
        return _cstl.MapLongMapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > >::iterator":
        return _cstl.MapLongMapLongDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongDouble

# Register MapLongMapLongDouble in _cstl:
_cstl.MapLongMapLongDouble_swigregister(MapLongMapLongDouble)

class MapLongMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::size_type":
        return _cstl.MapLongMapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::mapped_type const &":
        return _cstl.MapLongMapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongBool_swiginit(self, _cstl.new_MapLongMapLongBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::size_type":
        return _cstl.MapLongMapLongBool_size(self)

    def swap(self, v: "MapLongMapLongBool") -> "void":
        return _cstl.MapLongMapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::iterator":
        return _cstl.MapLongMapLongBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::iterator":
        return _cstl.MapLongMapLongBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::allocator_type":
        return _cstl.MapLongMapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::size_type":
        return _cstl.MapLongMapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > >::iterator":
        return _cstl.MapLongMapLongBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongBool

# Register MapLongMapLongBool in _cstl:
_cstl.MapLongMapLongBool_swigregister(MapLongMapLongBool)

class MapLongMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _cstl.MapLongMapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::mapped_type const &":
        return _cstl.MapLongMapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongLong_swiginit(self, _cstl.new_MapLongMapLongLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _cstl.MapLongMapLongLong_size(self)

    def swap(self, v: "MapLongMapLongLong") -> "void":
        return _cstl.MapLongMapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _cstl.MapLongMapLongLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _cstl.MapLongMapLongLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::allocator_type":
        return _cstl.MapLongMapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::size_type":
        return _cstl.MapLongMapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > >::iterator":
        return _cstl.MapLongMapLongLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongLong

# Register MapLongMapLongLong in _cstl:
_cstl.MapLongMapLongLong_swigregister(MapLongMapLongLong)

class VecVecVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecVecInt___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::vector< int > > >::size_type":
        return _cstl.VecVecVecInt___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::vector< int > > >::difference_type", j: "std::vector< std::vector< std::vector< int > > >::difference_type") -> "std::vector< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >,std::allocator< std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > > > *":
        return _cstl.VecVecVecInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecVecInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::vector< int > > >::difference_type", j: "std::vector< std::vector< std::vector< int > > >::difference_type") -> "void":
        return _cstl.VecVecVecInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecVecInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::vector< int > > >::value_type const &":
        return _cstl.VecVecVecInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecVecInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::vector< int > > >::value_type":
        return _cstl.VecVecVecInt_pop(self)

    def append(self, x: "VecVecInt") -> "void":
        return _cstl.VecVecVecInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecVecInt_empty(self)

    def size(self) -> "std::vector< std::vector< std::vector< int > > >::size_type":
        return _cstl.VecVecVecInt_size(self)

    def swap(self, v: "VecVecVecInt") -> "void":
        return _cstl.VecVecVecInt_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::vector< int > > >::iterator":
        return _cstl.VecVecVecInt_begin(self)

    def end(self) -> "std::vector< std::vector< std::vector< int > > >::iterator":
        return _cstl.VecVecVecInt_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::vector< int > > >::reverse_iterator":
        return _cstl.VecVecVecInt_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::vector< int > > >::reverse_iterator":
        return _cstl.VecVecVecInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecVecInt_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::vector< int > > >::allocator_type":
        return _cstl.VecVecVecInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecVecInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::vector< int > > >::iterator":
        return _cstl.VecVecVecInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecVecInt_swiginit(self, _cstl.new_VecVecVecInt(*args))

    def push_back(self, x: "VecVecInt") -> "void":
        return _cstl.VecVecVecInt_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::vector< int > > >::value_type const &":
        return _cstl.VecVecVecInt_front(self)

    def back(self) -> "std::vector< std::vector< std::vector< int > > >::value_type const &":
        return _cstl.VecVecVecInt_back(self)

    def assign(self, n: "std::vector< std::vector< std::vector< int > > >::size_type", x: "VecVecInt") -> "void":
        return _cstl.VecVecVecInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecVecInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecVecInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::vector< int > > >::size_type") -> "void":
        return _cstl.VecVecVecInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::vector< int > > >::size_type":
        return _cstl.VecVecVecInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecVecInt

# Register VecVecVecInt in _cstl:
_cstl.VecVecVecInt_swigregister(VecVecVecInt)

class VecVecVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecVecStr___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::vector< std::string > > >::size_type":
        return _cstl.VecVecVecStr___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::vector< std::string > > >::difference_type", j: "std::vector< std::vector< std::vector< std::string > > >::difference_type") -> "std::vector< std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > >,std::allocator< std::vector< std::vector< std::string,std::allocator< std::string > >,std::allocator< std::vector< std::string,std::allocator< std::string > > > > > > *":
        return _cstl.VecVecVecStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecVecStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::vector< std::string > > >::difference_type", j: "std::vector< std::vector< std::vector< std::string > > >::difference_type") -> "void":
        return _cstl.VecVecVecStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecVecStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::vector< std::string > > >::value_type const &":
        return _cstl.VecVecVecStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecVecStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::vector< std::string > > >::value_type":
        return _cstl.VecVecVecStr_pop(self)

    def append(self, x: "VecVecStr") -> "void":
        return _cstl.VecVecVecStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecVecStr_empty(self)

    def size(self) -> "std::vector< std::vector< std::vector< std::string > > >::size_type":
        return _cstl.VecVecVecStr_size(self)

    def swap(self, v: "VecVecVecStr") -> "void":
        return _cstl.VecVecVecStr_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::vector< std::string > > >::iterator":
        return _cstl.VecVecVecStr_begin(self)

    def end(self) -> "std::vector< std::vector< std::vector< std::string > > >::iterator":
        return _cstl.VecVecVecStr_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::vector< std::string > > >::reverse_iterator":
        return _cstl.VecVecVecStr_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::vector< std::string > > >::reverse_iterator":
        return _cstl.VecVecVecStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecVecStr_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::vector< std::string > > >::allocator_type":
        return _cstl.VecVecVecStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecVecStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::vector< std::string > > >::iterator":
        return _cstl.VecVecVecStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecVecStr_swiginit(self, _cstl.new_VecVecVecStr(*args))

    def push_back(self, x: "VecVecStr") -> "void":
        return _cstl.VecVecVecStr_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::vector< std::string > > >::value_type const &":
        return _cstl.VecVecVecStr_front(self)

    def back(self) -> "std::vector< std::vector< std::vector< std::string > > >::value_type const &":
        return _cstl.VecVecVecStr_back(self)

    def assign(self, n: "std::vector< std::vector< std::vector< std::string > > >::size_type", x: "VecVecStr") -> "void":
        return _cstl.VecVecVecStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecVecStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecVecStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::vector< std::string > > >::size_type") -> "void":
        return _cstl.VecVecVecStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::vector< std::string > > >::size_type":
        return _cstl.VecVecVecStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecVecStr

# Register VecVecVecStr in _cstl:
_cstl.VecVecVecStr_swigregister(VecVecVecStr)

class VecVecVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecVecFloat___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::vector< float > > >::size_type":
        return _cstl.VecVecVecFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::vector< float > > >::difference_type", j: "std::vector< std::vector< std::vector< float > > >::difference_type") -> "std::vector< std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > >,std::allocator< std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > > > *":
        return _cstl.VecVecVecFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecVecFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::vector< float > > >::difference_type", j: "std::vector< std::vector< std::vector< float > > >::difference_type") -> "void":
        return _cstl.VecVecVecFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecVecFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::vector< float > > >::value_type const &":
        return _cstl.VecVecVecFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecVecFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::vector< float > > >::value_type":
        return _cstl.VecVecVecFloat_pop(self)

    def append(self, x: "VecVecFloat") -> "void":
        return _cstl.VecVecVecFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecVecFloat_empty(self)

    def size(self) -> "std::vector< std::vector< std::vector< float > > >::size_type":
        return _cstl.VecVecVecFloat_size(self)

    def swap(self, v: "VecVecVecFloat") -> "void":
        return _cstl.VecVecVecFloat_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::vector< float > > >::iterator":
        return _cstl.VecVecVecFloat_begin(self)

    def end(self) -> "std::vector< std::vector< std::vector< float > > >::iterator":
        return _cstl.VecVecVecFloat_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::vector< float > > >::reverse_iterator":
        return _cstl.VecVecVecFloat_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::vector< float > > >::reverse_iterator":
        return _cstl.VecVecVecFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecVecFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::vector< float > > >::allocator_type":
        return _cstl.VecVecVecFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecVecFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::vector< float > > >::iterator":
        return _cstl.VecVecVecFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecVecFloat_swiginit(self, _cstl.new_VecVecVecFloat(*args))

    def push_back(self, x: "VecVecFloat") -> "void":
        return _cstl.VecVecVecFloat_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::vector< float > > >::value_type const &":
        return _cstl.VecVecVecFloat_front(self)

    def back(self) -> "std::vector< std::vector< std::vector< float > > >::value_type const &":
        return _cstl.VecVecVecFloat_back(self)

    def assign(self, n: "std::vector< std::vector< std::vector< float > > >::size_type", x: "VecVecFloat") -> "void":
        return _cstl.VecVecVecFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecVecFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecVecFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::vector< float > > >::size_type") -> "void":
        return _cstl.VecVecVecFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::vector< float > > >::size_type":
        return _cstl.VecVecVecFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecVecFloat

# Register VecVecVecFloat in _cstl:
_cstl.VecVecVecFloat_swigregister(VecVecVecFloat)

class VecVecVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecVecDouble___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::vector< double > > >::size_type":
        return _cstl.VecVecVecDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::vector< double > > >::difference_type", j: "std::vector< std::vector< std::vector< double > > >::difference_type") -> "std::vector< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >,std::allocator< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > > *":
        return _cstl.VecVecVecDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecVecDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::vector< double > > >::difference_type", j: "std::vector< std::vector< std::vector< double > > >::difference_type") -> "void":
        return _cstl.VecVecVecDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecVecDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::vector< double > > >::value_type const &":
        return _cstl.VecVecVecDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecVecDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::vector< double > > >::value_type":
        return _cstl.VecVecVecDouble_pop(self)

    def append(self, x: "VecVecDouble") -> "void":
        return _cstl.VecVecVecDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecVecDouble_empty(self)

    def size(self) -> "std::vector< std::vector< std::vector< double > > >::size_type":
        return _cstl.VecVecVecDouble_size(self)

    def swap(self, v: "VecVecVecDouble") -> "void":
        return _cstl.VecVecVecDouble_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::vector< double > > >::iterator":
        return _cstl.VecVecVecDouble_begin(self)

    def end(self) -> "std::vector< std::vector< std::vector< double > > >::iterator":
        return _cstl.VecVecVecDouble_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::vector< double > > >::reverse_iterator":
        return _cstl.VecVecVecDouble_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::vector< double > > >::reverse_iterator":
        return _cstl.VecVecVecDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecVecDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::vector< double > > >::allocator_type":
        return _cstl.VecVecVecDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecVecDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::vector< double > > >::iterator":
        return _cstl.VecVecVecDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecVecDouble_swiginit(self, _cstl.new_VecVecVecDouble(*args))

    def push_back(self, x: "VecVecDouble") -> "void":
        return _cstl.VecVecVecDouble_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::vector< double > > >::value_type const &":
        return _cstl.VecVecVecDouble_front(self)

    def back(self) -> "std::vector< std::vector< std::vector< double > > >::value_type const &":
        return _cstl.VecVecVecDouble_back(self)

    def assign(self, n: "std::vector< std::vector< std::vector< double > > >::size_type", x: "VecVecDouble") -> "void":
        return _cstl.VecVecVecDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecVecDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecVecDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::vector< double > > >::size_type") -> "void":
        return _cstl.VecVecVecDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::vector< double > > >::size_type":
        return _cstl.VecVecVecDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecVecDouble

# Register VecVecVecDouble in _cstl:
_cstl.VecVecVecDouble_swigregister(VecVecVecDouble)

class VecVecVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecVecBool___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::vector< bool > > >::size_type":
        return _cstl.VecVecVecBool___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::vector< bool > > >::difference_type", j: "std::vector< std::vector< std::vector< bool > > >::difference_type") -> "std::vector< std::vector< std::vector< bool,std::allocator< bool > >,std::allocator< std::vector< bool,std::allocator< bool > > > >,std::allocator< std::vector< std::vector< bool,std::allocator< bool > >,std::allocator< std::vector< bool,std::allocator< bool > > > > > > *":
        return _cstl.VecVecVecBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecVecBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::vector< bool > > >::difference_type", j: "std::vector< std::vector< std::vector< bool > > >::difference_type") -> "void":
        return _cstl.VecVecVecBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecVecBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::vector< bool > > >::value_type const &":
        return _cstl.VecVecVecBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecVecBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::vector< bool > > >::value_type":
        return _cstl.VecVecVecBool_pop(self)

    def append(self, x: "VecVecBool") -> "void":
        return _cstl.VecVecVecBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecVecBool_empty(self)

    def size(self) -> "std::vector< std::vector< std::vector< bool > > >::size_type":
        return _cstl.VecVecVecBool_size(self)

    def swap(self, v: "VecVecVecBool") -> "void":
        return _cstl.VecVecVecBool_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::vector< bool > > >::iterator":
        return _cstl.VecVecVecBool_begin(self)

    def end(self) -> "std::vector< std::vector< std::vector< bool > > >::iterator":
        return _cstl.VecVecVecBool_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::vector< bool > > >::reverse_iterator":
        return _cstl.VecVecVecBool_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::vector< bool > > >::reverse_iterator":
        return _cstl.VecVecVecBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecVecBool_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::vector< bool > > >::allocator_type":
        return _cstl.VecVecVecBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecVecBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::vector< bool > > >::iterator":
        return _cstl.VecVecVecBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecVecBool_swiginit(self, _cstl.new_VecVecVecBool(*args))

    def push_back(self, x: "VecVecBool") -> "void":
        return _cstl.VecVecVecBool_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::vector< bool > > >::value_type const &":
        return _cstl.VecVecVecBool_front(self)

    def back(self) -> "std::vector< std::vector< std::vector< bool > > >::value_type const &":
        return _cstl.VecVecVecBool_back(self)

    def assign(self, n: "std::vector< std::vector< std::vector< bool > > >::size_type", x: "VecVecBool") -> "void":
        return _cstl.VecVecVecBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecVecBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecVecBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::vector< bool > > >::size_type") -> "void":
        return _cstl.VecVecVecBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::vector< bool > > >::size_type":
        return _cstl.VecVecVecBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecVecBool

# Register VecVecVecBool in _cstl:
_cstl.VecVecVecBool_swigregister(VecVecVecBool)

class VecVecVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecVecLong___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::vector< std::int64_t > > >::size_type":
        return _cstl.VecVecVecLong___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::vector< std::int64_t > > >::difference_type", j: "std::vector< std::vector< std::vector< std::int64_t > > >::difference_type") -> "std::vector< std::vector< std::vector< std::int64_t,std::allocator< std::int64_t > >,std::allocator< std::vector< std::int64_t,std::allocator< std::int64_t > > > >,std::allocator< std::vector< std::vector< std::int64_t,std::allocator< std::int64_t > >,std::allocator< std::vector< std::int64_t,std::allocator< std::int64_t > > > > > > *":
        return _cstl.VecVecVecLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecVecLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::vector< std::int64_t > > >::difference_type", j: "std::vector< std::vector< std::vector< std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecVecVecLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecVecLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::vector< std::int64_t > > >::value_type const &":
        return _cstl.VecVecVecLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecVecLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::vector< std::int64_t > > >::value_type":
        return _cstl.VecVecVecLong_pop(self)

    def append(self, x: "VecVecLong") -> "void":
        return _cstl.VecVecVecLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecVecLong_empty(self)

    def size(self) -> "std::vector< std::vector< std::vector< std::int64_t > > >::size_type":
        return _cstl.VecVecVecLong_size(self)

    def swap(self, v: "VecVecVecLong") -> "void":
        return _cstl.VecVecVecLong_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::vector< std::int64_t > > >::iterator":
        return _cstl.VecVecVecLong_begin(self)

    def end(self) -> "std::vector< std::vector< std::vector< std::int64_t > > >::iterator":
        return _cstl.VecVecVecLong_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::vector< std::int64_t > > >::reverse_iterator":
        return _cstl.VecVecVecLong_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::vector< std::int64_t > > >::reverse_iterator":
        return _cstl.VecVecVecLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecVecLong_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::vector< std::int64_t > > >::allocator_type":
        return _cstl.VecVecVecLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecVecLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::vector< std::int64_t > > >::iterator":
        return _cstl.VecVecVecLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecVecLong_swiginit(self, _cstl.new_VecVecVecLong(*args))

    def push_back(self, x: "VecVecLong") -> "void":
        return _cstl.VecVecVecLong_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::vector< std::int64_t > > >::value_type const &":
        return _cstl.VecVecVecLong_front(self)

    def back(self) -> "std::vector< std::vector< std::vector< std::int64_t > > >::value_type const &":
        return _cstl.VecVecVecLong_back(self)

    def assign(self, n: "std::vector< std::vector< std::vector< std::int64_t > > >::size_type", x: "VecVecLong") -> "void":
        return _cstl.VecVecVecLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecVecLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecVecLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::vector< std::int64_t > > >::size_type") -> "void":
        return _cstl.VecVecVecLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::vector< std::int64_t > > >::size_type":
        return _cstl.VecVecVecLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecVecLong

# Register VecVecVecLong in _cstl:
_cstl.VecVecVecLong_swigregister(VecVecVecLong)

class VecVecSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecSetInt___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_set< int > > >::size_type":
        return _cstl.VecVecSetInt___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_set< int > > >::difference_type", j: "std::vector< std::vector< std::unordered_set< int > > >::difference_type") -> "std::vector< std::vector< std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > >,std::allocator< std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > > > >,std::allocator< std::vector< std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > >,std::allocator< std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > > > > > > *":
        return _cstl.VecVecSetInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecSetInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_set< int > > >::difference_type", j: "std::vector< std::vector< std::unordered_set< int > > >::difference_type") -> "void":
        return _cstl.VecVecSetInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecSetInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_set< int > > >::value_type const &":
        return _cstl.VecVecSetInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecSetInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_set< int > > >::value_type":
        return _cstl.VecVecSetInt_pop(self)

    def append(self, x: "VecSetInt") -> "void":
        return _cstl.VecVecSetInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecSetInt_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_set< int > > >::size_type":
        return _cstl.VecVecSetInt_size(self)

    def swap(self, v: "VecVecSetInt") -> "void":
        return _cstl.VecVecSetInt_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_set< int > > >::iterator":
        return _cstl.VecVecSetInt_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_set< int > > >::iterator":
        return _cstl.VecVecSetInt_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_set< int > > >::reverse_iterator":
        return _cstl.VecVecSetInt_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_set< int > > >::reverse_iterator":
        return _cstl.VecVecSetInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecSetInt_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_set< int > > >::allocator_type":
        return _cstl.VecVecSetInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecSetInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_set< int > > >::iterator":
        return _cstl.VecVecSetInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecSetInt_swiginit(self, _cstl.new_VecVecSetInt(*args))

    def push_back(self, x: "VecSetInt") -> "void":
        return _cstl.VecVecSetInt_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_set< int > > >::value_type const &":
        return _cstl.VecVecSetInt_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_set< int > > >::value_type const &":
        return _cstl.VecVecSetInt_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_set< int > > >::size_type", x: "VecSetInt") -> "void":
        return _cstl.VecVecSetInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecSetInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecSetInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_set< int > > >::size_type") -> "void":
        return _cstl.VecVecSetInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_set< int > > >::size_type":
        return _cstl.VecVecSetInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecSetInt

# Register VecVecSetInt in _cstl:
_cstl.VecVecSetInt_swigregister(VecVecSetInt)

class VecVecSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecSetStr___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_set< std::string > > >::size_type":
        return _cstl.VecVecSetStr___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_set< std::string > > >::difference_type", j: "std::vector< std::vector< std::unordered_set< std::string > > >::difference_type") -> "std::vector< std::vector< std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > >,std::allocator< std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > > > >,std::allocator< std::vector< std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > >,std::allocator< std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > > > > > > *":
        return _cstl.VecVecSetStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecSetStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_set< std::string > > >::difference_type", j: "std::vector< std::vector< std::unordered_set< std::string > > >::difference_type") -> "void":
        return _cstl.VecVecSetStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecSetStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_set< std::string > > >::value_type const &":
        return _cstl.VecVecSetStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecSetStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_set< std::string > > >::value_type":
        return _cstl.VecVecSetStr_pop(self)

    def append(self, x: "VecSetStr") -> "void":
        return _cstl.VecVecSetStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecSetStr_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_set< std::string > > >::size_type":
        return _cstl.VecVecSetStr_size(self)

    def swap(self, v: "VecVecSetStr") -> "void":
        return _cstl.VecVecSetStr_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_set< std::string > > >::iterator":
        return _cstl.VecVecSetStr_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_set< std::string > > >::iterator":
        return _cstl.VecVecSetStr_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_set< std::string > > >::reverse_iterator":
        return _cstl.VecVecSetStr_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_set< std::string > > >::reverse_iterator":
        return _cstl.VecVecSetStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecSetStr_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_set< std::string > > >::allocator_type":
        return _cstl.VecVecSetStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecSetStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_set< std::string > > >::iterator":
        return _cstl.VecVecSetStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecSetStr_swiginit(self, _cstl.new_VecVecSetStr(*args))

    def push_back(self, x: "VecSetStr") -> "void":
        return _cstl.VecVecSetStr_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_set< std::string > > >::value_type const &":
        return _cstl.VecVecSetStr_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_set< std::string > > >::value_type const &":
        return _cstl.VecVecSetStr_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_set< std::string > > >::size_type", x: "VecSetStr") -> "void":
        return _cstl.VecVecSetStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecSetStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecSetStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_set< std::string > > >::size_type") -> "void":
        return _cstl.VecVecSetStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_set< std::string > > >::size_type":
        return _cstl.VecVecSetStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecSetStr

# Register VecVecSetStr in _cstl:
_cstl.VecVecSetStr_swigregister(VecVecSetStr)

class VecVecSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecSetLong___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.VecVecSetLong___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_set< std::int64_t > > >::difference_type", j: "std::vector< std::vector< std::unordered_set< std::int64_t > > >::difference_type") -> "std::vector< std::vector< std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > >,std::allocator< std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > > > >,std::allocator< std::vector< std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > >,std::allocator< std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > > > > > > *":
        return _cstl.VecVecSetLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecSetLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_set< std::int64_t > > >::difference_type", j: "std::vector< std::vector< std::unordered_set< std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecVecSetLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecSetLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_set< std::int64_t > > >::value_type const &":
        return _cstl.VecVecSetLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecSetLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_set< std::int64_t > > >::value_type":
        return _cstl.VecVecSetLong_pop(self)

    def append(self, x: "VecSetLong") -> "void":
        return _cstl.VecVecSetLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecSetLong_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.VecVecSetLong_size(self)

    def swap(self, v: "VecVecSetLong") -> "void":
        return _cstl.VecVecSetLong_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.VecVecSetLong_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.VecVecSetLong_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_set< std::int64_t > > >::reverse_iterator":
        return _cstl.VecVecSetLong_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_set< std::int64_t > > >::reverse_iterator":
        return _cstl.VecVecSetLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecSetLong_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_set< std::int64_t > > >::allocator_type":
        return _cstl.VecVecSetLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecSetLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.VecVecSetLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecSetLong_swiginit(self, _cstl.new_VecVecSetLong(*args))

    def push_back(self, x: "VecSetLong") -> "void":
        return _cstl.VecVecSetLong_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_set< std::int64_t > > >::value_type const &":
        return _cstl.VecVecSetLong_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_set< std::int64_t > > >::value_type const &":
        return _cstl.VecVecSetLong_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_set< std::int64_t > > >::size_type", x: "VecSetLong") -> "void":
        return _cstl.VecVecSetLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecSetLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecSetLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_set< std::int64_t > > >::size_type") -> "void":
        return _cstl.VecVecSetLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.VecVecSetLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecSetLong

# Register VecVecSetLong in _cstl:
_cstl.VecVecSetLong_swigregister(VecVecSetLong)

class VecVecMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecMapIntInt___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_map< int,int > > >::size_type":
        return _cstl.VecVecMapIntInt___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_map< int,int > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< int,int > > >::difference_type") -> "std::vector< std::vector< std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > >,std::allocator< std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > > > >,std::allocator< std::vector< std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > >,std::allocator< std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > > > > > > *":
        return _cstl.VecVecMapIntInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecMapIntInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_map< int,int > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< int,int > > >::difference_type") -> "void":
        return _cstl.VecVecMapIntInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecMapIntInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_map< int,int > > >::value_type const &":
        return _cstl.VecVecMapIntInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecMapIntInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_map< int,int > > >::value_type":
        return _cstl.VecVecMapIntInt_pop(self)

    def append(self, x: "VecMapIntInt") -> "void":
        return _cstl.VecVecMapIntInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecMapIntInt_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_map< int,int > > >::size_type":
        return _cstl.VecVecMapIntInt_size(self)

    def swap(self, v: "VecVecMapIntInt") -> "void":
        return _cstl.VecVecMapIntInt_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_map< int,int > > >::iterator":
        return _cstl.VecVecMapIntInt_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_map< int,int > > >::iterator":
        return _cstl.VecVecMapIntInt_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_map< int,int > > >::reverse_iterator":
        return _cstl.VecVecMapIntInt_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_map< int,int > > >::reverse_iterator":
        return _cstl.VecVecMapIntInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecMapIntInt_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_map< int,int > > >::allocator_type":
        return _cstl.VecVecMapIntInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecMapIntInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_map< int,int > > >::iterator":
        return _cstl.VecVecMapIntInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecMapIntInt_swiginit(self, _cstl.new_VecVecMapIntInt(*args))

    def push_back(self, x: "VecMapIntInt") -> "void":
        return _cstl.VecVecMapIntInt_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_map< int,int > > >::value_type const &":
        return _cstl.VecVecMapIntInt_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_map< int,int > > >::value_type const &":
        return _cstl.VecVecMapIntInt_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_map< int,int > > >::size_type", x: "VecMapIntInt") -> "void":
        return _cstl.VecVecMapIntInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecMapIntInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecMapIntInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_map< int,int > > >::size_type") -> "void":
        return _cstl.VecVecMapIntInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_map< int,int > > >::size_type":
        return _cstl.VecVecMapIntInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecMapIntInt

# Register VecVecMapIntInt in _cstl:
_cstl.VecVecMapIntInt_swigregister(VecVecMapIntInt)

class VecVecMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecMapIntStr___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_map< int,std::string > > >::size_type":
        return _cstl.VecVecMapIntStr___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_map< int,std::string > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< int,std::string > > >::difference_type") -> "std::vector< std::vector< std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > >,std::allocator< std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > > > >,std::allocator< std::vector< std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > >,std::allocator< std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > > > > > > *":
        return _cstl.VecVecMapIntStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecMapIntStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_map< int,std::string > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< int,std::string > > >::difference_type") -> "void":
        return _cstl.VecVecMapIntStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecMapIntStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_map< int,std::string > > >::value_type const &":
        return _cstl.VecVecMapIntStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecMapIntStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_map< int,std::string > > >::value_type":
        return _cstl.VecVecMapIntStr_pop(self)

    def append(self, x: "VecMapIntStr") -> "void":
        return _cstl.VecVecMapIntStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecMapIntStr_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_map< int,std::string > > >::size_type":
        return _cstl.VecVecMapIntStr_size(self)

    def swap(self, v: "VecVecMapIntStr") -> "void":
        return _cstl.VecVecMapIntStr_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_map< int,std::string > > >::iterator":
        return _cstl.VecVecMapIntStr_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_map< int,std::string > > >::iterator":
        return _cstl.VecVecMapIntStr_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_map< int,std::string > > >::reverse_iterator":
        return _cstl.VecVecMapIntStr_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_map< int,std::string > > >::reverse_iterator":
        return _cstl.VecVecMapIntStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecMapIntStr_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_map< int,std::string > > >::allocator_type":
        return _cstl.VecVecMapIntStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecMapIntStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_map< int,std::string > > >::iterator":
        return _cstl.VecVecMapIntStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecMapIntStr_swiginit(self, _cstl.new_VecVecMapIntStr(*args))

    def push_back(self, x: "VecMapIntStr") -> "void":
        return _cstl.VecVecMapIntStr_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_map< int,std::string > > >::value_type const &":
        return _cstl.VecVecMapIntStr_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_map< int,std::string > > >::value_type const &":
        return _cstl.VecVecMapIntStr_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_map< int,std::string > > >::size_type", x: "VecMapIntStr") -> "void":
        return _cstl.VecVecMapIntStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecMapIntStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecMapIntStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_map< int,std::string > > >::size_type") -> "void":
        return _cstl.VecVecMapIntStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_map< int,std::string > > >::size_type":
        return _cstl.VecVecMapIntStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecMapIntStr

# Register VecVecMapIntStr in _cstl:
_cstl.VecVecMapIntStr_swigregister(VecVecMapIntStr)

class VecVecMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecMapIntFloat___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_map< int,float > > >::size_type":
        return _cstl.VecVecMapIntFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_map< int,float > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< int,float > > >::difference_type") -> "std::vector< std::vector< std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > >,std::allocator< std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > > > >,std::allocator< std::vector< std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > >,std::allocator< std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > > > > > > *":
        return _cstl.VecVecMapIntFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecMapIntFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_map< int,float > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< int,float > > >::difference_type") -> "void":
        return _cstl.VecVecMapIntFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecMapIntFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_map< int,float > > >::value_type const &":
        return _cstl.VecVecMapIntFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecMapIntFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_map< int,float > > >::value_type":
        return _cstl.VecVecMapIntFloat_pop(self)

    def append(self, x: "VecMapIntFloat") -> "void":
        return _cstl.VecVecMapIntFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecMapIntFloat_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_map< int,float > > >::size_type":
        return _cstl.VecVecMapIntFloat_size(self)

    def swap(self, v: "VecVecMapIntFloat") -> "void":
        return _cstl.VecVecMapIntFloat_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_map< int,float > > >::iterator":
        return _cstl.VecVecMapIntFloat_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_map< int,float > > >::iterator":
        return _cstl.VecVecMapIntFloat_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_map< int,float > > >::reverse_iterator":
        return _cstl.VecVecMapIntFloat_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_map< int,float > > >::reverse_iterator":
        return _cstl.VecVecMapIntFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecMapIntFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_map< int,float > > >::allocator_type":
        return _cstl.VecVecMapIntFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecMapIntFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_map< int,float > > >::iterator":
        return _cstl.VecVecMapIntFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecMapIntFloat_swiginit(self, _cstl.new_VecVecMapIntFloat(*args))

    def push_back(self, x: "VecMapIntFloat") -> "void":
        return _cstl.VecVecMapIntFloat_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_map< int,float > > >::value_type const &":
        return _cstl.VecVecMapIntFloat_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_map< int,float > > >::value_type const &":
        return _cstl.VecVecMapIntFloat_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_map< int,float > > >::size_type", x: "VecMapIntFloat") -> "void":
        return _cstl.VecVecMapIntFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecMapIntFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecMapIntFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_map< int,float > > >::size_type") -> "void":
        return _cstl.VecVecMapIntFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_map< int,float > > >::size_type":
        return _cstl.VecVecMapIntFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecMapIntFloat

# Register VecVecMapIntFloat in _cstl:
_cstl.VecVecMapIntFloat_swigregister(VecVecMapIntFloat)

class VecVecMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecMapIntDouble___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_map< int,double > > >::size_type":
        return _cstl.VecVecMapIntDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_map< int,double > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< int,double > > >::difference_type") -> "std::vector< std::vector< std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > >,std::allocator< std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > > > >,std::allocator< std::vector< std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > >,std::allocator< std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > > > > > > *":
        return _cstl.VecVecMapIntDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecMapIntDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_map< int,double > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< int,double > > >::difference_type") -> "void":
        return _cstl.VecVecMapIntDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecMapIntDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_map< int,double > > >::value_type const &":
        return _cstl.VecVecMapIntDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecMapIntDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_map< int,double > > >::value_type":
        return _cstl.VecVecMapIntDouble_pop(self)

    def append(self, x: "VecMapIntDouble") -> "void":
        return _cstl.VecVecMapIntDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecMapIntDouble_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_map< int,double > > >::size_type":
        return _cstl.VecVecMapIntDouble_size(self)

    def swap(self, v: "VecVecMapIntDouble") -> "void":
        return _cstl.VecVecMapIntDouble_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_map< int,double > > >::iterator":
        return _cstl.VecVecMapIntDouble_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_map< int,double > > >::iterator":
        return _cstl.VecVecMapIntDouble_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_map< int,double > > >::reverse_iterator":
        return _cstl.VecVecMapIntDouble_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_map< int,double > > >::reverse_iterator":
        return _cstl.VecVecMapIntDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecMapIntDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_map< int,double > > >::allocator_type":
        return _cstl.VecVecMapIntDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecMapIntDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_map< int,double > > >::iterator":
        return _cstl.VecVecMapIntDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecMapIntDouble_swiginit(self, _cstl.new_VecVecMapIntDouble(*args))

    def push_back(self, x: "VecMapIntDouble") -> "void":
        return _cstl.VecVecMapIntDouble_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_map< int,double > > >::value_type const &":
        return _cstl.VecVecMapIntDouble_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_map< int,double > > >::value_type const &":
        return _cstl.VecVecMapIntDouble_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_map< int,double > > >::size_type", x: "VecMapIntDouble") -> "void":
        return _cstl.VecVecMapIntDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecMapIntDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecMapIntDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_map< int,double > > >::size_type") -> "void":
        return _cstl.VecVecMapIntDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_map< int,double > > >::size_type":
        return _cstl.VecVecMapIntDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecMapIntDouble

# Register VecVecMapIntDouble in _cstl:
_cstl.VecVecMapIntDouble_swigregister(VecVecMapIntDouble)

class VecVecMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecMapIntBool___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_map< int,bool > > >::size_type":
        return _cstl.VecVecMapIntBool___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_map< int,bool > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< int,bool > > >::difference_type") -> "std::vector< std::vector< std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > >,std::allocator< std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > > > >,std::allocator< std::vector< std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > >,std::allocator< std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > > > > > > *":
        return _cstl.VecVecMapIntBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecMapIntBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_map< int,bool > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< int,bool > > >::difference_type") -> "void":
        return _cstl.VecVecMapIntBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecMapIntBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_map< int,bool > > >::value_type const &":
        return _cstl.VecVecMapIntBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecMapIntBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_map< int,bool > > >::value_type":
        return _cstl.VecVecMapIntBool_pop(self)

    def append(self, x: "VecMapIntBool") -> "void":
        return _cstl.VecVecMapIntBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecMapIntBool_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_map< int,bool > > >::size_type":
        return _cstl.VecVecMapIntBool_size(self)

    def swap(self, v: "VecVecMapIntBool") -> "void":
        return _cstl.VecVecMapIntBool_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_map< int,bool > > >::iterator":
        return _cstl.VecVecMapIntBool_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_map< int,bool > > >::iterator":
        return _cstl.VecVecMapIntBool_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_map< int,bool > > >::reverse_iterator":
        return _cstl.VecVecMapIntBool_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_map< int,bool > > >::reverse_iterator":
        return _cstl.VecVecMapIntBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecMapIntBool_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_map< int,bool > > >::allocator_type":
        return _cstl.VecVecMapIntBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecMapIntBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_map< int,bool > > >::iterator":
        return _cstl.VecVecMapIntBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecMapIntBool_swiginit(self, _cstl.new_VecVecMapIntBool(*args))

    def push_back(self, x: "VecMapIntBool") -> "void":
        return _cstl.VecVecMapIntBool_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_map< int,bool > > >::value_type const &":
        return _cstl.VecVecMapIntBool_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_map< int,bool > > >::value_type const &":
        return _cstl.VecVecMapIntBool_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_map< int,bool > > >::size_type", x: "VecMapIntBool") -> "void":
        return _cstl.VecVecMapIntBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecMapIntBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecMapIntBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_map< int,bool > > >::size_type") -> "void":
        return _cstl.VecVecMapIntBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_map< int,bool > > >::size_type":
        return _cstl.VecVecMapIntBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecMapIntBool

# Register VecVecMapIntBool in _cstl:
_cstl.VecVecMapIntBool_swigregister(VecVecMapIntBool)

class VecVecMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecMapIntLong___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.VecVecMapIntLong___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::difference_type") -> "std::vector< std::vector< std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > >,std::allocator< std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > > > >,std::allocator< std::vector< std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > >,std::allocator< std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > > > > > > *":
        return _cstl.VecVecMapIntLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecMapIntLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecVecMapIntLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecMapIntLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::value_type const &":
        return _cstl.VecVecMapIntLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecMapIntLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::value_type":
        return _cstl.VecVecMapIntLong_pop(self)

    def append(self, x: "VecMapIntLong") -> "void":
        return _cstl.VecVecMapIntLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecMapIntLong_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.VecVecMapIntLong_size(self)

    def swap(self, v: "VecVecMapIntLong") -> "void":
        return _cstl.VecVecMapIntLong_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.VecVecMapIntLong_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.VecVecMapIntLong_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::reverse_iterator":
        return _cstl.VecVecMapIntLong_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::reverse_iterator":
        return _cstl.VecVecMapIntLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecMapIntLong_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::allocator_type":
        return _cstl.VecVecMapIntLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecMapIntLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.VecVecMapIntLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecMapIntLong_swiginit(self, _cstl.new_VecVecMapIntLong(*args))

    def push_back(self, x: "VecMapIntLong") -> "void":
        return _cstl.VecVecMapIntLong_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::value_type const &":
        return _cstl.VecVecMapIntLong_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::value_type const &":
        return _cstl.VecVecMapIntLong_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::size_type", x: "VecMapIntLong") -> "void":
        return _cstl.VecVecMapIntLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecMapIntLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecMapIntLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::size_type") -> "void":
        return _cstl.VecVecMapIntLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.VecVecMapIntLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecMapIntLong

# Register VecVecMapIntLong in _cstl:
_cstl.VecVecMapIntLong_swigregister(VecVecMapIntLong)

class VecVecMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecMapStrInt___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_map< std::string,int > > >::size_type":
        return _cstl.VecVecMapStrInt___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_map< std::string,int > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::string,int > > >::difference_type") -> "std::vector< std::vector< std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > >,std::allocator< std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > > > >,std::allocator< std::vector< std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > >,std::allocator< std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > > > > > > *":
        return _cstl.VecVecMapStrInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecMapStrInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_map< std::string,int > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::string,int > > >::difference_type") -> "void":
        return _cstl.VecVecMapStrInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecMapStrInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_map< std::string,int > > >::value_type const &":
        return _cstl.VecVecMapStrInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecMapStrInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_map< std::string,int > > >::value_type":
        return _cstl.VecVecMapStrInt_pop(self)

    def append(self, x: "VecMapStrInt") -> "void":
        return _cstl.VecVecMapStrInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecMapStrInt_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_map< std::string,int > > >::size_type":
        return _cstl.VecVecMapStrInt_size(self)

    def swap(self, v: "VecVecMapStrInt") -> "void":
        return _cstl.VecVecMapStrInt_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_map< std::string,int > > >::iterator":
        return _cstl.VecVecMapStrInt_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_map< std::string,int > > >::iterator":
        return _cstl.VecVecMapStrInt_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_map< std::string,int > > >::reverse_iterator":
        return _cstl.VecVecMapStrInt_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_map< std::string,int > > >::reverse_iterator":
        return _cstl.VecVecMapStrInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecMapStrInt_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_map< std::string,int > > >::allocator_type":
        return _cstl.VecVecMapStrInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecMapStrInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_map< std::string,int > > >::iterator":
        return _cstl.VecVecMapStrInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecMapStrInt_swiginit(self, _cstl.new_VecVecMapStrInt(*args))

    def push_back(self, x: "VecMapStrInt") -> "void":
        return _cstl.VecVecMapStrInt_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_map< std::string,int > > >::value_type const &":
        return _cstl.VecVecMapStrInt_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_map< std::string,int > > >::value_type const &":
        return _cstl.VecVecMapStrInt_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_map< std::string,int > > >::size_type", x: "VecMapStrInt") -> "void":
        return _cstl.VecVecMapStrInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecMapStrInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecMapStrInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_map< std::string,int > > >::size_type") -> "void":
        return _cstl.VecVecMapStrInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_map< std::string,int > > >::size_type":
        return _cstl.VecVecMapStrInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecMapStrInt

# Register VecVecMapStrInt in _cstl:
_cstl.VecVecMapStrInt_swigregister(VecVecMapStrInt)

class VecVecMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecMapStrStr___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.VecVecMapStrStr___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::difference_type") -> "std::vector< std::vector< std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > >,std::allocator< std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > > > >,std::allocator< std::vector< std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > >,std::allocator< std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > > > > > > *":
        return _cstl.VecVecMapStrStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecMapStrStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::difference_type") -> "void":
        return _cstl.VecVecMapStrStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecMapStrStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::value_type const &":
        return _cstl.VecVecMapStrStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecMapStrStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::value_type":
        return _cstl.VecVecMapStrStr_pop(self)

    def append(self, x: "VecMapStrStr") -> "void":
        return _cstl.VecVecMapStrStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecMapStrStr_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.VecVecMapStrStr_size(self)

    def swap(self, v: "VecVecMapStrStr") -> "void":
        return _cstl.VecVecMapStrStr_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.VecVecMapStrStr_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.VecVecMapStrStr_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::reverse_iterator":
        return _cstl.VecVecMapStrStr_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::reverse_iterator":
        return _cstl.VecVecMapStrStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecMapStrStr_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::allocator_type":
        return _cstl.VecVecMapStrStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecMapStrStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.VecVecMapStrStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecMapStrStr_swiginit(self, _cstl.new_VecVecMapStrStr(*args))

    def push_back(self, x: "VecMapStrStr") -> "void":
        return _cstl.VecVecMapStrStr_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::value_type const &":
        return _cstl.VecVecMapStrStr_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::value_type const &":
        return _cstl.VecVecMapStrStr_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::size_type", x: "VecMapStrStr") -> "void":
        return _cstl.VecVecMapStrStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecMapStrStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecMapStrStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::size_type") -> "void":
        return _cstl.VecVecMapStrStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.VecVecMapStrStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecMapStrStr

# Register VecVecMapStrStr in _cstl:
_cstl.VecVecMapStrStr_swigregister(VecVecMapStrStr)

class VecVecMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecMapStrFloat___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_map< std::string,float > > >::size_type":
        return _cstl.VecVecMapStrFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_map< std::string,float > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::string,float > > >::difference_type") -> "std::vector< std::vector< std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > >,std::allocator< std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > > > >,std::allocator< std::vector< std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > >,std::allocator< std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > > > > > > *":
        return _cstl.VecVecMapStrFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecMapStrFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_map< std::string,float > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::string,float > > >::difference_type") -> "void":
        return _cstl.VecVecMapStrFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecMapStrFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_map< std::string,float > > >::value_type const &":
        return _cstl.VecVecMapStrFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecMapStrFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_map< std::string,float > > >::value_type":
        return _cstl.VecVecMapStrFloat_pop(self)

    def append(self, x: "VecMapStrFloat") -> "void":
        return _cstl.VecVecMapStrFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecMapStrFloat_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_map< std::string,float > > >::size_type":
        return _cstl.VecVecMapStrFloat_size(self)

    def swap(self, v: "VecVecMapStrFloat") -> "void":
        return _cstl.VecVecMapStrFloat_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_map< std::string,float > > >::iterator":
        return _cstl.VecVecMapStrFloat_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_map< std::string,float > > >::iterator":
        return _cstl.VecVecMapStrFloat_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_map< std::string,float > > >::reverse_iterator":
        return _cstl.VecVecMapStrFloat_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_map< std::string,float > > >::reverse_iterator":
        return _cstl.VecVecMapStrFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecMapStrFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_map< std::string,float > > >::allocator_type":
        return _cstl.VecVecMapStrFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecMapStrFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_map< std::string,float > > >::iterator":
        return _cstl.VecVecMapStrFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecMapStrFloat_swiginit(self, _cstl.new_VecVecMapStrFloat(*args))

    def push_back(self, x: "VecMapStrFloat") -> "void":
        return _cstl.VecVecMapStrFloat_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_map< std::string,float > > >::value_type const &":
        return _cstl.VecVecMapStrFloat_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_map< std::string,float > > >::value_type const &":
        return _cstl.VecVecMapStrFloat_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_map< std::string,float > > >::size_type", x: "VecMapStrFloat") -> "void":
        return _cstl.VecVecMapStrFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecMapStrFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecMapStrFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_map< std::string,float > > >::size_type") -> "void":
        return _cstl.VecVecMapStrFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_map< std::string,float > > >::size_type":
        return _cstl.VecVecMapStrFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecMapStrFloat

# Register VecVecMapStrFloat in _cstl:
_cstl.VecVecMapStrFloat_swigregister(VecVecMapStrFloat)

class VecVecMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecMapStrDouble___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_map< std::string,double > > >::size_type":
        return _cstl.VecVecMapStrDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_map< std::string,double > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::string,double > > >::difference_type") -> "std::vector< std::vector< std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > >,std::allocator< std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > > > >,std::allocator< std::vector< std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > >,std::allocator< std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > > > > > > *":
        return _cstl.VecVecMapStrDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecMapStrDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_map< std::string,double > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::string,double > > >::difference_type") -> "void":
        return _cstl.VecVecMapStrDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecMapStrDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_map< std::string,double > > >::value_type const &":
        return _cstl.VecVecMapStrDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecMapStrDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_map< std::string,double > > >::value_type":
        return _cstl.VecVecMapStrDouble_pop(self)

    def append(self, x: "VecMapStrDouble") -> "void":
        return _cstl.VecVecMapStrDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecMapStrDouble_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_map< std::string,double > > >::size_type":
        return _cstl.VecVecMapStrDouble_size(self)

    def swap(self, v: "VecVecMapStrDouble") -> "void":
        return _cstl.VecVecMapStrDouble_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_map< std::string,double > > >::iterator":
        return _cstl.VecVecMapStrDouble_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_map< std::string,double > > >::iterator":
        return _cstl.VecVecMapStrDouble_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_map< std::string,double > > >::reverse_iterator":
        return _cstl.VecVecMapStrDouble_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_map< std::string,double > > >::reverse_iterator":
        return _cstl.VecVecMapStrDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecMapStrDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_map< std::string,double > > >::allocator_type":
        return _cstl.VecVecMapStrDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecMapStrDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_map< std::string,double > > >::iterator":
        return _cstl.VecVecMapStrDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecMapStrDouble_swiginit(self, _cstl.new_VecVecMapStrDouble(*args))

    def push_back(self, x: "VecMapStrDouble") -> "void":
        return _cstl.VecVecMapStrDouble_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_map< std::string,double > > >::value_type const &":
        return _cstl.VecVecMapStrDouble_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_map< std::string,double > > >::value_type const &":
        return _cstl.VecVecMapStrDouble_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_map< std::string,double > > >::size_type", x: "VecMapStrDouble") -> "void":
        return _cstl.VecVecMapStrDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecMapStrDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecMapStrDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_map< std::string,double > > >::size_type") -> "void":
        return _cstl.VecVecMapStrDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_map< std::string,double > > >::size_type":
        return _cstl.VecVecMapStrDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecMapStrDouble

# Register VecVecMapStrDouble in _cstl:
_cstl.VecVecMapStrDouble_swigregister(VecVecMapStrDouble)

class VecVecMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecMapStrBool___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.VecVecMapStrBool___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_map< std::string,bool > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::string,bool > > >::difference_type") -> "std::vector< std::vector< std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > >,std::allocator< std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > > > >,std::allocator< std::vector< std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > >,std::allocator< std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > > > > > > *":
        return _cstl.VecVecMapStrBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecMapStrBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_map< std::string,bool > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::string,bool > > >::difference_type") -> "void":
        return _cstl.VecVecMapStrBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecMapStrBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_map< std::string,bool > > >::value_type const &":
        return _cstl.VecVecMapStrBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecMapStrBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_map< std::string,bool > > >::value_type":
        return _cstl.VecVecMapStrBool_pop(self)

    def append(self, x: "VecMapStrBool") -> "void":
        return _cstl.VecVecMapStrBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecMapStrBool_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.VecVecMapStrBool_size(self)

    def swap(self, v: "VecVecMapStrBool") -> "void":
        return _cstl.VecVecMapStrBool_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.VecVecMapStrBool_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.VecVecMapStrBool_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_map< std::string,bool > > >::reverse_iterator":
        return _cstl.VecVecMapStrBool_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_map< std::string,bool > > >::reverse_iterator":
        return _cstl.VecVecMapStrBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecMapStrBool_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_map< std::string,bool > > >::allocator_type":
        return _cstl.VecVecMapStrBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecMapStrBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.VecVecMapStrBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecMapStrBool_swiginit(self, _cstl.new_VecVecMapStrBool(*args))

    def push_back(self, x: "VecMapStrBool") -> "void":
        return _cstl.VecVecMapStrBool_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_map< std::string,bool > > >::value_type const &":
        return _cstl.VecVecMapStrBool_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_map< std::string,bool > > >::value_type const &":
        return _cstl.VecVecMapStrBool_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_map< std::string,bool > > >::size_type", x: "VecMapStrBool") -> "void":
        return _cstl.VecVecMapStrBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecMapStrBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecMapStrBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_map< std::string,bool > > >::size_type") -> "void":
        return _cstl.VecVecMapStrBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.VecVecMapStrBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecMapStrBool

# Register VecVecMapStrBool in _cstl:
_cstl.VecVecMapStrBool_swigregister(VecVecMapStrBool)

class VecVecMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecMapStrLong___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.VecVecMapStrLong___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::difference_type") -> "std::vector< std::vector< std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > >,std::allocator< std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > > > >,std::allocator< std::vector< std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > >,std::allocator< std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > > > > > > *":
        return _cstl.VecVecMapStrLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecMapStrLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecVecMapStrLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecMapStrLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::value_type const &":
        return _cstl.VecVecMapStrLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecMapStrLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::value_type":
        return _cstl.VecVecMapStrLong_pop(self)

    def append(self, x: "VecMapStrLong") -> "void":
        return _cstl.VecVecMapStrLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecMapStrLong_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.VecVecMapStrLong_size(self)

    def swap(self, v: "VecVecMapStrLong") -> "void":
        return _cstl.VecVecMapStrLong_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.VecVecMapStrLong_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.VecVecMapStrLong_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::reverse_iterator":
        return _cstl.VecVecMapStrLong_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::reverse_iterator":
        return _cstl.VecVecMapStrLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecMapStrLong_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::allocator_type":
        return _cstl.VecVecMapStrLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecMapStrLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.VecVecMapStrLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecMapStrLong_swiginit(self, _cstl.new_VecVecMapStrLong(*args))

    def push_back(self, x: "VecMapStrLong") -> "void":
        return _cstl.VecVecMapStrLong_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::value_type const &":
        return _cstl.VecVecMapStrLong_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::value_type const &":
        return _cstl.VecVecMapStrLong_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::size_type", x: "VecMapStrLong") -> "void":
        return _cstl.VecVecMapStrLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecMapStrLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecMapStrLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::size_type") -> "void":
        return _cstl.VecVecMapStrLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.VecVecMapStrLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecMapStrLong

# Register VecVecMapStrLong in _cstl:
_cstl.VecVecMapStrLong_swigregister(VecVecMapStrLong)

class VecVecMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecMapLongInt___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.VecVecMapLongInt___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::difference_type") -> "std::vector< std::vector< std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > >,std::allocator< std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > > > >,std::allocator< std::vector< std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > >,std::allocator< std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > > > > > > *":
        return _cstl.VecVecMapLongInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecMapLongInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::difference_type") -> "void":
        return _cstl.VecVecMapLongInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecMapLongInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::value_type const &":
        return _cstl.VecVecMapLongInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecMapLongInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::value_type":
        return _cstl.VecVecMapLongInt_pop(self)

    def append(self, x: "VecMapLongInt") -> "void":
        return _cstl.VecVecMapLongInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecMapLongInt_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.VecVecMapLongInt_size(self)

    def swap(self, v: "VecVecMapLongInt") -> "void":
        return _cstl.VecVecMapLongInt_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.VecVecMapLongInt_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.VecVecMapLongInt_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::reverse_iterator":
        return _cstl.VecVecMapLongInt_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::reverse_iterator":
        return _cstl.VecVecMapLongInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecMapLongInt_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::allocator_type":
        return _cstl.VecVecMapLongInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecMapLongInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.VecVecMapLongInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecMapLongInt_swiginit(self, _cstl.new_VecVecMapLongInt(*args))

    def push_back(self, x: "VecMapLongInt") -> "void":
        return _cstl.VecVecMapLongInt_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::value_type const &":
        return _cstl.VecVecMapLongInt_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::value_type const &":
        return _cstl.VecVecMapLongInt_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::size_type", x: "VecMapLongInt") -> "void":
        return _cstl.VecVecMapLongInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecMapLongInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecMapLongInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::size_type") -> "void":
        return _cstl.VecVecMapLongInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.VecVecMapLongInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecMapLongInt

# Register VecVecMapLongInt in _cstl:
_cstl.VecVecMapLongInt_swigregister(VecVecMapLongInt)

class VecVecMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecMapLongStr___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.VecVecMapLongStr___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::difference_type") -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > >,std::allocator< std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > > > >,std::allocator< std::vector< std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > >,std::allocator< std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > > > > > > *":
        return _cstl.VecVecMapLongStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecMapLongStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::difference_type") -> "void":
        return _cstl.VecVecMapLongStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecMapLongStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::value_type const &":
        return _cstl.VecVecMapLongStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecMapLongStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::value_type":
        return _cstl.VecVecMapLongStr_pop(self)

    def append(self, x: "VecMapLongStr") -> "void":
        return _cstl.VecVecMapLongStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecMapLongStr_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.VecVecMapLongStr_size(self)

    def swap(self, v: "VecVecMapLongStr") -> "void":
        return _cstl.VecVecMapLongStr_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.VecVecMapLongStr_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.VecVecMapLongStr_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::reverse_iterator":
        return _cstl.VecVecMapLongStr_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::reverse_iterator":
        return _cstl.VecVecMapLongStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecMapLongStr_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::allocator_type":
        return _cstl.VecVecMapLongStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecMapLongStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.VecVecMapLongStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecMapLongStr_swiginit(self, _cstl.new_VecVecMapLongStr(*args))

    def push_back(self, x: "VecMapLongStr") -> "void":
        return _cstl.VecVecMapLongStr_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::value_type const &":
        return _cstl.VecVecMapLongStr_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::value_type const &":
        return _cstl.VecVecMapLongStr_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::size_type", x: "VecMapLongStr") -> "void":
        return _cstl.VecVecMapLongStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecMapLongStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecMapLongStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::size_type") -> "void":
        return _cstl.VecVecMapLongStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.VecVecMapLongStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecMapLongStr

# Register VecVecMapLongStr in _cstl:
_cstl.VecVecMapLongStr_swigregister(VecVecMapLongStr)

class VecVecMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecMapLongFloat___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.VecVecMapLongFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::difference_type") -> "std::vector< std::vector< std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > >,std::allocator< std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > > > >,std::allocator< std::vector< std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > >,std::allocator< std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > > > > > > *":
        return _cstl.VecVecMapLongFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecMapLongFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::difference_type") -> "void":
        return _cstl.VecVecMapLongFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecMapLongFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::value_type const &":
        return _cstl.VecVecMapLongFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecMapLongFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::value_type":
        return _cstl.VecVecMapLongFloat_pop(self)

    def append(self, x: "VecMapLongFloat") -> "void":
        return _cstl.VecVecMapLongFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecMapLongFloat_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.VecVecMapLongFloat_size(self)

    def swap(self, v: "VecVecMapLongFloat") -> "void":
        return _cstl.VecVecMapLongFloat_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.VecVecMapLongFloat_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.VecVecMapLongFloat_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::reverse_iterator":
        return _cstl.VecVecMapLongFloat_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::reverse_iterator":
        return _cstl.VecVecMapLongFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecMapLongFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::allocator_type":
        return _cstl.VecVecMapLongFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecMapLongFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.VecVecMapLongFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecMapLongFloat_swiginit(self, _cstl.new_VecVecMapLongFloat(*args))

    def push_back(self, x: "VecMapLongFloat") -> "void":
        return _cstl.VecVecMapLongFloat_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::value_type const &":
        return _cstl.VecVecMapLongFloat_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::value_type const &":
        return _cstl.VecVecMapLongFloat_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::size_type", x: "VecMapLongFloat") -> "void":
        return _cstl.VecVecMapLongFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecMapLongFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecMapLongFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::size_type") -> "void":
        return _cstl.VecVecMapLongFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.VecVecMapLongFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecMapLongFloat

# Register VecVecMapLongFloat in _cstl:
_cstl.VecVecMapLongFloat_swigregister(VecVecMapLongFloat)

class VecVecMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecMapLongDouble___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.VecVecMapLongDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::difference_type") -> "std::vector< std::vector< std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > >,std::allocator< std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > > > >,std::allocator< std::vector< std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > >,std::allocator< std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > > > > > > *":
        return _cstl.VecVecMapLongDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecMapLongDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::difference_type") -> "void":
        return _cstl.VecVecMapLongDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecMapLongDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::value_type const &":
        return _cstl.VecVecMapLongDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecMapLongDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::value_type":
        return _cstl.VecVecMapLongDouble_pop(self)

    def append(self, x: "VecMapLongDouble") -> "void":
        return _cstl.VecVecMapLongDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecMapLongDouble_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.VecVecMapLongDouble_size(self)

    def swap(self, v: "VecVecMapLongDouble") -> "void":
        return _cstl.VecVecMapLongDouble_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.VecVecMapLongDouble_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.VecVecMapLongDouble_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::reverse_iterator":
        return _cstl.VecVecMapLongDouble_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::reverse_iterator":
        return _cstl.VecVecMapLongDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecMapLongDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::allocator_type":
        return _cstl.VecVecMapLongDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecMapLongDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.VecVecMapLongDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecMapLongDouble_swiginit(self, _cstl.new_VecVecMapLongDouble(*args))

    def push_back(self, x: "VecMapLongDouble") -> "void":
        return _cstl.VecVecMapLongDouble_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::value_type const &":
        return _cstl.VecVecMapLongDouble_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::value_type const &":
        return _cstl.VecVecMapLongDouble_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::size_type", x: "VecMapLongDouble") -> "void":
        return _cstl.VecVecMapLongDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecMapLongDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecMapLongDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::size_type") -> "void":
        return _cstl.VecVecMapLongDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.VecVecMapLongDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecMapLongDouble

# Register VecVecMapLongDouble in _cstl:
_cstl.VecVecMapLongDouble_swigregister(VecVecMapLongDouble)

class VecVecMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecMapLongBool___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.VecVecMapLongBool___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::difference_type") -> "std::vector< std::vector< std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > >,std::allocator< std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > > > >,std::allocator< std::vector< std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > >,std::allocator< std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > > > > > > *":
        return _cstl.VecVecMapLongBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecMapLongBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::difference_type") -> "void":
        return _cstl.VecVecMapLongBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecMapLongBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::value_type const &":
        return _cstl.VecVecMapLongBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecMapLongBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::value_type":
        return _cstl.VecVecMapLongBool_pop(self)

    def append(self, x: "VecMapLongBool") -> "void":
        return _cstl.VecVecMapLongBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecMapLongBool_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.VecVecMapLongBool_size(self)

    def swap(self, v: "VecVecMapLongBool") -> "void":
        return _cstl.VecVecMapLongBool_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.VecVecMapLongBool_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.VecVecMapLongBool_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::reverse_iterator":
        return _cstl.VecVecMapLongBool_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::reverse_iterator":
        return _cstl.VecVecMapLongBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecMapLongBool_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::allocator_type":
        return _cstl.VecVecMapLongBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecMapLongBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.VecVecMapLongBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecMapLongBool_swiginit(self, _cstl.new_VecVecMapLongBool(*args))

    def push_back(self, x: "VecMapLongBool") -> "void":
        return _cstl.VecVecMapLongBool_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::value_type const &":
        return _cstl.VecVecMapLongBool_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::value_type const &":
        return _cstl.VecVecMapLongBool_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::size_type", x: "VecMapLongBool") -> "void":
        return _cstl.VecVecMapLongBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecMapLongBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecMapLongBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::size_type") -> "void":
        return _cstl.VecVecMapLongBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.VecVecMapLongBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecMapLongBool

# Register VecVecMapLongBool in _cstl:
_cstl.VecVecMapLongBool_swigregister(VecVecMapLongBool)

class VecVecMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecVecMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecVecMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecVecMapLongLong___bool__(self)

    def __len__(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.VecVecMapLongLong___len__(self)

    def __getslice__(self, i: "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::difference_type") -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > >,std::allocator< std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > > > >,std::allocator< std::vector< std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > >,std::allocator< std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > > > > > > *":
        return _cstl.VecVecMapLongLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecVecMapLongLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::difference_type", j: "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecVecMapLongLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecVecMapLongLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::value_type const &":
        return _cstl.VecVecMapLongLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecVecMapLongLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::value_type":
        return _cstl.VecVecMapLongLong_pop(self)

    def append(self, x: "VecMapLongLong") -> "void":
        return _cstl.VecVecMapLongLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecVecMapLongLong_empty(self)

    def size(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.VecVecMapLongLong_size(self)

    def swap(self, v: "VecVecMapLongLong") -> "void":
        return _cstl.VecVecMapLongLong_swap(self, v)

    def begin(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.VecVecMapLongLong_begin(self)

    def end(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.VecVecMapLongLong_end(self)

    def rbegin(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::reverse_iterator":
        return _cstl.VecVecMapLongLong_rbegin(self)

    def rend(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::reverse_iterator":
        return _cstl.VecVecMapLongLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecVecMapLongLong_clear(self)

    def get_allocator(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::allocator_type":
        return _cstl.VecVecMapLongLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecVecMapLongLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.VecVecMapLongLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecVecMapLongLong_swiginit(self, _cstl.new_VecVecMapLongLong(*args))

    def push_back(self, x: "VecMapLongLong") -> "void":
        return _cstl.VecVecMapLongLong_push_back(self, x)

    def front(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::value_type const &":
        return _cstl.VecVecMapLongLong_front(self)

    def back(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::value_type const &":
        return _cstl.VecVecMapLongLong_back(self)

    def assign(self, n: "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::size_type", x: "VecMapLongLong") -> "void":
        return _cstl.VecVecMapLongLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecVecMapLongLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecVecMapLongLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::size_type") -> "void":
        return _cstl.VecVecMapLongLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.VecVecMapLongLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecVecMapLongLong

# Register VecVecMapLongLong in _cstl:
_cstl.VecVecMapLongLong_swigregister(VecVecMapLongLong)

class VecMapIntVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntVecInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::vector< int > > >::size_type":
        return _cstl.VecMapIntVecInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::vector< int > > >::difference_type", j: "std::vector< std::unordered_map< int,std::vector< int > > >::difference_type") -> "std::vector< std::unordered_map< int,std::vector< int,std::allocator< int > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::vector< int,std::allocator< int > > > > >,std::allocator< std::unordered_map< int,std::vector< int,std::allocator< int > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::vector< int,std::allocator< int > > > > > > > *":
        return _cstl.VecMapIntVecInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntVecInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::vector< int > > >::difference_type", j: "std::vector< std::unordered_map< int,std::vector< int > > >::difference_type") -> "void":
        return _cstl.VecMapIntVecInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntVecInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::vector< int > > >::value_type const &":
        return _cstl.VecMapIntVecInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntVecInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::vector< int > > >::value_type":
        return _cstl.VecMapIntVecInt_pop(self)

    def append(self, x: "MapIntVecInt") -> "void":
        return _cstl.VecMapIntVecInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntVecInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::vector< int > > >::size_type":
        return _cstl.VecMapIntVecInt_size(self)

    def swap(self, v: "VecMapIntVecInt") -> "void":
        return _cstl.VecMapIntVecInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::vector< int > > >::iterator":
        return _cstl.VecMapIntVecInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::vector< int > > >::iterator":
        return _cstl.VecMapIntVecInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::vector< int > > >::reverse_iterator":
        return _cstl.VecMapIntVecInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::vector< int > > >::reverse_iterator":
        return _cstl.VecMapIntVecInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntVecInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::vector< int > > >::allocator_type":
        return _cstl.VecMapIntVecInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntVecInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::vector< int > > >::iterator":
        return _cstl.VecMapIntVecInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntVecInt_swiginit(self, _cstl.new_VecMapIntVecInt(*args))

    def push_back(self, x: "MapIntVecInt") -> "void":
        return _cstl.VecMapIntVecInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::vector< int > > >::value_type const &":
        return _cstl.VecMapIntVecInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::vector< int > > >::value_type const &":
        return _cstl.VecMapIntVecInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::vector< int > > >::size_type", x: "MapIntVecInt") -> "void":
        return _cstl.VecMapIntVecInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntVecInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntVecInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::vector< int > > >::size_type") -> "void":
        return _cstl.VecMapIntVecInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::vector< int > > >::size_type":
        return _cstl.VecMapIntVecInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntVecInt

# Register VecMapIntVecInt in _cstl:
_cstl.VecMapIntVecInt_swigregister(VecMapIntVecInt)

class VecMapIntVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntVecStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::vector< std::string > > >::size_type":
        return _cstl.VecMapIntVecStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::vector< std::string > > >::difference_type", j: "std::vector< std::unordered_map< int,std::vector< std::string > > >::difference_type") -> "std::vector< std::unordered_map< int,std::vector< std::string,std::allocator< std::string > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > >,std::allocator< std::unordered_map< int,std::vector< std::string,std::allocator< std::string > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::vector< std::string,std::allocator< std::string > > > > > > > *":
        return _cstl.VecMapIntVecStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntVecStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::vector< std::string > > >::difference_type", j: "std::vector< std::unordered_map< int,std::vector< std::string > > >::difference_type") -> "void":
        return _cstl.VecMapIntVecStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntVecStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::vector< std::string > > >::value_type const &":
        return _cstl.VecMapIntVecStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntVecStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::vector< std::string > > >::value_type":
        return _cstl.VecMapIntVecStr_pop(self)

    def append(self, x: "MapIntVecStr") -> "void":
        return _cstl.VecMapIntVecStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntVecStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::vector< std::string > > >::size_type":
        return _cstl.VecMapIntVecStr_size(self)

    def swap(self, v: "VecMapIntVecStr") -> "void":
        return _cstl.VecMapIntVecStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::vector< std::string > > >::iterator":
        return _cstl.VecMapIntVecStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::vector< std::string > > >::iterator":
        return _cstl.VecMapIntVecStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::vector< std::string > > >::reverse_iterator":
        return _cstl.VecMapIntVecStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::vector< std::string > > >::reverse_iterator":
        return _cstl.VecMapIntVecStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntVecStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::vector< std::string > > >::allocator_type":
        return _cstl.VecMapIntVecStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntVecStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::vector< std::string > > >::iterator":
        return _cstl.VecMapIntVecStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntVecStr_swiginit(self, _cstl.new_VecMapIntVecStr(*args))

    def push_back(self, x: "MapIntVecStr") -> "void":
        return _cstl.VecMapIntVecStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::vector< std::string > > >::value_type const &":
        return _cstl.VecMapIntVecStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::vector< std::string > > >::value_type const &":
        return _cstl.VecMapIntVecStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::vector< std::string > > >::size_type", x: "MapIntVecStr") -> "void":
        return _cstl.VecMapIntVecStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntVecStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntVecStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::vector< std::string > > >::size_type") -> "void":
        return _cstl.VecMapIntVecStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::vector< std::string > > >::size_type":
        return _cstl.VecMapIntVecStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntVecStr

# Register VecMapIntVecStr in _cstl:
_cstl.VecMapIntVecStr_swigregister(VecMapIntVecStr)

class VecMapIntVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntVecFloat___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::vector< float > > >::size_type":
        return _cstl.VecMapIntVecFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::vector< float > > >::difference_type", j: "std::vector< std::unordered_map< int,std::vector< float > > >::difference_type") -> "std::vector< std::unordered_map< int,std::vector< float,std::allocator< float > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::vector< float,std::allocator< float > > > > >,std::allocator< std::unordered_map< int,std::vector< float,std::allocator< float > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::vector< float,std::allocator< float > > > > > > > *":
        return _cstl.VecMapIntVecFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntVecFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::vector< float > > >::difference_type", j: "std::vector< std::unordered_map< int,std::vector< float > > >::difference_type") -> "void":
        return _cstl.VecMapIntVecFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntVecFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::vector< float > > >::value_type const &":
        return _cstl.VecMapIntVecFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntVecFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::vector< float > > >::value_type":
        return _cstl.VecMapIntVecFloat_pop(self)

    def append(self, x: "MapIntVecFloat") -> "void":
        return _cstl.VecMapIntVecFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntVecFloat_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::vector< float > > >::size_type":
        return _cstl.VecMapIntVecFloat_size(self)

    def swap(self, v: "VecMapIntVecFloat") -> "void":
        return _cstl.VecMapIntVecFloat_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::vector< float > > >::iterator":
        return _cstl.VecMapIntVecFloat_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::vector< float > > >::iterator":
        return _cstl.VecMapIntVecFloat_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::vector< float > > >::reverse_iterator":
        return _cstl.VecMapIntVecFloat_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::vector< float > > >::reverse_iterator":
        return _cstl.VecMapIntVecFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntVecFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::vector< float > > >::allocator_type":
        return _cstl.VecMapIntVecFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntVecFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::vector< float > > >::iterator":
        return _cstl.VecMapIntVecFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntVecFloat_swiginit(self, _cstl.new_VecMapIntVecFloat(*args))

    def push_back(self, x: "MapIntVecFloat") -> "void":
        return _cstl.VecMapIntVecFloat_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::vector< float > > >::value_type const &":
        return _cstl.VecMapIntVecFloat_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::vector< float > > >::value_type const &":
        return _cstl.VecMapIntVecFloat_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::vector< float > > >::size_type", x: "MapIntVecFloat") -> "void":
        return _cstl.VecMapIntVecFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntVecFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntVecFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::vector< float > > >::size_type") -> "void":
        return _cstl.VecMapIntVecFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::vector< float > > >::size_type":
        return _cstl.VecMapIntVecFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntVecFloat

# Register VecMapIntVecFloat in _cstl:
_cstl.VecMapIntVecFloat_swigregister(VecMapIntVecFloat)

class VecMapIntVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntVecDouble___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::vector< double > > >::size_type":
        return _cstl.VecMapIntVecDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::vector< double > > >::difference_type", j: "std::vector< std::unordered_map< int,std::vector< double > > >::difference_type") -> "std::vector< std::unordered_map< int,std::vector< double,std::allocator< double > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::vector< double,std::allocator< double > > > > >,std::allocator< std::unordered_map< int,std::vector< double,std::allocator< double > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::vector< double,std::allocator< double > > > > > > > *":
        return _cstl.VecMapIntVecDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntVecDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::vector< double > > >::difference_type", j: "std::vector< std::unordered_map< int,std::vector< double > > >::difference_type") -> "void":
        return _cstl.VecMapIntVecDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntVecDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::vector< double > > >::value_type const &":
        return _cstl.VecMapIntVecDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntVecDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::vector< double > > >::value_type":
        return _cstl.VecMapIntVecDouble_pop(self)

    def append(self, x: "MapIntVecDouble") -> "void":
        return _cstl.VecMapIntVecDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntVecDouble_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::vector< double > > >::size_type":
        return _cstl.VecMapIntVecDouble_size(self)

    def swap(self, v: "VecMapIntVecDouble") -> "void":
        return _cstl.VecMapIntVecDouble_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::vector< double > > >::iterator":
        return _cstl.VecMapIntVecDouble_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::vector< double > > >::iterator":
        return _cstl.VecMapIntVecDouble_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::vector< double > > >::reverse_iterator":
        return _cstl.VecMapIntVecDouble_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::vector< double > > >::reverse_iterator":
        return _cstl.VecMapIntVecDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntVecDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::vector< double > > >::allocator_type":
        return _cstl.VecMapIntVecDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntVecDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::vector< double > > >::iterator":
        return _cstl.VecMapIntVecDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntVecDouble_swiginit(self, _cstl.new_VecMapIntVecDouble(*args))

    def push_back(self, x: "MapIntVecDouble") -> "void":
        return _cstl.VecMapIntVecDouble_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::vector< double > > >::value_type const &":
        return _cstl.VecMapIntVecDouble_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::vector< double > > >::value_type const &":
        return _cstl.VecMapIntVecDouble_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::vector< double > > >::size_type", x: "MapIntVecDouble") -> "void":
        return _cstl.VecMapIntVecDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntVecDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntVecDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::vector< double > > >::size_type") -> "void":
        return _cstl.VecMapIntVecDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::vector< double > > >::size_type":
        return _cstl.VecMapIntVecDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntVecDouble

# Register VecMapIntVecDouble in _cstl:
_cstl.VecMapIntVecDouble_swigregister(VecMapIntVecDouble)

class VecMapIntVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntVecBool___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::vector< bool > > >::size_type":
        return _cstl.VecMapIntVecBool___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::vector< bool > > >::difference_type", j: "std::vector< std::unordered_map< int,std::vector< bool > > >::difference_type") -> "std::vector< std::unordered_map< int,std::vector< bool,std::allocator< bool > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::vector< bool,std::allocator< bool > > > > >,std::allocator< std::unordered_map< int,std::vector< bool,std::allocator< bool > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::vector< bool,std::allocator< bool > > > > > > > *":
        return _cstl.VecMapIntVecBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntVecBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::vector< bool > > >::difference_type", j: "std::vector< std::unordered_map< int,std::vector< bool > > >::difference_type") -> "void":
        return _cstl.VecMapIntVecBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntVecBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::vector< bool > > >::value_type const &":
        return _cstl.VecMapIntVecBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntVecBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::vector< bool > > >::value_type":
        return _cstl.VecMapIntVecBool_pop(self)

    def append(self, x: "MapIntVecBool") -> "void":
        return _cstl.VecMapIntVecBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntVecBool_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::vector< bool > > >::size_type":
        return _cstl.VecMapIntVecBool_size(self)

    def swap(self, v: "VecMapIntVecBool") -> "void":
        return _cstl.VecMapIntVecBool_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::vector< bool > > >::iterator":
        return _cstl.VecMapIntVecBool_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::vector< bool > > >::iterator":
        return _cstl.VecMapIntVecBool_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::vector< bool > > >::reverse_iterator":
        return _cstl.VecMapIntVecBool_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::vector< bool > > >::reverse_iterator":
        return _cstl.VecMapIntVecBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntVecBool_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::vector< bool > > >::allocator_type":
        return _cstl.VecMapIntVecBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntVecBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::vector< bool > > >::iterator":
        return _cstl.VecMapIntVecBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntVecBool_swiginit(self, _cstl.new_VecMapIntVecBool(*args))

    def push_back(self, x: "MapIntVecBool") -> "void":
        return _cstl.VecMapIntVecBool_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::vector< bool > > >::value_type const &":
        return _cstl.VecMapIntVecBool_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::vector< bool > > >::value_type const &":
        return _cstl.VecMapIntVecBool_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::vector< bool > > >::size_type", x: "MapIntVecBool") -> "void":
        return _cstl.VecMapIntVecBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntVecBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntVecBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::vector< bool > > >::size_type") -> "void":
        return _cstl.VecMapIntVecBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::vector< bool > > >::size_type":
        return _cstl.VecMapIntVecBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntVecBool

# Register VecMapIntVecBool in _cstl:
_cstl.VecMapIntVecBool_swigregister(VecMapIntVecBool)

class VecMapIntVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntVecLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::size_type":
        return _cstl.VecMapIntVecLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::difference_type") -> "std::vector< std::unordered_map< int,std::vector< std::int64_t,std::allocator< std::int64_t > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::vector< std::int64_t,std::allocator< std::int64_t > > > > >,std::allocator< std::unordered_map< int,std::vector< std::int64_t,std::allocator< std::int64_t > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::vector< std::int64_t,std::allocator< std::int64_t > > > > > > > *":
        return _cstl.VecMapIntVecLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntVecLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecMapIntVecLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntVecLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::value_type const &":
        return _cstl.VecMapIntVecLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntVecLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::value_type":
        return _cstl.VecMapIntVecLong_pop(self)

    def append(self, x: "MapIntVecLong") -> "void":
        return _cstl.VecMapIntVecLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntVecLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::size_type":
        return _cstl.VecMapIntVecLong_size(self)

    def swap(self, v: "VecMapIntVecLong") -> "void":
        return _cstl.VecMapIntVecLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::iterator":
        return _cstl.VecMapIntVecLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::iterator":
        return _cstl.VecMapIntVecLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapIntVecLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapIntVecLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntVecLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::allocator_type":
        return _cstl.VecMapIntVecLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntVecLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::iterator":
        return _cstl.VecMapIntVecLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntVecLong_swiginit(self, _cstl.new_VecMapIntVecLong(*args))

    def push_back(self, x: "MapIntVecLong") -> "void":
        return _cstl.VecMapIntVecLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::value_type const &":
        return _cstl.VecMapIntVecLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::value_type const &":
        return _cstl.VecMapIntVecLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::size_type", x: "MapIntVecLong") -> "void":
        return _cstl.VecMapIntVecLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntVecLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntVecLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::size_type") -> "void":
        return _cstl.VecMapIntVecLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::vector< std::int64_t > > >::size_type":
        return _cstl.VecMapIntVecLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntVecLong

# Register VecMapIntVecLong in _cstl:
_cstl.VecMapIntVecLong_swigregister(VecMapIntVecLong)

class VecMapIntSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntSetInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_set< int > > >::size_type":
        return _cstl.VecMapIntSetInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_set< int > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_set< int > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > > > > >,std::allocator< std::unordered_map< int,std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > > > > > > > *":
        return _cstl.VecMapIntSetInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntSetInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_set< int > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_set< int > > >::difference_type") -> "void":
        return _cstl.VecMapIntSetInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntSetInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_set< int > > >::value_type const &":
        return _cstl.VecMapIntSetInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntSetInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_set< int > > >::value_type":
        return _cstl.VecMapIntSetInt_pop(self)

    def append(self, x: "MapIntSetInt") -> "void":
        return _cstl.VecMapIntSetInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntSetInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_set< int > > >::size_type":
        return _cstl.VecMapIntSetInt_size(self)

    def swap(self, v: "VecMapIntSetInt") -> "void":
        return _cstl.VecMapIntSetInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_set< int > > >::iterator":
        return _cstl.VecMapIntSetInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_set< int > > >::iterator":
        return _cstl.VecMapIntSetInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_set< int > > >::reverse_iterator":
        return _cstl.VecMapIntSetInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_set< int > > >::reverse_iterator":
        return _cstl.VecMapIntSetInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntSetInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_set< int > > >::allocator_type":
        return _cstl.VecMapIntSetInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntSetInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_set< int > > >::iterator":
        return _cstl.VecMapIntSetInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntSetInt_swiginit(self, _cstl.new_VecMapIntSetInt(*args))

    def push_back(self, x: "MapIntSetInt") -> "void":
        return _cstl.VecMapIntSetInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_set< int > > >::value_type const &":
        return _cstl.VecMapIntSetInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_set< int > > >::value_type const &":
        return _cstl.VecMapIntSetInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_set< int > > >::size_type", x: "MapIntSetInt") -> "void":
        return _cstl.VecMapIntSetInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntSetInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntSetInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_set< int > > >::size_type") -> "void":
        return _cstl.VecMapIntSetInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_set< int > > >::size_type":
        return _cstl.VecMapIntSetInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntSetInt

# Register VecMapIntSetInt in _cstl:
_cstl.VecMapIntSetInt_swigregister(VecMapIntSetInt)

class VecMapIntSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntSetStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::size_type":
        return _cstl.VecMapIntSetStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > > > > >,std::allocator< std::unordered_map< int,std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > > > > > > > *":
        return _cstl.VecMapIntSetStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntSetStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::difference_type") -> "void":
        return _cstl.VecMapIntSetStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntSetStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::value_type const &":
        return _cstl.VecMapIntSetStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntSetStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::value_type":
        return _cstl.VecMapIntSetStr_pop(self)

    def append(self, x: "MapIntSetStr") -> "void":
        return _cstl.VecMapIntSetStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntSetStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::size_type":
        return _cstl.VecMapIntSetStr_size(self)

    def swap(self, v: "VecMapIntSetStr") -> "void":
        return _cstl.VecMapIntSetStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::iterator":
        return _cstl.VecMapIntSetStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::iterator":
        return _cstl.VecMapIntSetStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::reverse_iterator":
        return _cstl.VecMapIntSetStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::reverse_iterator":
        return _cstl.VecMapIntSetStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntSetStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::allocator_type":
        return _cstl.VecMapIntSetStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntSetStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::iterator":
        return _cstl.VecMapIntSetStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntSetStr_swiginit(self, _cstl.new_VecMapIntSetStr(*args))

    def push_back(self, x: "MapIntSetStr") -> "void":
        return _cstl.VecMapIntSetStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::value_type const &":
        return _cstl.VecMapIntSetStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::value_type const &":
        return _cstl.VecMapIntSetStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::size_type", x: "MapIntSetStr") -> "void":
        return _cstl.VecMapIntSetStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntSetStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntSetStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::size_type") -> "void":
        return _cstl.VecMapIntSetStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::string > > >::size_type":
        return _cstl.VecMapIntSetStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntSetStr

# Register VecMapIntSetStr in _cstl:
_cstl.VecMapIntSetStr_swigregister(VecMapIntSetStr)

class VecMapIntSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntSetLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.VecMapIntSetLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > > > > >,std::allocator< std::unordered_map< int,std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > > > > > > > *":
        return _cstl.VecMapIntSetLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntSetLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecMapIntSetLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntSetLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::value_type const &":
        return _cstl.VecMapIntSetLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntSetLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::value_type":
        return _cstl.VecMapIntSetLong_pop(self)

    def append(self, x: "MapIntSetLong") -> "void":
        return _cstl.VecMapIntSetLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntSetLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.VecMapIntSetLong_size(self)

    def swap(self, v: "VecMapIntSetLong") -> "void":
        return _cstl.VecMapIntSetLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.VecMapIntSetLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.VecMapIntSetLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapIntSetLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapIntSetLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntSetLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::allocator_type":
        return _cstl.VecMapIntSetLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntSetLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.VecMapIntSetLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntSetLong_swiginit(self, _cstl.new_VecMapIntSetLong(*args))

    def push_back(self, x: "MapIntSetLong") -> "void":
        return _cstl.VecMapIntSetLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::value_type const &":
        return _cstl.VecMapIntSetLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::value_type const &":
        return _cstl.VecMapIntSetLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::size_type", x: "MapIntSetLong") -> "void":
        return _cstl.VecMapIntSetLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntSetLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntSetLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::size_type") -> "void":
        return _cstl.VecMapIntSetLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.VecMapIntSetLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntSetLong

# Register VecMapIntSetLong in _cstl:
_cstl.VecMapIntSetLong_swigregister(VecMapIntSetLong)

class VecMapIntMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntMapIntInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::size_type":
        return _cstl.VecMapIntMapIntInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > > > > >,std::allocator< std::unordered_map< int,std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > > > > > > > *":
        return _cstl.VecMapIntMapIntInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntMapIntInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::difference_type") -> "void":
        return _cstl.VecMapIntMapIntInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapIntInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::value_type const &":
        return _cstl.VecMapIntMapIntInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapIntInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::value_type":
        return _cstl.VecMapIntMapIntInt_pop(self)

    def append(self, x: "MapIntMapIntInt") -> "void":
        return _cstl.VecMapIntMapIntInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntMapIntInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::size_type":
        return _cstl.VecMapIntMapIntInt_size(self)

    def swap(self, v: "VecMapIntMapIntInt") -> "void":
        return _cstl.VecMapIntMapIntInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::iterator":
        return _cstl.VecMapIntMapIntInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::iterator":
        return _cstl.VecMapIntMapIntInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::reverse_iterator":
        return _cstl.VecMapIntMapIntInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::reverse_iterator":
        return _cstl.VecMapIntMapIntInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntMapIntInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::allocator_type":
        return _cstl.VecMapIntMapIntInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntMapIntInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::iterator":
        return _cstl.VecMapIntMapIntInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntMapIntInt_swiginit(self, _cstl.new_VecMapIntMapIntInt(*args))

    def push_back(self, x: "MapIntMapIntInt") -> "void":
        return _cstl.VecMapIntMapIntInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::value_type const &":
        return _cstl.VecMapIntMapIntInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::value_type const &":
        return _cstl.VecMapIntMapIntInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::size_type", x: "MapIntMapIntInt") -> "void":
        return _cstl.VecMapIntMapIntInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntMapIntInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntMapIntInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::size_type") -> "void":
        return _cstl.VecMapIntMapIntInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,int > > >::size_type":
        return _cstl.VecMapIntMapIntInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntMapIntInt

# Register VecMapIntMapIntInt in _cstl:
_cstl.VecMapIntMapIntInt_swigregister(VecMapIntMapIntInt)

class VecMapIntMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntMapIntStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.VecMapIntMapIntStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > > > > >,std::allocator< std::unordered_map< int,std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > > > > > > > *":
        return _cstl.VecMapIntMapIntStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntMapIntStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::difference_type") -> "void":
        return _cstl.VecMapIntMapIntStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapIntStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::value_type const &":
        return _cstl.VecMapIntMapIntStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapIntStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::value_type":
        return _cstl.VecMapIntMapIntStr_pop(self)

    def append(self, x: "MapIntMapIntStr") -> "void":
        return _cstl.VecMapIntMapIntStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntMapIntStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.VecMapIntMapIntStr_size(self)

    def swap(self, v: "VecMapIntMapIntStr") -> "void":
        return _cstl.VecMapIntMapIntStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.VecMapIntMapIntStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.VecMapIntMapIntStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::reverse_iterator":
        return _cstl.VecMapIntMapIntStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::reverse_iterator":
        return _cstl.VecMapIntMapIntStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntMapIntStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::allocator_type":
        return _cstl.VecMapIntMapIntStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntMapIntStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.VecMapIntMapIntStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntMapIntStr_swiginit(self, _cstl.new_VecMapIntMapIntStr(*args))

    def push_back(self, x: "MapIntMapIntStr") -> "void":
        return _cstl.VecMapIntMapIntStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::value_type const &":
        return _cstl.VecMapIntMapIntStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::value_type const &":
        return _cstl.VecMapIntMapIntStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::size_type", x: "MapIntMapIntStr") -> "void":
        return _cstl.VecMapIntMapIntStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntMapIntStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntMapIntStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::size_type") -> "void":
        return _cstl.VecMapIntMapIntStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.VecMapIntMapIntStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntMapIntStr

# Register VecMapIntMapIntStr in _cstl:
_cstl.VecMapIntMapIntStr_swigregister(VecMapIntMapIntStr)

class VecMapIntMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntMapIntFloat___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::size_type":
        return _cstl.VecMapIntMapIntFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > > > > >,std::allocator< std::unordered_map< int,std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > > > > > > > *":
        return _cstl.VecMapIntMapIntFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntMapIntFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::difference_type") -> "void":
        return _cstl.VecMapIntMapIntFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapIntFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::value_type const &":
        return _cstl.VecMapIntMapIntFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapIntFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::value_type":
        return _cstl.VecMapIntMapIntFloat_pop(self)

    def append(self, x: "MapIntMapIntFloat") -> "void":
        return _cstl.VecMapIntMapIntFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntMapIntFloat_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::size_type":
        return _cstl.VecMapIntMapIntFloat_size(self)

    def swap(self, v: "VecMapIntMapIntFloat") -> "void":
        return _cstl.VecMapIntMapIntFloat_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::iterator":
        return _cstl.VecMapIntMapIntFloat_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::iterator":
        return _cstl.VecMapIntMapIntFloat_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::reverse_iterator":
        return _cstl.VecMapIntMapIntFloat_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::reverse_iterator":
        return _cstl.VecMapIntMapIntFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntMapIntFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::allocator_type":
        return _cstl.VecMapIntMapIntFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntMapIntFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::iterator":
        return _cstl.VecMapIntMapIntFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntMapIntFloat_swiginit(self, _cstl.new_VecMapIntMapIntFloat(*args))

    def push_back(self, x: "MapIntMapIntFloat") -> "void":
        return _cstl.VecMapIntMapIntFloat_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::value_type const &":
        return _cstl.VecMapIntMapIntFloat_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::value_type const &":
        return _cstl.VecMapIntMapIntFloat_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::size_type", x: "MapIntMapIntFloat") -> "void":
        return _cstl.VecMapIntMapIntFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntMapIntFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntMapIntFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::size_type") -> "void":
        return _cstl.VecMapIntMapIntFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,float > > >::size_type":
        return _cstl.VecMapIntMapIntFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntMapIntFloat

# Register VecMapIntMapIntFloat in _cstl:
_cstl.VecMapIntMapIntFloat_swigregister(VecMapIntMapIntFloat)

class VecMapIntMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntMapIntDouble___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::size_type":
        return _cstl.VecMapIntMapIntDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > > > > >,std::allocator< std::unordered_map< int,std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > > > > > > > *":
        return _cstl.VecMapIntMapIntDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntMapIntDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::difference_type") -> "void":
        return _cstl.VecMapIntMapIntDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapIntDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::value_type const &":
        return _cstl.VecMapIntMapIntDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapIntDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::value_type":
        return _cstl.VecMapIntMapIntDouble_pop(self)

    def append(self, x: "MapIntMapIntDouble") -> "void":
        return _cstl.VecMapIntMapIntDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntMapIntDouble_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::size_type":
        return _cstl.VecMapIntMapIntDouble_size(self)

    def swap(self, v: "VecMapIntMapIntDouble") -> "void":
        return _cstl.VecMapIntMapIntDouble_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::iterator":
        return _cstl.VecMapIntMapIntDouble_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::iterator":
        return _cstl.VecMapIntMapIntDouble_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::reverse_iterator":
        return _cstl.VecMapIntMapIntDouble_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::reverse_iterator":
        return _cstl.VecMapIntMapIntDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntMapIntDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::allocator_type":
        return _cstl.VecMapIntMapIntDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntMapIntDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::iterator":
        return _cstl.VecMapIntMapIntDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntMapIntDouble_swiginit(self, _cstl.new_VecMapIntMapIntDouble(*args))

    def push_back(self, x: "MapIntMapIntDouble") -> "void":
        return _cstl.VecMapIntMapIntDouble_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::value_type const &":
        return _cstl.VecMapIntMapIntDouble_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::value_type const &":
        return _cstl.VecMapIntMapIntDouble_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::size_type", x: "MapIntMapIntDouble") -> "void":
        return _cstl.VecMapIntMapIntDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntMapIntDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntMapIntDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::size_type") -> "void":
        return _cstl.VecMapIntMapIntDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,double > > >::size_type":
        return _cstl.VecMapIntMapIntDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntMapIntDouble

# Register VecMapIntMapIntDouble in _cstl:
_cstl.VecMapIntMapIntDouble_swigregister(VecMapIntMapIntDouble)

class VecMapIntMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntMapIntBool___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::size_type":
        return _cstl.VecMapIntMapIntBool___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > > > > >,std::allocator< std::unordered_map< int,std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > > > > > > > *":
        return _cstl.VecMapIntMapIntBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntMapIntBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::difference_type") -> "void":
        return _cstl.VecMapIntMapIntBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapIntBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::value_type const &":
        return _cstl.VecMapIntMapIntBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapIntBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::value_type":
        return _cstl.VecMapIntMapIntBool_pop(self)

    def append(self, x: "MapIntMapIntBool") -> "void":
        return _cstl.VecMapIntMapIntBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntMapIntBool_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::size_type":
        return _cstl.VecMapIntMapIntBool_size(self)

    def swap(self, v: "VecMapIntMapIntBool") -> "void":
        return _cstl.VecMapIntMapIntBool_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::iterator":
        return _cstl.VecMapIntMapIntBool_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::iterator":
        return _cstl.VecMapIntMapIntBool_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::reverse_iterator":
        return _cstl.VecMapIntMapIntBool_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::reverse_iterator":
        return _cstl.VecMapIntMapIntBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntMapIntBool_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::allocator_type":
        return _cstl.VecMapIntMapIntBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntMapIntBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::iterator":
        return _cstl.VecMapIntMapIntBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntMapIntBool_swiginit(self, _cstl.new_VecMapIntMapIntBool(*args))

    def push_back(self, x: "MapIntMapIntBool") -> "void":
        return _cstl.VecMapIntMapIntBool_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::value_type const &":
        return _cstl.VecMapIntMapIntBool_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::value_type const &":
        return _cstl.VecMapIntMapIntBool_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::size_type", x: "MapIntMapIntBool") -> "void":
        return _cstl.VecMapIntMapIntBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntMapIntBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntMapIntBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::size_type") -> "void":
        return _cstl.VecMapIntMapIntBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,bool > > >::size_type":
        return _cstl.VecMapIntMapIntBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntMapIntBool

# Register VecMapIntMapIntBool in _cstl:
_cstl.VecMapIntMapIntBool_swigregister(VecMapIntMapIntBool)

class VecMapIntMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntMapIntLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.VecMapIntMapIntLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > > > > >,std::allocator< std::unordered_map< int,std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > > > > > > > *":
        return _cstl.VecMapIntMapIntLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntMapIntLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecMapIntMapIntLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapIntLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::value_type const &":
        return _cstl.VecMapIntMapIntLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapIntLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::value_type":
        return _cstl.VecMapIntMapIntLong_pop(self)

    def append(self, x: "MapIntMapIntLong") -> "void":
        return _cstl.VecMapIntMapIntLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntMapIntLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.VecMapIntMapIntLong_size(self)

    def swap(self, v: "VecMapIntMapIntLong") -> "void":
        return _cstl.VecMapIntMapIntLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.VecMapIntMapIntLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.VecMapIntMapIntLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapIntMapIntLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapIntMapIntLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntMapIntLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::allocator_type":
        return _cstl.VecMapIntMapIntLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntMapIntLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.VecMapIntMapIntLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntMapIntLong_swiginit(self, _cstl.new_VecMapIntMapIntLong(*args))

    def push_back(self, x: "MapIntMapIntLong") -> "void":
        return _cstl.VecMapIntMapIntLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::value_type const &":
        return _cstl.VecMapIntMapIntLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::value_type const &":
        return _cstl.VecMapIntMapIntLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::size_type", x: "MapIntMapIntLong") -> "void":
        return _cstl.VecMapIntMapIntLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntMapIntLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntMapIntLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::size_type") -> "void":
        return _cstl.VecMapIntMapIntLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.VecMapIntMapIntLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntMapIntLong

# Register VecMapIntMapIntLong in _cstl:
_cstl.VecMapIntMapIntLong_swigregister(VecMapIntMapIntLong)

class VecMapIntMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntMapStrInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.VecMapIntMapStrInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > > > > >,std::allocator< std::unordered_map< int,std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > > > > > > > *":
        return _cstl.VecMapIntMapStrInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntMapStrInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::difference_type") -> "void":
        return _cstl.VecMapIntMapStrInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapStrInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::value_type const &":
        return _cstl.VecMapIntMapStrInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapStrInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::value_type":
        return _cstl.VecMapIntMapStrInt_pop(self)

    def append(self, x: "MapIntMapStrInt") -> "void":
        return _cstl.VecMapIntMapStrInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntMapStrInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.VecMapIntMapStrInt_size(self)

    def swap(self, v: "VecMapIntMapStrInt") -> "void":
        return _cstl.VecMapIntMapStrInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.VecMapIntMapStrInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.VecMapIntMapStrInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::reverse_iterator":
        return _cstl.VecMapIntMapStrInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::reverse_iterator":
        return _cstl.VecMapIntMapStrInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntMapStrInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::allocator_type":
        return _cstl.VecMapIntMapStrInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntMapStrInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.VecMapIntMapStrInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntMapStrInt_swiginit(self, _cstl.new_VecMapIntMapStrInt(*args))

    def push_back(self, x: "MapIntMapStrInt") -> "void":
        return _cstl.VecMapIntMapStrInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::value_type const &":
        return _cstl.VecMapIntMapStrInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::value_type const &":
        return _cstl.VecMapIntMapStrInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::size_type", x: "MapIntMapStrInt") -> "void":
        return _cstl.VecMapIntMapStrInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntMapStrInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntMapStrInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::size_type") -> "void":
        return _cstl.VecMapIntMapStrInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.VecMapIntMapStrInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntMapStrInt

# Register VecMapIntMapStrInt in _cstl:
_cstl.VecMapIntMapStrInt_swigregister(VecMapIntMapStrInt)

class VecMapIntMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntMapStrStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.VecMapIntMapStrStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > > > > >,std::allocator< std::unordered_map< int,std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > > > > > > > *":
        return _cstl.VecMapIntMapStrStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntMapStrStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::difference_type") -> "void":
        return _cstl.VecMapIntMapStrStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapStrStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::value_type const &":
        return _cstl.VecMapIntMapStrStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapStrStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::value_type":
        return _cstl.VecMapIntMapStrStr_pop(self)

    def append(self, x: "MapIntMapStrStr") -> "void":
        return _cstl.VecMapIntMapStrStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntMapStrStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.VecMapIntMapStrStr_size(self)

    def swap(self, v: "VecMapIntMapStrStr") -> "void":
        return _cstl.VecMapIntMapStrStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.VecMapIntMapStrStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.VecMapIntMapStrStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::reverse_iterator":
        return _cstl.VecMapIntMapStrStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::reverse_iterator":
        return _cstl.VecMapIntMapStrStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntMapStrStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::allocator_type":
        return _cstl.VecMapIntMapStrStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntMapStrStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.VecMapIntMapStrStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntMapStrStr_swiginit(self, _cstl.new_VecMapIntMapStrStr(*args))

    def push_back(self, x: "MapIntMapStrStr") -> "void":
        return _cstl.VecMapIntMapStrStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::value_type const &":
        return _cstl.VecMapIntMapStrStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::value_type const &":
        return _cstl.VecMapIntMapStrStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::size_type", x: "MapIntMapStrStr") -> "void":
        return _cstl.VecMapIntMapStrStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntMapStrStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntMapStrStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::size_type") -> "void":
        return _cstl.VecMapIntMapStrStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.VecMapIntMapStrStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntMapStrStr

# Register VecMapIntMapStrStr in _cstl:
_cstl.VecMapIntMapStrStr_swigregister(VecMapIntMapStrStr)

class VecMapIntMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntMapStrFloat___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.VecMapIntMapStrFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > > > > >,std::allocator< std::unordered_map< int,std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > > > > > > > *":
        return _cstl.VecMapIntMapStrFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntMapStrFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::difference_type") -> "void":
        return _cstl.VecMapIntMapStrFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapStrFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::value_type const &":
        return _cstl.VecMapIntMapStrFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapStrFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::value_type":
        return _cstl.VecMapIntMapStrFloat_pop(self)

    def append(self, x: "MapIntMapStrFloat") -> "void":
        return _cstl.VecMapIntMapStrFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntMapStrFloat_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.VecMapIntMapStrFloat_size(self)

    def swap(self, v: "VecMapIntMapStrFloat") -> "void":
        return _cstl.VecMapIntMapStrFloat_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.VecMapIntMapStrFloat_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.VecMapIntMapStrFloat_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::reverse_iterator":
        return _cstl.VecMapIntMapStrFloat_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::reverse_iterator":
        return _cstl.VecMapIntMapStrFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntMapStrFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::allocator_type":
        return _cstl.VecMapIntMapStrFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntMapStrFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.VecMapIntMapStrFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntMapStrFloat_swiginit(self, _cstl.new_VecMapIntMapStrFloat(*args))

    def push_back(self, x: "MapIntMapStrFloat") -> "void":
        return _cstl.VecMapIntMapStrFloat_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::value_type const &":
        return _cstl.VecMapIntMapStrFloat_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::value_type const &":
        return _cstl.VecMapIntMapStrFloat_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::size_type", x: "MapIntMapStrFloat") -> "void":
        return _cstl.VecMapIntMapStrFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntMapStrFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntMapStrFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::size_type") -> "void":
        return _cstl.VecMapIntMapStrFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.VecMapIntMapStrFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntMapStrFloat

# Register VecMapIntMapStrFloat in _cstl:
_cstl.VecMapIntMapStrFloat_swigregister(VecMapIntMapStrFloat)

class VecMapIntMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntMapStrDouble___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.VecMapIntMapStrDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > > > > >,std::allocator< std::unordered_map< int,std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > > > > > > > *":
        return _cstl.VecMapIntMapStrDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntMapStrDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::difference_type") -> "void":
        return _cstl.VecMapIntMapStrDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapStrDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::value_type const &":
        return _cstl.VecMapIntMapStrDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapStrDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::value_type":
        return _cstl.VecMapIntMapStrDouble_pop(self)

    def append(self, x: "MapIntMapStrDouble") -> "void":
        return _cstl.VecMapIntMapStrDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntMapStrDouble_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.VecMapIntMapStrDouble_size(self)

    def swap(self, v: "VecMapIntMapStrDouble") -> "void":
        return _cstl.VecMapIntMapStrDouble_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.VecMapIntMapStrDouble_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.VecMapIntMapStrDouble_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::reverse_iterator":
        return _cstl.VecMapIntMapStrDouble_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::reverse_iterator":
        return _cstl.VecMapIntMapStrDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntMapStrDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::allocator_type":
        return _cstl.VecMapIntMapStrDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntMapStrDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.VecMapIntMapStrDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntMapStrDouble_swiginit(self, _cstl.new_VecMapIntMapStrDouble(*args))

    def push_back(self, x: "MapIntMapStrDouble") -> "void":
        return _cstl.VecMapIntMapStrDouble_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::value_type const &":
        return _cstl.VecMapIntMapStrDouble_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::value_type const &":
        return _cstl.VecMapIntMapStrDouble_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::size_type", x: "MapIntMapStrDouble") -> "void":
        return _cstl.VecMapIntMapStrDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntMapStrDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntMapStrDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::size_type") -> "void":
        return _cstl.VecMapIntMapStrDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.VecMapIntMapStrDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntMapStrDouble

# Register VecMapIntMapStrDouble in _cstl:
_cstl.VecMapIntMapStrDouble_swigregister(VecMapIntMapStrDouble)

class VecMapIntMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntMapStrBool___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.VecMapIntMapStrBool___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > > > > >,std::allocator< std::unordered_map< int,std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > > > > > > > *":
        return _cstl.VecMapIntMapStrBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntMapStrBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::difference_type") -> "void":
        return _cstl.VecMapIntMapStrBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapStrBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::value_type const &":
        return _cstl.VecMapIntMapStrBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapStrBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::value_type":
        return _cstl.VecMapIntMapStrBool_pop(self)

    def append(self, x: "MapIntMapStrBool") -> "void":
        return _cstl.VecMapIntMapStrBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntMapStrBool_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.VecMapIntMapStrBool_size(self)

    def swap(self, v: "VecMapIntMapStrBool") -> "void":
        return _cstl.VecMapIntMapStrBool_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.VecMapIntMapStrBool_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.VecMapIntMapStrBool_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::reverse_iterator":
        return _cstl.VecMapIntMapStrBool_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::reverse_iterator":
        return _cstl.VecMapIntMapStrBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntMapStrBool_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::allocator_type":
        return _cstl.VecMapIntMapStrBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntMapStrBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.VecMapIntMapStrBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntMapStrBool_swiginit(self, _cstl.new_VecMapIntMapStrBool(*args))

    def push_back(self, x: "MapIntMapStrBool") -> "void":
        return _cstl.VecMapIntMapStrBool_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::value_type const &":
        return _cstl.VecMapIntMapStrBool_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::value_type const &":
        return _cstl.VecMapIntMapStrBool_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::size_type", x: "MapIntMapStrBool") -> "void":
        return _cstl.VecMapIntMapStrBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntMapStrBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntMapStrBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::size_type") -> "void":
        return _cstl.VecMapIntMapStrBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.VecMapIntMapStrBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntMapStrBool

# Register VecMapIntMapStrBool in _cstl:
_cstl.VecMapIntMapStrBool_swigregister(VecMapIntMapStrBool)

class VecMapIntMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntMapStrLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.VecMapIntMapStrLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > > > > >,std::allocator< std::unordered_map< int,std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > > > > > > > *":
        return _cstl.VecMapIntMapStrLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntMapStrLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecMapIntMapStrLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapStrLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::value_type const &":
        return _cstl.VecMapIntMapStrLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapStrLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::value_type":
        return _cstl.VecMapIntMapStrLong_pop(self)

    def append(self, x: "MapIntMapStrLong") -> "void":
        return _cstl.VecMapIntMapStrLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntMapStrLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.VecMapIntMapStrLong_size(self)

    def swap(self, v: "VecMapIntMapStrLong") -> "void":
        return _cstl.VecMapIntMapStrLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.VecMapIntMapStrLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.VecMapIntMapStrLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapIntMapStrLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapIntMapStrLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntMapStrLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::allocator_type":
        return _cstl.VecMapIntMapStrLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntMapStrLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.VecMapIntMapStrLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntMapStrLong_swiginit(self, _cstl.new_VecMapIntMapStrLong(*args))

    def push_back(self, x: "MapIntMapStrLong") -> "void":
        return _cstl.VecMapIntMapStrLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::value_type const &":
        return _cstl.VecMapIntMapStrLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::value_type const &":
        return _cstl.VecMapIntMapStrLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::size_type", x: "MapIntMapStrLong") -> "void":
        return _cstl.VecMapIntMapStrLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntMapStrLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntMapStrLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::size_type") -> "void":
        return _cstl.VecMapIntMapStrLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.VecMapIntMapStrLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntMapStrLong

# Register VecMapIntMapStrLong in _cstl:
_cstl.VecMapIntMapStrLong_swigregister(VecMapIntMapStrLong)

class VecMapIntMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntMapLongInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.VecMapIntMapLongInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > > > > >,std::allocator< std::unordered_map< int,std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > > > > > > > *":
        return _cstl.VecMapIntMapLongInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntMapLongInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::difference_type") -> "void":
        return _cstl.VecMapIntMapLongInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapLongInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::value_type const &":
        return _cstl.VecMapIntMapLongInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapLongInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::value_type":
        return _cstl.VecMapIntMapLongInt_pop(self)

    def append(self, x: "MapIntMapLongInt") -> "void":
        return _cstl.VecMapIntMapLongInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntMapLongInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.VecMapIntMapLongInt_size(self)

    def swap(self, v: "VecMapIntMapLongInt") -> "void":
        return _cstl.VecMapIntMapLongInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.VecMapIntMapLongInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.VecMapIntMapLongInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::reverse_iterator":
        return _cstl.VecMapIntMapLongInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::reverse_iterator":
        return _cstl.VecMapIntMapLongInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntMapLongInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::allocator_type":
        return _cstl.VecMapIntMapLongInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntMapLongInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.VecMapIntMapLongInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntMapLongInt_swiginit(self, _cstl.new_VecMapIntMapLongInt(*args))

    def push_back(self, x: "MapIntMapLongInt") -> "void":
        return _cstl.VecMapIntMapLongInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::value_type const &":
        return _cstl.VecMapIntMapLongInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::value_type const &":
        return _cstl.VecMapIntMapLongInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::size_type", x: "MapIntMapLongInt") -> "void":
        return _cstl.VecMapIntMapLongInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntMapLongInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntMapLongInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::size_type") -> "void":
        return _cstl.VecMapIntMapLongInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.VecMapIntMapLongInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntMapLongInt

# Register VecMapIntMapLongInt in _cstl:
_cstl.VecMapIntMapLongInt_swigregister(VecMapIntMapLongInt)

class VecMapIntMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntMapLongStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.VecMapIntMapLongStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > > > > >,std::allocator< std::unordered_map< int,std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > > > > > > > *":
        return _cstl.VecMapIntMapLongStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntMapLongStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::difference_type") -> "void":
        return _cstl.VecMapIntMapLongStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapLongStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::value_type const &":
        return _cstl.VecMapIntMapLongStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapLongStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::value_type":
        return _cstl.VecMapIntMapLongStr_pop(self)

    def append(self, x: "MapIntMapLongStr") -> "void":
        return _cstl.VecMapIntMapLongStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntMapLongStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.VecMapIntMapLongStr_size(self)

    def swap(self, v: "VecMapIntMapLongStr") -> "void":
        return _cstl.VecMapIntMapLongStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.VecMapIntMapLongStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.VecMapIntMapLongStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::reverse_iterator":
        return _cstl.VecMapIntMapLongStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::reverse_iterator":
        return _cstl.VecMapIntMapLongStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntMapLongStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::allocator_type":
        return _cstl.VecMapIntMapLongStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntMapLongStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.VecMapIntMapLongStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntMapLongStr_swiginit(self, _cstl.new_VecMapIntMapLongStr(*args))

    def push_back(self, x: "MapIntMapLongStr") -> "void":
        return _cstl.VecMapIntMapLongStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::value_type const &":
        return _cstl.VecMapIntMapLongStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::value_type const &":
        return _cstl.VecMapIntMapLongStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::size_type", x: "MapIntMapLongStr") -> "void":
        return _cstl.VecMapIntMapLongStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntMapLongStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntMapLongStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::size_type") -> "void":
        return _cstl.VecMapIntMapLongStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.VecMapIntMapLongStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntMapLongStr

# Register VecMapIntMapLongStr in _cstl:
_cstl.VecMapIntMapLongStr_swigregister(VecMapIntMapLongStr)

class VecMapIntMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntMapLongFloat___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.VecMapIntMapLongFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > > > > >,std::allocator< std::unordered_map< int,std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > > > > > > > *":
        return _cstl.VecMapIntMapLongFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntMapLongFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::difference_type") -> "void":
        return _cstl.VecMapIntMapLongFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapLongFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::value_type const &":
        return _cstl.VecMapIntMapLongFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapLongFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::value_type":
        return _cstl.VecMapIntMapLongFloat_pop(self)

    def append(self, x: "MapIntMapLongFloat") -> "void":
        return _cstl.VecMapIntMapLongFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntMapLongFloat_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.VecMapIntMapLongFloat_size(self)

    def swap(self, v: "VecMapIntMapLongFloat") -> "void":
        return _cstl.VecMapIntMapLongFloat_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.VecMapIntMapLongFloat_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.VecMapIntMapLongFloat_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::reverse_iterator":
        return _cstl.VecMapIntMapLongFloat_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::reverse_iterator":
        return _cstl.VecMapIntMapLongFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntMapLongFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::allocator_type":
        return _cstl.VecMapIntMapLongFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntMapLongFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.VecMapIntMapLongFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntMapLongFloat_swiginit(self, _cstl.new_VecMapIntMapLongFloat(*args))

    def push_back(self, x: "MapIntMapLongFloat") -> "void":
        return _cstl.VecMapIntMapLongFloat_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::value_type const &":
        return _cstl.VecMapIntMapLongFloat_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::value_type const &":
        return _cstl.VecMapIntMapLongFloat_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::size_type", x: "MapIntMapLongFloat") -> "void":
        return _cstl.VecMapIntMapLongFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntMapLongFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntMapLongFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::size_type") -> "void":
        return _cstl.VecMapIntMapLongFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.VecMapIntMapLongFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntMapLongFloat

# Register VecMapIntMapLongFloat in _cstl:
_cstl.VecMapIntMapLongFloat_swigregister(VecMapIntMapLongFloat)

class VecMapIntMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntMapLongDouble___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.VecMapIntMapLongDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > > > > >,std::allocator< std::unordered_map< int,std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > > > > > > > *":
        return _cstl.VecMapIntMapLongDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntMapLongDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::difference_type") -> "void":
        return _cstl.VecMapIntMapLongDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapLongDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::value_type const &":
        return _cstl.VecMapIntMapLongDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapLongDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::value_type":
        return _cstl.VecMapIntMapLongDouble_pop(self)

    def append(self, x: "MapIntMapLongDouble") -> "void":
        return _cstl.VecMapIntMapLongDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntMapLongDouble_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.VecMapIntMapLongDouble_size(self)

    def swap(self, v: "VecMapIntMapLongDouble") -> "void":
        return _cstl.VecMapIntMapLongDouble_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.VecMapIntMapLongDouble_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.VecMapIntMapLongDouble_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::reverse_iterator":
        return _cstl.VecMapIntMapLongDouble_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::reverse_iterator":
        return _cstl.VecMapIntMapLongDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntMapLongDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::allocator_type":
        return _cstl.VecMapIntMapLongDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntMapLongDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.VecMapIntMapLongDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntMapLongDouble_swiginit(self, _cstl.new_VecMapIntMapLongDouble(*args))

    def push_back(self, x: "MapIntMapLongDouble") -> "void":
        return _cstl.VecMapIntMapLongDouble_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::value_type const &":
        return _cstl.VecMapIntMapLongDouble_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::value_type const &":
        return _cstl.VecMapIntMapLongDouble_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::size_type", x: "MapIntMapLongDouble") -> "void":
        return _cstl.VecMapIntMapLongDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntMapLongDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntMapLongDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::size_type") -> "void":
        return _cstl.VecMapIntMapLongDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.VecMapIntMapLongDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntMapLongDouble

# Register VecMapIntMapLongDouble in _cstl:
_cstl.VecMapIntMapLongDouble_swigregister(VecMapIntMapLongDouble)

class VecMapIntMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntMapLongBool___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.VecMapIntMapLongBool___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > > > > >,std::allocator< std::unordered_map< int,std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > > > > > > > *":
        return _cstl.VecMapIntMapLongBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntMapLongBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::difference_type") -> "void":
        return _cstl.VecMapIntMapLongBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapLongBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::value_type const &":
        return _cstl.VecMapIntMapLongBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapLongBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::value_type":
        return _cstl.VecMapIntMapLongBool_pop(self)

    def append(self, x: "MapIntMapLongBool") -> "void":
        return _cstl.VecMapIntMapLongBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntMapLongBool_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.VecMapIntMapLongBool_size(self)

    def swap(self, v: "VecMapIntMapLongBool") -> "void":
        return _cstl.VecMapIntMapLongBool_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.VecMapIntMapLongBool_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.VecMapIntMapLongBool_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::reverse_iterator":
        return _cstl.VecMapIntMapLongBool_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::reverse_iterator":
        return _cstl.VecMapIntMapLongBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntMapLongBool_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::allocator_type":
        return _cstl.VecMapIntMapLongBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntMapLongBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.VecMapIntMapLongBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntMapLongBool_swiginit(self, _cstl.new_VecMapIntMapLongBool(*args))

    def push_back(self, x: "MapIntMapLongBool") -> "void":
        return _cstl.VecMapIntMapLongBool_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::value_type const &":
        return _cstl.VecMapIntMapLongBool_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::value_type const &":
        return _cstl.VecMapIntMapLongBool_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::size_type", x: "MapIntMapLongBool") -> "void":
        return _cstl.VecMapIntMapLongBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntMapLongBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntMapLongBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::size_type") -> "void":
        return _cstl.VecMapIntMapLongBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.VecMapIntMapLongBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntMapLongBool

# Register VecMapIntMapLongBool in _cstl:
_cstl.VecMapIntMapLongBool_swigregister(VecMapIntMapLongBool)

class VecMapIntMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapIntMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapIntMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapIntMapLongLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.VecMapIntMapLongLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::difference_type") -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > > > > >,std::allocator< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > >,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > > > > > > > *":
        return _cstl.VecMapIntMapLongLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapIntMapLongLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecMapIntMapLongLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapLongLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::value_type const &":
        return _cstl.VecMapIntMapLongLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapIntMapLongLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::value_type":
        return _cstl.VecMapIntMapLongLong_pop(self)

    def append(self, x: "MapIntMapLongLong") -> "void":
        return _cstl.VecMapIntMapLongLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapIntMapLongLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.VecMapIntMapLongLong_size(self)

    def swap(self, v: "VecMapIntMapLongLong") -> "void":
        return _cstl.VecMapIntMapLongLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.VecMapIntMapLongLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.VecMapIntMapLongLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapIntMapLongLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapIntMapLongLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapIntMapLongLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::allocator_type":
        return _cstl.VecMapIntMapLongLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapIntMapLongLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.VecMapIntMapLongLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapIntMapLongLong_swiginit(self, _cstl.new_VecMapIntMapLongLong(*args))

    def push_back(self, x: "MapIntMapLongLong") -> "void":
        return _cstl.VecMapIntMapLongLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::value_type const &":
        return _cstl.VecMapIntMapLongLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::value_type const &":
        return _cstl.VecMapIntMapLongLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::size_type", x: "MapIntMapLongLong") -> "void":
        return _cstl.VecMapIntMapLongLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapIntMapLongLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapIntMapLongLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::size_type") -> "void":
        return _cstl.VecMapIntMapLongLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.VecMapIntMapLongLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapIntMapLongLong

# Register VecMapIntMapLongLong in _cstl:
_cstl.VecMapIntMapLongLong_swigregister(VecMapIntMapLongLong)

class VecMapStrVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrVecInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::vector< int > > >::size_type":
        return _cstl.VecMapStrVecInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::vector< int > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::vector< int > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::vector< int,std::allocator< int > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::vector< int,std::allocator< int > > > > >,std::allocator< std::unordered_map< std::string,std::vector< int,std::allocator< int > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::vector< int,std::allocator< int > > > > > > > *":
        return _cstl.VecMapStrVecInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrVecInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::vector< int > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::vector< int > > >::difference_type") -> "void":
        return _cstl.VecMapStrVecInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrVecInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::vector< int > > >::value_type const &":
        return _cstl.VecMapStrVecInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrVecInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::vector< int > > >::value_type":
        return _cstl.VecMapStrVecInt_pop(self)

    def append(self, x: "MapStrVecInt") -> "void":
        return _cstl.VecMapStrVecInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrVecInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::vector< int > > >::size_type":
        return _cstl.VecMapStrVecInt_size(self)

    def swap(self, v: "VecMapStrVecInt") -> "void":
        return _cstl.VecMapStrVecInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::vector< int > > >::iterator":
        return _cstl.VecMapStrVecInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::vector< int > > >::iterator":
        return _cstl.VecMapStrVecInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::vector< int > > >::reverse_iterator":
        return _cstl.VecMapStrVecInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::vector< int > > >::reverse_iterator":
        return _cstl.VecMapStrVecInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrVecInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::vector< int > > >::allocator_type":
        return _cstl.VecMapStrVecInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrVecInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::vector< int > > >::iterator":
        return _cstl.VecMapStrVecInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrVecInt_swiginit(self, _cstl.new_VecMapStrVecInt(*args))

    def push_back(self, x: "MapStrVecInt") -> "void":
        return _cstl.VecMapStrVecInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::vector< int > > >::value_type const &":
        return _cstl.VecMapStrVecInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::vector< int > > >::value_type const &":
        return _cstl.VecMapStrVecInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::vector< int > > >::size_type", x: "MapStrVecInt") -> "void":
        return _cstl.VecMapStrVecInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrVecInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrVecInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::vector< int > > >::size_type") -> "void":
        return _cstl.VecMapStrVecInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::vector< int > > >::size_type":
        return _cstl.VecMapStrVecInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrVecInt

# Register VecMapStrVecInt in _cstl:
_cstl.VecMapStrVecInt_swigregister(VecMapStrVecInt)

class VecMapStrVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrVecStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::size_type":
        return _cstl.VecMapStrVecStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::vector< std::string,std::allocator< std::string > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > >,std::allocator< std::unordered_map< std::string,std::vector< std::string,std::allocator< std::string > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > > > > *":
        return _cstl.VecMapStrVecStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrVecStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::difference_type") -> "void":
        return _cstl.VecMapStrVecStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrVecStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::value_type const &":
        return _cstl.VecMapStrVecStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrVecStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::value_type":
        return _cstl.VecMapStrVecStr_pop(self)

    def append(self, x: "MapStrVecStr") -> "void":
        return _cstl.VecMapStrVecStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrVecStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::size_type":
        return _cstl.VecMapStrVecStr_size(self)

    def swap(self, v: "VecMapStrVecStr") -> "void":
        return _cstl.VecMapStrVecStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::iterator":
        return _cstl.VecMapStrVecStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::iterator":
        return _cstl.VecMapStrVecStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::reverse_iterator":
        return _cstl.VecMapStrVecStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::reverse_iterator":
        return _cstl.VecMapStrVecStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrVecStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::allocator_type":
        return _cstl.VecMapStrVecStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrVecStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::iterator":
        return _cstl.VecMapStrVecStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrVecStr_swiginit(self, _cstl.new_VecMapStrVecStr(*args))

    def push_back(self, x: "MapStrVecStr") -> "void":
        return _cstl.VecMapStrVecStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::value_type const &":
        return _cstl.VecMapStrVecStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::value_type const &":
        return _cstl.VecMapStrVecStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::size_type", x: "MapStrVecStr") -> "void":
        return _cstl.VecMapStrVecStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrVecStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrVecStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::size_type") -> "void":
        return _cstl.VecMapStrVecStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::string > > >::size_type":
        return _cstl.VecMapStrVecStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrVecStr

# Register VecMapStrVecStr in _cstl:
_cstl.VecMapStrVecStr_swigregister(VecMapStrVecStr)

class VecMapStrVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrVecFloat___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::vector< float > > >::size_type":
        return _cstl.VecMapStrVecFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::vector< float > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::vector< float > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::vector< float,std::allocator< float > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::vector< float,std::allocator< float > > > > >,std::allocator< std::unordered_map< std::string,std::vector< float,std::allocator< float > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::vector< float,std::allocator< float > > > > > > > *":
        return _cstl.VecMapStrVecFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrVecFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::vector< float > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::vector< float > > >::difference_type") -> "void":
        return _cstl.VecMapStrVecFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrVecFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::vector< float > > >::value_type const &":
        return _cstl.VecMapStrVecFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrVecFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::vector< float > > >::value_type":
        return _cstl.VecMapStrVecFloat_pop(self)

    def append(self, x: "MapStrVecFloat") -> "void":
        return _cstl.VecMapStrVecFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrVecFloat_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::vector< float > > >::size_type":
        return _cstl.VecMapStrVecFloat_size(self)

    def swap(self, v: "VecMapStrVecFloat") -> "void":
        return _cstl.VecMapStrVecFloat_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::vector< float > > >::iterator":
        return _cstl.VecMapStrVecFloat_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::vector< float > > >::iterator":
        return _cstl.VecMapStrVecFloat_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::vector< float > > >::reverse_iterator":
        return _cstl.VecMapStrVecFloat_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::vector< float > > >::reverse_iterator":
        return _cstl.VecMapStrVecFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrVecFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::vector< float > > >::allocator_type":
        return _cstl.VecMapStrVecFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrVecFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::vector< float > > >::iterator":
        return _cstl.VecMapStrVecFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrVecFloat_swiginit(self, _cstl.new_VecMapStrVecFloat(*args))

    def push_back(self, x: "MapStrVecFloat") -> "void":
        return _cstl.VecMapStrVecFloat_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::vector< float > > >::value_type const &":
        return _cstl.VecMapStrVecFloat_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::vector< float > > >::value_type const &":
        return _cstl.VecMapStrVecFloat_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::vector< float > > >::size_type", x: "MapStrVecFloat") -> "void":
        return _cstl.VecMapStrVecFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrVecFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrVecFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::vector< float > > >::size_type") -> "void":
        return _cstl.VecMapStrVecFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::vector< float > > >::size_type":
        return _cstl.VecMapStrVecFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrVecFloat

# Register VecMapStrVecFloat in _cstl:
_cstl.VecMapStrVecFloat_swigregister(VecMapStrVecFloat)

class VecMapStrVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrVecDouble___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::vector< double > > >::size_type":
        return _cstl.VecMapStrVecDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::vector< double > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::vector< double > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::vector< double,std::allocator< double > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::vector< double,std::allocator< double > > > > >,std::allocator< std::unordered_map< std::string,std::vector< double,std::allocator< double > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::vector< double,std::allocator< double > > > > > > > *":
        return _cstl.VecMapStrVecDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrVecDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::vector< double > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::vector< double > > >::difference_type") -> "void":
        return _cstl.VecMapStrVecDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrVecDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::vector< double > > >::value_type const &":
        return _cstl.VecMapStrVecDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrVecDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::vector< double > > >::value_type":
        return _cstl.VecMapStrVecDouble_pop(self)

    def append(self, x: "MapStrVecDouble") -> "void":
        return _cstl.VecMapStrVecDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrVecDouble_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::vector< double > > >::size_type":
        return _cstl.VecMapStrVecDouble_size(self)

    def swap(self, v: "VecMapStrVecDouble") -> "void":
        return _cstl.VecMapStrVecDouble_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::vector< double > > >::iterator":
        return _cstl.VecMapStrVecDouble_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::vector< double > > >::iterator":
        return _cstl.VecMapStrVecDouble_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::vector< double > > >::reverse_iterator":
        return _cstl.VecMapStrVecDouble_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::vector< double > > >::reverse_iterator":
        return _cstl.VecMapStrVecDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrVecDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::vector< double > > >::allocator_type":
        return _cstl.VecMapStrVecDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrVecDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::vector< double > > >::iterator":
        return _cstl.VecMapStrVecDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrVecDouble_swiginit(self, _cstl.new_VecMapStrVecDouble(*args))

    def push_back(self, x: "MapStrVecDouble") -> "void":
        return _cstl.VecMapStrVecDouble_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::vector< double > > >::value_type const &":
        return _cstl.VecMapStrVecDouble_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::vector< double > > >::value_type const &":
        return _cstl.VecMapStrVecDouble_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::vector< double > > >::size_type", x: "MapStrVecDouble") -> "void":
        return _cstl.VecMapStrVecDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrVecDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrVecDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::vector< double > > >::size_type") -> "void":
        return _cstl.VecMapStrVecDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::vector< double > > >::size_type":
        return _cstl.VecMapStrVecDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrVecDouble

# Register VecMapStrVecDouble in _cstl:
_cstl.VecMapStrVecDouble_swigregister(VecMapStrVecDouble)

class VecMapStrVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrVecBool___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::vector< bool > > >::size_type":
        return _cstl.VecMapStrVecBool___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::vector< bool > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::vector< bool > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::vector< bool,std::allocator< bool > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::vector< bool,std::allocator< bool > > > > >,std::allocator< std::unordered_map< std::string,std::vector< bool,std::allocator< bool > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::vector< bool,std::allocator< bool > > > > > > > *":
        return _cstl.VecMapStrVecBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrVecBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::vector< bool > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::vector< bool > > >::difference_type") -> "void":
        return _cstl.VecMapStrVecBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrVecBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::vector< bool > > >::value_type const &":
        return _cstl.VecMapStrVecBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrVecBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::vector< bool > > >::value_type":
        return _cstl.VecMapStrVecBool_pop(self)

    def append(self, x: "MapStrVecBool") -> "void":
        return _cstl.VecMapStrVecBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrVecBool_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::vector< bool > > >::size_type":
        return _cstl.VecMapStrVecBool_size(self)

    def swap(self, v: "VecMapStrVecBool") -> "void":
        return _cstl.VecMapStrVecBool_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::vector< bool > > >::iterator":
        return _cstl.VecMapStrVecBool_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::vector< bool > > >::iterator":
        return _cstl.VecMapStrVecBool_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::vector< bool > > >::reverse_iterator":
        return _cstl.VecMapStrVecBool_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::vector< bool > > >::reverse_iterator":
        return _cstl.VecMapStrVecBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrVecBool_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::vector< bool > > >::allocator_type":
        return _cstl.VecMapStrVecBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrVecBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::vector< bool > > >::iterator":
        return _cstl.VecMapStrVecBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrVecBool_swiginit(self, _cstl.new_VecMapStrVecBool(*args))

    def push_back(self, x: "MapStrVecBool") -> "void":
        return _cstl.VecMapStrVecBool_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::vector< bool > > >::value_type const &":
        return _cstl.VecMapStrVecBool_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::vector< bool > > >::value_type const &":
        return _cstl.VecMapStrVecBool_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::vector< bool > > >::size_type", x: "MapStrVecBool") -> "void":
        return _cstl.VecMapStrVecBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrVecBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrVecBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::vector< bool > > >::size_type") -> "void":
        return _cstl.VecMapStrVecBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::vector< bool > > >::size_type":
        return _cstl.VecMapStrVecBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrVecBool

# Register VecMapStrVecBool in _cstl:
_cstl.VecMapStrVecBool_swigregister(VecMapStrVecBool)

class VecMapStrVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrVecLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::size_type":
        return _cstl.VecMapStrVecLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::vector< std::int64_t,std::allocator< std::int64_t > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::vector< std::int64_t,std::allocator< std::int64_t > > > > >,std::allocator< std::unordered_map< std::string,std::vector< std::int64_t,std::allocator< std::int64_t > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::vector< std::int64_t,std::allocator< std::int64_t > > > > > > > *":
        return _cstl.VecMapStrVecLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrVecLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecMapStrVecLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrVecLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::value_type const &":
        return _cstl.VecMapStrVecLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrVecLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::value_type":
        return _cstl.VecMapStrVecLong_pop(self)

    def append(self, x: "MapStrVecLong") -> "void":
        return _cstl.VecMapStrVecLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrVecLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::size_type":
        return _cstl.VecMapStrVecLong_size(self)

    def swap(self, v: "VecMapStrVecLong") -> "void":
        return _cstl.VecMapStrVecLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::iterator":
        return _cstl.VecMapStrVecLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::iterator":
        return _cstl.VecMapStrVecLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapStrVecLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapStrVecLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrVecLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::allocator_type":
        return _cstl.VecMapStrVecLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrVecLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::iterator":
        return _cstl.VecMapStrVecLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrVecLong_swiginit(self, _cstl.new_VecMapStrVecLong(*args))

    def push_back(self, x: "MapStrVecLong") -> "void":
        return _cstl.VecMapStrVecLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::value_type const &":
        return _cstl.VecMapStrVecLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::value_type const &":
        return _cstl.VecMapStrVecLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::size_type", x: "MapStrVecLong") -> "void":
        return _cstl.VecMapStrVecLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrVecLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrVecLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::size_type") -> "void":
        return _cstl.VecMapStrVecLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::vector< std::int64_t > > >::size_type":
        return _cstl.VecMapStrVecLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrVecLong

# Register VecMapStrVecLong in _cstl:
_cstl.VecMapStrVecLong_swigregister(VecMapStrVecLong)

class VecMapStrSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrSetInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::size_type":
        return _cstl.VecMapStrSetInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > > > > > > > *":
        return _cstl.VecMapStrSetInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrSetInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::difference_type") -> "void":
        return _cstl.VecMapStrSetInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrSetInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::value_type const &":
        return _cstl.VecMapStrSetInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrSetInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::value_type":
        return _cstl.VecMapStrSetInt_pop(self)

    def append(self, x: "MapStrSetInt") -> "void":
        return _cstl.VecMapStrSetInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrSetInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::size_type":
        return _cstl.VecMapStrSetInt_size(self)

    def swap(self, v: "VecMapStrSetInt") -> "void":
        return _cstl.VecMapStrSetInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::iterator":
        return _cstl.VecMapStrSetInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::iterator":
        return _cstl.VecMapStrSetInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::reverse_iterator":
        return _cstl.VecMapStrSetInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::reverse_iterator":
        return _cstl.VecMapStrSetInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrSetInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::allocator_type":
        return _cstl.VecMapStrSetInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrSetInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::iterator":
        return _cstl.VecMapStrSetInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrSetInt_swiginit(self, _cstl.new_VecMapStrSetInt(*args))

    def push_back(self, x: "MapStrSetInt") -> "void":
        return _cstl.VecMapStrSetInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::value_type const &":
        return _cstl.VecMapStrSetInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::value_type const &":
        return _cstl.VecMapStrSetInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::size_type", x: "MapStrSetInt") -> "void":
        return _cstl.VecMapStrSetInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrSetInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrSetInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::size_type") -> "void":
        return _cstl.VecMapStrSetInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< int > > >::size_type":
        return _cstl.VecMapStrSetInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrSetInt

# Register VecMapStrSetInt in _cstl:
_cstl.VecMapStrSetInt_swigregister(VecMapStrSetInt)

class VecMapStrSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrSetStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::size_type":
        return _cstl.VecMapStrSetStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > > > > > > > *":
        return _cstl.VecMapStrSetStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrSetStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::difference_type") -> "void":
        return _cstl.VecMapStrSetStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrSetStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::value_type const &":
        return _cstl.VecMapStrSetStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrSetStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::value_type":
        return _cstl.VecMapStrSetStr_pop(self)

    def append(self, x: "MapStrSetStr") -> "void":
        return _cstl.VecMapStrSetStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrSetStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::size_type":
        return _cstl.VecMapStrSetStr_size(self)

    def swap(self, v: "VecMapStrSetStr") -> "void":
        return _cstl.VecMapStrSetStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::iterator":
        return _cstl.VecMapStrSetStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::iterator":
        return _cstl.VecMapStrSetStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::reverse_iterator":
        return _cstl.VecMapStrSetStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::reverse_iterator":
        return _cstl.VecMapStrSetStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrSetStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::allocator_type":
        return _cstl.VecMapStrSetStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrSetStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::iterator":
        return _cstl.VecMapStrSetStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrSetStr_swiginit(self, _cstl.new_VecMapStrSetStr(*args))

    def push_back(self, x: "MapStrSetStr") -> "void":
        return _cstl.VecMapStrSetStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::value_type const &":
        return _cstl.VecMapStrSetStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::value_type const &":
        return _cstl.VecMapStrSetStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::size_type", x: "MapStrSetStr") -> "void":
        return _cstl.VecMapStrSetStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrSetStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrSetStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::size_type") -> "void":
        return _cstl.VecMapStrSetStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::string > > >::size_type":
        return _cstl.VecMapStrSetStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrSetStr

# Register VecMapStrSetStr in _cstl:
_cstl.VecMapStrSetStr_swigregister(VecMapStrSetStr)

class VecMapStrSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrSetLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.VecMapStrSetLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > > > > > > > *":
        return _cstl.VecMapStrSetLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrSetLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecMapStrSetLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrSetLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::value_type const &":
        return _cstl.VecMapStrSetLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrSetLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::value_type":
        return _cstl.VecMapStrSetLong_pop(self)

    def append(self, x: "MapStrSetLong") -> "void":
        return _cstl.VecMapStrSetLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrSetLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.VecMapStrSetLong_size(self)

    def swap(self, v: "VecMapStrSetLong") -> "void":
        return _cstl.VecMapStrSetLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.VecMapStrSetLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.VecMapStrSetLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapStrSetLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapStrSetLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrSetLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::allocator_type":
        return _cstl.VecMapStrSetLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrSetLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.VecMapStrSetLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrSetLong_swiginit(self, _cstl.new_VecMapStrSetLong(*args))

    def push_back(self, x: "MapStrSetLong") -> "void":
        return _cstl.VecMapStrSetLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::value_type const &":
        return _cstl.VecMapStrSetLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::value_type const &":
        return _cstl.VecMapStrSetLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::size_type", x: "MapStrSetLong") -> "void":
        return _cstl.VecMapStrSetLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrSetLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrSetLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::size_type") -> "void":
        return _cstl.VecMapStrSetLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.VecMapStrSetLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrSetLong

# Register VecMapStrSetLong in _cstl:
_cstl.VecMapStrSetLong_swigregister(VecMapStrSetLong)

class VecMapStrMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrMapIntInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::size_type":
        return _cstl.VecMapStrMapIntInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > > > > > > > *":
        return _cstl.VecMapStrMapIntInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrMapIntInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::difference_type") -> "void":
        return _cstl.VecMapStrMapIntInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapIntInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::value_type const &":
        return _cstl.VecMapStrMapIntInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapIntInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::value_type":
        return _cstl.VecMapStrMapIntInt_pop(self)

    def append(self, x: "MapStrMapIntInt") -> "void":
        return _cstl.VecMapStrMapIntInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrMapIntInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::size_type":
        return _cstl.VecMapStrMapIntInt_size(self)

    def swap(self, v: "VecMapStrMapIntInt") -> "void":
        return _cstl.VecMapStrMapIntInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::iterator":
        return _cstl.VecMapStrMapIntInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::iterator":
        return _cstl.VecMapStrMapIntInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::reverse_iterator":
        return _cstl.VecMapStrMapIntInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::reverse_iterator":
        return _cstl.VecMapStrMapIntInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrMapIntInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::allocator_type":
        return _cstl.VecMapStrMapIntInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrMapIntInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::iterator":
        return _cstl.VecMapStrMapIntInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrMapIntInt_swiginit(self, _cstl.new_VecMapStrMapIntInt(*args))

    def push_back(self, x: "MapStrMapIntInt") -> "void":
        return _cstl.VecMapStrMapIntInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::value_type const &":
        return _cstl.VecMapStrMapIntInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::value_type const &":
        return _cstl.VecMapStrMapIntInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::size_type", x: "MapStrMapIntInt") -> "void":
        return _cstl.VecMapStrMapIntInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrMapIntInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrMapIntInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::size_type") -> "void":
        return _cstl.VecMapStrMapIntInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,int > > >::size_type":
        return _cstl.VecMapStrMapIntInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrMapIntInt

# Register VecMapStrMapIntInt in _cstl:
_cstl.VecMapStrMapIntInt_swigregister(VecMapStrMapIntInt)

class VecMapStrMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrMapIntStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.VecMapStrMapIntStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > > > > > > > *":
        return _cstl.VecMapStrMapIntStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrMapIntStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::difference_type") -> "void":
        return _cstl.VecMapStrMapIntStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapIntStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::value_type const &":
        return _cstl.VecMapStrMapIntStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapIntStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::value_type":
        return _cstl.VecMapStrMapIntStr_pop(self)

    def append(self, x: "MapStrMapIntStr") -> "void":
        return _cstl.VecMapStrMapIntStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrMapIntStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.VecMapStrMapIntStr_size(self)

    def swap(self, v: "VecMapStrMapIntStr") -> "void":
        return _cstl.VecMapStrMapIntStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.VecMapStrMapIntStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.VecMapStrMapIntStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::reverse_iterator":
        return _cstl.VecMapStrMapIntStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::reverse_iterator":
        return _cstl.VecMapStrMapIntStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrMapIntStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::allocator_type":
        return _cstl.VecMapStrMapIntStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrMapIntStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.VecMapStrMapIntStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrMapIntStr_swiginit(self, _cstl.new_VecMapStrMapIntStr(*args))

    def push_back(self, x: "MapStrMapIntStr") -> "void":
        return _cstl.VecMapStrMapIntStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::value_type const &":
        return _cstl.VecMapStrMapIntStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::value_type const &":
        return _cstl.VecMapStrMapIntStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::size_type", x: "MapStrMapIntStr") -> "void":
        return _cstl.VecMapStrMapIntStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrMapIntStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrMapIntStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::size_type") -> "void":
        return _cstl.VecMapStrMapIntStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.VecMapStrMapIntStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrMapIntStr

# Register VecMapStrMapIntStr in _cstl:
_cstl.VecMapStrMapIntStr_swigregister(VecMapStrMapIntStr)

class VecMapStrMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrMapIntFloat___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::size_type":
        return _cstl.VecMapStrMapIntFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > > > > > > > *":
        return _cstl.VecMapStrMapIntFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrMapIntFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::difference_type") -> "void":
        return _cstl.VecMapStrMapIntFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapIntFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::value_type const &":
        return _cstl.VecMapStrMapIntFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapIntFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::value_type":
        return _cstl.VecMapStrMapIntFloat_pop(self)

    def append(self, x: "MapStrMapIntFloat") -> "void":
        return _cstl.VecMapStrMapIntFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrMapIntFloat_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::size_type":
        return _cstl.VecMapStrMapIntFloat_size(self)

    def swap(self, v: "VecMapStrMapIntFloat") -> "void":
        return _cstl.VecMapStrMapIntFloat_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::iterator":
        return _cstl.VecMapStrMapIntFloat_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::iterator":
        return _cstl.VecMapStrMapIntFloat_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::reverse_iterator":
        return _cstl.VecMapStrMapIntFloat_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::reverse_iterator":
        return _cstl.VecMapStrMapIntFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrMapIntFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::allocator_type":
        return _cstl.VecMapStrMapIntFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrMapIntFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::iterator":
        return _cstl.VecMapStrMapIntFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrMapIntFloat_swiginit(self, _cstl.new_VecMapStrMapIntFloat(*args))

    def push_back(self, x: "MapStrMapIntFloat") -> "void":
        return _cstl.VecMapStrMapIntFloat_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::value_type const &":
        return _cstl.VecMapStrMapIntFloat_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::value_type const &":
        return _cstl.VecMapStrMapIntFloat_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::size_type", x: "MapStrMapIntFloat") -> "void":
        return _cstl.VecMapStrMapIntFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrMapIntFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrMapIntFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::size_type") -> "void":
        return _cstl.VecMapStrMapIntFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,float > > >::size_type":
        return _cstl.VecMapStrMapIntFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrMapIntFloat

# Register VecMapStrMapIntFloat in _cstl:
_cstl.VecMapStrMapIntFloat_swigregister(VecMapStrMapIntFloat)

class VecMapStrMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrMapIntDouble___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::size_type":
        return _cstl.VecMapStrMapIntDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > > > > > > > *":
        return _cstl.VecMapStrMapIntDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrMapIntDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::difference_type") -> "void":
        return _cstl.VecMapStrMapIntDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapIntDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::value_type const &":
        return _cstl.VecMapStrMapIntDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapIntDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::value_type":
        return _cstl.VecMapStrMapIntDouble_pop(self)

    def append(self, x: "MapStrMapIntDouble") -> "void":
        return _cstl.VecMapStrMapIntDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrMapIntDouble_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::size_type":
        return _cstl.VecMapStrMapIntDouble_size(self)

    def swap(self, v: "VecMapStrMapIntDouble") -> "void":
        return _cstl.VecMapStrMapIntDouble_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::iterator":
        return _cstl.VecMapStrMapIntDouble_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::iterator":
        return _cstl.VecMapStrMapIntDouble_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::reverse_iterator":
        return _cstl.VecMapStrMapIntDouble_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::reverse_iterator":
        return _cstl.VecMapStrMapIntDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrMapIntDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::allocator_type":
        return _cstl.VecMapStrMapIntDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrMapIntDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::iterator":
        return _cstl.VecMapStrMapIntDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrMapIntDouble_swiginit(self, _cstl.new_VecMapStrMapIntDouble(*args))

    def push_back(self, x: "MapStrMapIntDouble") -> "void":
        return _cstl.VecMapStrMapIntDouble_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::value_type const &":
        return _cstl.VecMapStrMapIntDouble_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::value_type const &":
        return _cstl.VecMapStrMapIntDouble_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::size_type", x: "MapStrMapIntDouble") -> "void":
        return _cstl.VecMapStrMapIntDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrMapIntDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrMapIntDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::size_type") -> "void":
        return _cstl.VecMapStrMapIntDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,double > > >::size_type":
        return _cstl.VecMapStrMapIntDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrMapIntDouble

# Register VecMapStrMapIntDouble in _cstl:
_cstl.VecMapStrMapIntDouble_swigregister(VecMapStrMapIntDouble)

class VecMapStrMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrMapIntBool___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::size_type":
        return _cstl.VecMapStrMapIntBool___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > > > > > > > *":
        return _cstl.VecMapStrMapIntBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrMapIntBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::difference_type") -> "void":
        return _cstl.VecMapStrMapIntBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapIntBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::value_type const &":
        return _cstl.VecMapStrMapIntBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapIntBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::value_type":
        return _cstl.VecMapStrMapIntBool_pop(self)

    def append(self, x: "MapStrMapIntBool") -> "void":
        return _cstl.VecMapStrMapIntBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrMapIntBool_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::size_type":
        return _cstl.VecMapStrMapIntBool_size(self)

    def swap(self, v: "VecMapStrMapIntBool") -> "void":
        return _cstl.VecMapStrMapIntBool_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::iterator":
        return _cstl.VecMapStrMapIntBool_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::iterator":
        return _cstl.VecMapStrMapIntBool_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::reverse_iterator":
        return _cstl.VecMapStrMapIntBool_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::reverse_iterator":
        return _cstl.VecMapStrMapIntBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrMapIntBool_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::allocator_type":
        return _cstl.VecMapStrMapIntBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrMapIntBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::iterator":
        return _cstl.VecMapStrMapIntBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrMapIntBool_swiginit(self, _cstl.new_VecMapStrMapIntBool(*args))

    def push_back(self, x: "MapStrMapIntBool") -> "void":
        return _cstl.VecMapStrMapIntBool_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::value_type const &":
        return _cstl.VecMapStrMapIntBool_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::value_type const &":
        return _cstl.VecMapStrMapIntBool_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::size_type", x: "MapStrMapIntBool") -> "void":
        return _cstl.VecMapStrMapIntBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrMapIntBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrMapIntBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::size_type") -> "void":
        return _cstl.VecMapStrMapIntBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,bool > > >::size_type":
        return _cstl.VecMapStrMapIntBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrMapIntBool

# Register VecMapStrMapIntBool in _cstl:
_cstl.VecMapStrMapIntBool_swigregister(VecMapStrMapIntBool)

class VecMapStrMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrMapIntLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.VecMapStrMapIntLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > > > > > > > *":
        return _cstl.VecMapStrMapIntLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrMapIntLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecMapStrMapIntLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapIntLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::value_type const &":
        return _cstl.VecMapStrMapIntLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapIntLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::value_type":
        return _cstl.VecMapStrMapIntLong_pop(self)

    def append(self, x: "MapStrMapIntLong") -> "void":
        return _cstl.VecMapStrMapIntLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrMapIntLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.VecMapStrMapIntLong_size(self)

    def swap(self, v: "VecMapStrMapIntLong") -> "void":
        return _cstl.VecMapStrMapIntLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.VecMapStrMapIntLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.VecMapStrMapIntLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapStrMapIntLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapStrMapIntLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrMapIntLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::allocator_type":
        return _cstl.VecMapStrMapIntLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrMapIntLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.VecMapStrMapIntLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrMapIntLong_swiginit(self, _cstl.new_VecMapStrMapIntLong(*args))

    def push_back(self, x: "MapStrMapIntLong") -> "void":
        return _cstl.VecMapStrMapIntLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::value_type const &":
        return _cstl.VecMapStrMapIntLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::value_type const &":
        return _cstl.VecMapStrMapIntLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::size_type", x: "MapStrMapIntLong") -> "void":
        return _cstl.VecMapStrMapIntLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrMapIntLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrMapIntLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::size_type") -> "void":
        return _cstl.VecMapStrMapIntLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.VecMapStrMapIntLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrMapIntLong

# Register VecMapStrMapIntLong in _cstl:
_cstl.VecMapStrMapIntLong_swigregister(VecMapStrMapIntLong)

class VecMapStrMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrMapStrInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.VecMapStrMapStrInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > > > > > > > *":
        return _cstl.VecMapStrMapStrInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrMapStrInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::difference_type") -> "void":
        return _cstl.VecMapStrMapStrInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapStrInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::value_type const &":
        return _cstl.VecMapStrMapStrInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapStrInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::value_type":
        return _cstl.VecMapStrMapStrInt_pop(self)

    def append(self, x: "MapStrMapStrInt") -> "void":
        return _cstl.VecMapStrMapStrInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrMapStrInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.VecMapStrMapStrInt_size(self)

    def swap(self, v: "VecMapStrMapStrInt") -> "void":
        return _cstl.VecMapStrMapStrInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.VecMapStrMapStrInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.VecMapStrMapStrInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::reverse_iterator":
        return _cstl.VecMapStrMapStrInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::reverse_iterator":
        return _cstl.VecMapStrMapStrInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrMapStrInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::allocator_type":
        return _cstl.VecMapStrMapStrInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrMapStrInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.VecMapStrMapStrInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrMapStrInt_swiginit(self, _cstl.new_VecMapStrMapStrInt(*args))

    def push_back(self, x: "MapStrMapStrInt") -> "void":
        return _cstl.VecMapStrMapStrInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::value_type const &":
        return _cstl.VecMapStrMapStrInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::value_type const &":
        return _cstl.VecMapStrMapStrInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::size_type", x: "MapStrMapStrInt") -> "void":
        return _cstl.VecMapStrMapStrInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrMapStrInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrMapStrInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::size_type") -> "void":
        return _cstl.VecMapStrMapStrInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.VecMapStrMapStrInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrMapStrInt

# Register VecMapStrMapStrInt in _cstl:
_cstl.VecMapStrMapStrInt_swigregister(VecMapStrMapStrInt)

class VecMapStrMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrMapStrStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.VecMapStrMapStrStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > > > > > > > *":
        return _cstl.VecMapStrMapStrStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrMapStrStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::difference_type") -> "void":
        return _cstl.VecMapStrMapStrStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapStrStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::value_type const &":
        return _cstl.VecMapStrMapStrStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapStrStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::value_type":
        return _cstl.VecMapStrMapStrStr_pop(self)

    def append(self, x: "MapStrMapStrStr") -> "void":
        return _cstl.VecMapStrMapStrStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrMapStrStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.VecMapStrMapStrStr_size(self)

    def swap(self, v: "VecMapStrMapStrStr") -> "void":
        return _cstl.VecMapStrMapStrStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.VecMapStrMapStrStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.VecMapStrMapStrStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::reverse_iterator":
        return _cstl.VecMapStrMapStrStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::reverse_iterator":
        return _cstl.VecMapStrMapStrStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrMapStrStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::allocator_type":
        return _cstl.VecMapStrMapStrStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrMapStrStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.VecMapStrMapStrStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrMapStrStr_swiginit(self, _cstl.new_VecMapStrMapStrStr(*args))

    def push_back(self, x: "MapStrMapStrStr") -> "void":
        return _cstl.VecMapStrMapStrStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::value_type const &":
        return _cstl.VecMapStrMapStrStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::value_type const &":
        return _cstl.VecMapStrMapStrStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::size_type", x: "MapStrMapStrStr") -> "void":
        return _cstl.VecMapStrMapStrStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrMapStrStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrMapStrStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::size_type") -> "void":
        return _cstl.VecMapStrMapStrStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.VecMapStrMapStrStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrMapStrStr

# Register VecMapStrMapStrStr in _cstl:
_cstl.VecMapStrMapStrStr_swigregister(VecMapStrMapStrStr)

class VecMapStrMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrMapStrFloat___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.VecMapStrMapStrFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > > > > > > > *":
        return _cstl.VecMapStrMapStrFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrMapStrFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::difference_type") -> "void":
        return _cstl.VecMapStrMapStrFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapStrFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::value_type const &":
        return _cstl.VecMapStrMapStrFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapStrFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::value_type":
        return _cstl.VecMapStrMapStrFloat_pop(self)

    def append(self, x: "MapStrMapStrFloat") -> "void":
        return _cstl.VecMapStrMapStrFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrMapStrFloat_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.VecMapStrMapStrFloat_size(self)

    def swap(self, v: "VecMapStrMapStrFloat") -> "void":
        return _cstl.VecMapStrMapStrFloat_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.VecMapStrMapStrFloat_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.VecMapStrMapStrFloat_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::reverse_iterator":
        return _cstl.VecMapStrMapStrFloat_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::reverse_iterator":
        return _cstl.VecMapStrMapStrFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrMapStrFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::allocator_type":
        return _cstl.VecMapStrMapStrFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrMapStrFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.VecMapStrMapStrFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrMapStrFloat_swiginit(self, _cstl.new_VecMapStrMapStrFloat(*args))

    def push_back(self, x: "MapStrMapStrFloat") -> "void":
        return _cstl.VecMapStrMapStrFloat_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::value_type const &":
        return _cstl.VecMapStrMapStrFloat_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::value_type const &":
        return _cstl.VecMapStrMapStrFloat_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::size_type", x: "MapStrMapStrFloat") -> "void":
        return _cstl.VecMapStrMapStrFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrMapStrFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrMapStrFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::size_type") -> "void":
        return _cstl.VecMapStrMapStrFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.VecMapStrMapStrFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrMapStrFloat

# Register VecMapStrMapStrFloat in _cstl:
_cstl.VecMapStrMapStrFloat_swigregister(VecMapStrMapStrFloat)

class VecMapStrMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrMapStrDouble___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.VecMapStrMapStrDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > > > > > > > *":
        return _cstl.VecMapStrMapStrDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrMapStrDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::difference_type") -> "void":
        return _cstl.VecMapStrMapStrDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapStrDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::value_type const &":
        return _cstl.VecMapStrMapStrDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapStrDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::value_type":
        return _cstl.VecMapStrMapStrDouble_pop(self)

    def append(self, x: "MapStrMapStrDouble") -> "void":
        return _cstl.VecMapStrMapStrDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrMapStrDouble_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.VecMapStrMapStrDouble_size(self)

    def swap(self, v: "VecMapStrMapStrDouble") -> "void":
        return _cstl.VecMapStrMapStrDouble_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.VecMapStrMapStrDouble_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.VecMapStrMapStrDouble_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::reverse_iterator":
        return _cstl.VecMapStrMapStrDouble_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::reverse_iterator":
        return _cstl.VecMapStrMapStrDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrMapStrDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::allocator_type":
        return _cstl.VecMapStrMapStrDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrMapStrDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.VecMapStrMapStrDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrMapStrDouble_swiginit(self, _cstl.new_VecMapStrMapStrDouble(*args))

    def push_back(self, x: "MapStrMapStrDouble") -> "void":
        return _cstl.VecMapStrMapStrDouble_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::value_type const &":
        return _cstl.VecMapStrMapStrDouble_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::value_type const &":
        return _cstl.VecMapStrMapStrDouble_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::size_type", x: "MapStrMapStrDouble") -> "void":
        return _cstl.VecMapStrMapStrDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrMapStrDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrMapStrDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::size_type") -> "void":
        return _cstl.VecMapStrMapStrDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.VecMapStrMapStrDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrMapStrDouble

# Register VecMapStrMapStrDouble in _cstl:
_cstl.VecMapStrMapStrDouble_swigregister(VecMapStrMapStrDouble)

class VecMapStrMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrMapStrBool___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.VecMapStrMapStrBool___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > > > > > > > *":
        return _cstl.VecMapStrMapStrBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrMapStrBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::difference_type") -> "void":
        return _cstl.VecMapStrMapStrBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapStrBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::value_type const &":
        return _cstl.VecMapStrMapStrBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapStrBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::value_type":
        return _cstl.VecMapStrMapStrBool_pop(self)

    def append(self, x: "MapStrMapStrBool") -> "void":
        return _cstl.VecMapStrMapStrBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrMapStrBool_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.VecMapStrMapStrBool_size(self)

    def swap(self, v: "VecMapStrMapStrBool") -> "void":
        return _cstl.VecMapStrMapStrBool_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.VecMapStrMapStrBool_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.VecMapStrMapStrBool_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::reverse_iterator":
        return _cstl.VecMapStrMapStrBool_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::reverse_iterator":
        return _cstl.VecMapStrMapStrBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrMapStrBool_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::allocator_type":
        return _cstl.VecMapStrMapStrBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrMapStrBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.VecMapStrMapStrBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrMapStrBool_swiginit(self, _cstl.new_VecMapStrMapStrBool(*args))

    def push_back(self, x: "MapStrMapStrBool") -> "void":
        return _cstl.VecMapStrMapStrBool_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::value_type const &":
        return _cstl.VecMapStrMapStrBool_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::value_type const &":
        return _cstl.VecMapStrMapStrBool_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::size_type", x: "MapStrMapStrBool") -> "void":
        return _cstl.VecMapStrMapStrBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrMapStrBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrMapStrBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::size_type") -> "void":
        return _cstl.VecMapStrMapStrBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.VecMapStrMapStrBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrMapStrBool

# Register VecMapStrMapStrBool in _cstl:
_cstl.VecMapStrMapStrBool_swigregister(VecMapStrMapStrBool)

class VecMapStrMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrMapStrLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.VecMapStrMapStrLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > > > > > > > *":
        return _cstl.VecMapStrMapStrLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrMapStrLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecMapStrMapStrLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapStrLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::value_type const &":
        return _cstl.VecMapStrMapStrLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapStrLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::value_type":
        return _cstl.VecMapStrMapStrLong_pop(self)

    def append(self, x: "MapStrMapStrLong") -> "void":
        return _cstl.VecMapStrMapStrLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrMapStrLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.VecMapStrMapStrLong_size(self)

    def swap(self, v: "VecMapStrMapStrLong") -> "void":
        return _cstl.VecMapStrMapStrLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.VecMapStrMapStrLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.VecMapStrMapStrLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapStrMapStrLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapStrMapStrLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrMapStrLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::allocator_type":
        return _cstl.VecMapStrMapStrLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrMapStrLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.VecMapStrMapStrLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrMapStrLong_swiginit(self, _cstl.new_VecMapStrMapStrLong(*args))

    def push_back(self, x: "MapStrMapStrLong") -> "void":
        return _cstl.VecMapStrMapStrLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::value_type const &":
        return _cstl.VecMapStrMapStrLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::value_type const &":
        return _cstl.VecMapStrMapStrLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::size_type", x: "MapStrMapStrLong") -> "void":
        return _cstl.VecMapStrMapStrLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrMapStrLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrMapStrLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::size_type") -> "void":
        return _cstl.VecMapStrMapStrLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.VecMapStrMapStrLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrMapStrLong

# Register VecMapStrMapStrLong in _cstl:
_cstl.VecMapStrMapStrLong_swigregister(VecMapStrMapStrLong)

class VecMapStrMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrMapLongInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.VecMapStrMapLongInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > > > > > > > *":
        return _cstl.VecMapStrMapLongInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrMapLongInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::difference_type") -> "void":
        return _cstl.VecMapStrMapLongInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapLongInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::value_type const &":
        return _cstl.VecMapStrMapLongInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapLongInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::value_type":
        return _cstl.VecMapStrMapLongInt_pop(self)

    def append(self, x: "MapStrMapLongInt") -> "void":
        return _cstl.VecMapStrMapLongInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrMapLongInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.VecMapStrMapLongInt_size(self)

    def swap(self, v: "VecMapStrMapLongInt") -> "void":
        return _cstl.VecMapStrMapLongInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.VecMapStrMapLongInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.VecMapStrMapLongInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::reverse_iterator":
        return _cstl.VecMapStrMapLongInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::reverse_iterator":
        return _cstl.VecMapStrMapLongInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrMapLongInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::allocator_type":
        return _cstl.VecMapStrMapLongInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrMapLongInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.VecMapStrMapLongInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrMapLongInt_swiginit(self, _cstl.new_VecMapStrMapLongInt(*args))

    def push_back(self, x: "MapStrMapLongInt") -> "void":
        return _cstl.VecMapStrMapLongInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::value_type const &":
        return _cstl.VecMapStrMapLongInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::value_type const &":
        return _cstl.VecMapStrMapLongInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::size_type", x: "MapStrMapLongInt") -> "void":
        return _cstl.VecMapStrMapLongInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrMapLongInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrMapLongInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::size_type") -> "void":
        return _cstl.VecMapStrMapLongInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.VecMapStrMapLongInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrMapLongInt

# Register VecMapStrMapLongInt in _cstl:
_cstl.VecMapStrMapLongInt_swigregister(VecMapStrMapLongInt)

class VecMapStrMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrMapLongStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.VecMapStrMapLongStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > > > > > > > *":
        return _cstl.VecMapStrMapLongStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrMapLongStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::difference_type") -> "void":
        return _cstl.VecMapStrMapLongStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapLongStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::value_type const &":
        return _cstl.VecMapStrMapLongStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapLongStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::value_type":
        return _cstl.VecMapStrMapLongStr_pop(self)

    def append(self, x: "MapStrMapLongStr") -> "void":
        return _cstl.VecMapStrMapLongStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrMapLongStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.VecMapStrMapLongStr_size(self)

    def swap(self, v: "VecMapStrMapLongStr") -> "void":
        return _cstl.VecMapStrMapLongStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.VecMapStrMapLongStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.VecMapStrMapLongStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::reverse_iterator":
        return _cstl.VecMapStrMapLongStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::reverse_iterator":
        return _cstl.VecMapStrMapLongStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrMapLongStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::allocator_type":
        return _cstl.VecMapStrMapLongStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrMapLongStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.VecMapStrMapLongStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrMapLongStr_swiginit(self, _cstl.new_VecMapStrMapLongStr(*args))

    def push_back(self, x: "MapStrMapLongStr") -> "void":
        return _cstl.VecMapStrMapLongStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::value_type const &":
        return _cstl.VecMapStrMapLongStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::value_type const &":
        return _cstl.VecMapStrMapLongStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::size_type", x: "MapStrMapLongStr") -> "void":
        return _cstl.VecMapStrMapLongStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrMapLongStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrMapLongStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::size_type") -> "void":
        return _cstl.VecMapStrMapLongStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.VecMapStrMapLongStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrMapLongStr

# Register VecMapStrMapLongStr in _cstl:
_cstl.VecMapStrMapLongStr_swigregister(VecMapStrMapLongStr)

class VecMapStrMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrMapLongFloat___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.VecMapStrMapLongFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > > > > > > > *":
        return _cstl.VecMapStrMapLongFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrMapLongFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::difference_type") -> "void":
        return _cstl.VecMapStrMapLongFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapLongFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::value_type const &":
        return _cstl.VecMapStrMapLongFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapLongFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::value_type":
        return _cstl.VecMapStrMapLongFloat_pop(self)

    def append(self, x: "MapStrMapLongFloat") -> "void":
        return _cstl.VecMapStrMapLongFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrMapLongFloat_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.VecMapStrMapLongFloat_size(self)

    def swap(self, v: "VecMapStrMapLongFloat") -> "void":
        return _cstl.VecMapStrMapLongFloat_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.VecMapStrMapLongFloat_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.VecMapStrMapLongFloat_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::reverse_iterator":
        return _cstl.VecMapStrMapLongFloat_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::reverse_iterator":
        return _cstl.VecMapStrMapLongFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrMapLongFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::allocator_type":
        return _cstl.VecMapStrMapLongFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrMapLongFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.VecMapStrMapLongFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrMapLongFloat_swiginit(self, _cstl.new_VecMapStrMapLongFloat(*args))

    def push_back(self, x: "MapStrMapLongFloat") -> "void":
        return _cstl.VecMapStrMapLongFloat_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::value_type const &":
        return _cstl.VecMapStrMapLongFloat_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::value_type const &":
        return _cstl.VecMapStrMapLongFloat_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::size_type", x: "MapStrMapLongFloat") -> "void":
        return _cstl.VecMapStrMapLongFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrMapLongFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrMapLongFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::size_type") -> "void":
        return _cstl.VecMapStrMapLongFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.VecMapStrMapLongFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrMapLongFloat

# Register VecMapStrMapLongFloat in _cstl:
_cstl.VecMapStrMapLongFloat_swigregister(VecMapStrMapLongFloat)

class VecMapStrMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrMapLongDouble___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.VecMapStrMapLongDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > > > > > > > *":
        return _cstl.VecMapStrMapLongDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrMapLongDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::difference_type") -> "void":
        return _cstl.VecMapStrMapLongDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapLongDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::value_type const &":
        return _cstl.VecMapStrMapLongDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapLongDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::value_type":
        return _cstl.VecMapStrMapLongDouble_pop(self)

    def append(self, x: "MapStrMapLongDouble") -> "void":
        return _cstl.VecMapStrMapLongDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrMapLongDouble_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.VecMapStrMapLongDouble_size(self)

    def swap(self, v: "VecMapStrMapLongDouble") -> "void":
        return _cstl.VecMapStrMapLongDouble_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.VecMapStrMapLongDouble_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.VecMapStrMapLongDouble_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::reverse_iterator":
        return _cstl.VecMapStrMapLongDouble_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::reverse_iterator":
        return _cstl.VecMapStrMapLongDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrMapLongDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::allocator_type":
        return _cstl.VecMapStrMapLongDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrMapLongDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.VecMapStrMapLongDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrMapLongDouble_swiginit(self, _cstl.new_VecMapStrMapLongDouble(*args))

    def push_back(self, x: "MapStrMapLongDouble") -> "void":
        return _cstl.VecMapStrMapLongDouble_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::value_type const &":
        return _cstl.VecMapStrMapLongDouble_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::value_type const &":
        return _cstl.VecMapStrMapLongDouble_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::size_type", x: "MapStrMapLongDouble") -> "void":
        return _cstl.VecMapStrMapLongDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrMapLongDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrMapLongDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::size_type") -> "void":
        return _cstl.VecMapStrMapLongDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.VecMapStrMapLongDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrMapLongDouble

# Register VecMapStrMapLongDouble in _cstl:
_cstl.VecMapStrMapLongDouble_swigregister(VecMapStrMapLongDouble)

class VecMapStrMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrMapLongBool___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.VecMapStrMapLongBool___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > > > > > > > *":
        return _cstl.VecMapStrMapLongBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrMapLongBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::difference_type") -> "void":
        return _cstl.VecMapStrMapLongBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapLongBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::value_type const &":
        return _cstl.VecMapStrMapLongBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapLongBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::value_type":
        return _cstl.VecMapStrMapLongBool_pop(self)

    def append(self, x: "MapStrMapLongBool") -> "void":
        return _cstl.VecMapStrMapLongBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrMapLongBool_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.VecMapStrMapLongBool_size(self)

    def swap(self, v: "VecMapStrMapLongBool") -> "void":
        return _cstl.VecMapStrMapLongBool_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.VecMapStrMapLongBool_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.VecMapStrMapLongBool_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::reverse_iterator":
        return _cstl.VecMapStrMapLongBool_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::reverse_iterator":
        return _cstl.VecMapStrMapLongBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrMapLongBool_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::allocator_type":
        return _cstl.VecMapStrMapLongBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrMapLongBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.VecMapStrMapLongBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrMapLongBool_swiginit(self, _cstl.new_VecMapStrMapLongBool(*args))

    def push_back(self, x: "MapStrMapLongBool") -> "void":
        return _cstl.VecMapStrMapLongBool_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::value_type const &":
        return _cstl.VecMapStrMapLongBool_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::value_type const &":
        return _cstl.VecMapStrMapLongBool_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::size_type", x: "MapStrMapLongBool") -> "void":
        return _cstl.VecMapStrMapLongBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrMapLongBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrMapLongBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::size_type") -> "void":
        return _cstl.VecMapStrMapLongBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.VecMapStrMapLongBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrMapLongBool

# Register VecMapStrMapLongBool in _cstl:
_cstl.VecMapStrMapLongBool_swigregister(VecMapStrMapLongBool)

class VecMapStrMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapStrMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapStrMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapStrMapLongLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.VecMapStrMapLongLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::difference_type") -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > > > > >,std::allocator< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > >,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > > > > > > > *":
        return _cstl.VecMapStrMapLongLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapStrMapLongLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecMapStrMapLongLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapLongLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::value_type const &":
        return _cstl.VecMapStrMapLongLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapStrMapLongLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::value_type":
        return _cstl.VecMapStrMapLongLong_pop(self)

    def append(self, x: "MapStrMapLongLong") -> "void":
        return _cstl.VecMapStrMapLongLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapStrMapLongLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.VecMapStrMapLongLong_size(self)

    def swap(self, v: "VecMapStrMapLongLong") -> "void":
        return _cstl.VecMapStrMapLongLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.VecMapStrMapLongLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.VecMapStrMapLongLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapStrMapLongLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapStrMapLongLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapStrMapLongLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::allocator_type":
        return _cstl.VecMapStrMapLongLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapStrMapLongLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.VecMapStrMapLongLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapStrMapLongLong_swiginit(self, _cstl.new_VecMapStrMapLongLong(*args))

    def push_back(self, x: "MapStrMapLongLong") -> "void":
        return _cstl.VecMapStrMapLongLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::value_type const &":
        return _cstl.VecMapStrMapLongLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::value_type const &":
        return _cstl.VecMapStrMapLongLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::size_type", x: "MapStrMapLongLong") -> "void":
        return _cstl.VecMapStrMapLongLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapStrMapLongLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapStrMapLongLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::size_type") -> "void":
        return _cstl.VecMapStrMapLongLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.VecMapStrMapLongLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapStrMapLongLong

# Register VecMapStrMapLongLong in _cstl:
_cstl.VecMapStrMapLongLong_swigregister(VecMapStrMapLongLong)

class VecMapLongVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongVecInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::size_type":
        return _cstl.VecMapLongVecInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::vector< int,std::allocator< int > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::vector< int,std::allocator< int > > > > >,std::allocator< std::unordered_map< std::int64_t,std::vector< int,std::allocator< int > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::vector< int,std::allocator< int > > > > > > > *":
        return _cstl.VecMapLongVecInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongVecInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::difference_type") -> "void":
        return _cstl.VecMapLongVecInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongVecInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::value_type const &":
        return _cstl.VecMapLongVecInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongVecInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::value_type":
        return _cstl.VecMapLongVecInt_pop(self)

    def append(self, x: "MapLongVecInt") -> "void":
        return _cstl.VecMapLongVecInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongVecInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::size_type":
        return _cstl.VecMapLongVecInt_size(self)

    def swap(self, v: "VecMapLongVecInt") -> "void":
        return _cstl.VecMapLongVecInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::iterator":
        return _cstl.VecMapLongVecInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::iterator":
        return _cstl.VecMapLongVecInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::reverse_iterator":
        return _cstl.VecMapLongVecInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::reverse_iterator":
        return _cstl.VecMapLongVecInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongVecInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::allocator_type":
        return _cstl.VecMapLongVecInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongVecInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::iterator":
        return _cstl.VecMapLongVecInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongVecInt_swiginit(self, _cstl.new_VecMapLongVecInt(*args))

    def push_back(self, x: "MapLongVecInt") -> "void":
        return _cstl.VecMapLongVecInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::value_type const &":
        return _cstl.VecMapLongVecInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::value_type const &":
        return _cstl.VecMapLongVecInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::size_type", x: "MapLongVecInt") -> "void":
        return _cstl.VecMapLongVecInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongVecInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongVecInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::size_type") -> "void":
        return _cstl.VecMapLongVecInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< int > > >::size_type":
        return _cstl.VecMapLongVecInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongVecInt

# Register VecMapLongVecInt in _cstl:
_cstl.VecMapLongVecInt_swigregister(VecMapLongVecInt)

class VecMapLongVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongVecStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::size_type":
        return _cstl.VecMapLongVecStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::string,std::allocator< std::string > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::vector< std::string,std::allocator< std::string > > > > >,std::allocator< std::unordered_map< std::int64_t,std::vector< std::string,std::allocator< std::string > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::vector< std::string,std::allocator< std::string > > > > > > > *":
        return _cstl.VecMapLongVecStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongVecStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::difference_type") -> "void":
        return _cstl.VecMapLongVecStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongVecStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::value_type const &":
        return _cstl.VecMapLongVecStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongVecStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::value_type":
        return _cstl.VecMapLongVecStr_pop(self)

    def append(self, x: "MapLongVecStr") -> "void":
        return _cstl.VecMapLongVecStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongVecStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::size_type":
        return _cstl.VecMapLongVecStr_size(self)

    def swap(self, v: "VecMapLongVecStr") -> "void":
        return _cstl.VecMapLongVecStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::iterator":
        return _cstl.VecMapLongVecStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::iterator":
        return _cstl.VecMapLongVecStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::reverse_iterator":
        return _cstl.VecMapLongVecStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::reverse_iterator":
        return _cstl.VecMapLongVecStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongVecStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::allocator_type":
        return _cstl.VecMapLongVecStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongVecStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::iterator":
        return _cstl.VecMapLongVecStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongVecStr_swiginit(self, _cstl.new_VecMapLongVecStr(*args))

    def push_back(self, x: "MapLongVecStr") -> "void":
        return _cstl.VecMapLongVecStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::value_type const &":
        return _cstl.VecMapLongVecStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::value_type const &":
        return _cstl.VecMapLongVecStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::size_type", x: "MapLongVecStr") -> "void":
        return _cstl.VecMapLongVecStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongVecStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongVecStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::size_type") -> "void":
        return _cstl.VecMapLongVecStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::string > > >::size_type":
        return _cstl.VecMapLongVecStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongVecStr

# Register VecMapLongVecStr in _cstl:
_cstl.VecMapLongVecStr_swigregister(VecMapLongVecStr)

class VecMapLongVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongVecFloat___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::size_type":
        return _cstl.VecMapLongVecFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::vector< float,std::allocator< float > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::vector< float,std::allocator< float > > > > >,std::allocator< std::unordered_map< std::int64_t,std::vector< float,std::allocator< float > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::vector< float,std::allocator< float > > > > > > > *":
        return _cstl.VecMapLongVecFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongVecFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::difference_type") -> "void":
        return _cstl.VecMapLongVecFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongVecFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::value_type const &":
        return _cstl.VecMapLongVecFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongVecFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::value_type":
        return _cstl.VecMapLongVecFloat_pop(self)

    def append(self, x: "MapLongVecFloat") -> "void":
        return _cstl.VecMapLongVecFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongVecFloat_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::size_type":
        return _cstl.VecMapLongVecFloat_size(self)

    def swap(self, v: "VecMapLongVecFloat") -> "void":
        return _cstl.VecMapLongVecFloat_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::iterator":
        return _cstl.VecMapLongVecFloat_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::iterator":
        return _cstl.VecMapLongVecFloat_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::reverse_iterator":
        return _cstl.VecMapLongVecFloat_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::reverse_iterator":
        return _cstl.VecMapLongVecFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongVecFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::allocator_type":
        return _cstl.VecMapLongVecFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongVecFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::iterator":
        return _cstl.VecMapLongVecFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongVecFloat_swiginit(self, _cstl.new_VecMapLongVecFloat(*args))

    def push_back(self, x: "MapLongVecFloat") -> "void":
        return _cstl.VecMapLongVecFloat_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::value_type const &":
        return _cstl.VecMapLongVecFloat_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::value_type const &":
        return _cstl.VecMapLongVecFloat_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::size_type", x: "MapLongVecFloat") -> "void":
        return _cstl.VecMapLongVecFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongVecFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongVecFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::size_type") -> "void":
        return _cstl.VecMapLongVecFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< float > > >::size_type":
        return _cstl.VecMapLongVecFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongVecFloat

# Register VecMapLongVecFloat in _cstl:
_cstl.VecMapLongVecFloat_swigregister(VecMapLongVecFloat)

class VecMapLongVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongVecDouble___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::size_type":
        return _cstl.VecMapLongVecDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::vector< double,std::allocator< double > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::vector< double,std::allocator< double > > > > >,std::allocator< std::unordered_map< std::int64_t,std::vector< double,std::allocator< double > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::vector< double,std::allocator< double > > > > > > > *":
        return _cstl.VecMapLongVecDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongVecDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::difference_type") -> "void":
        return _cstl.VecMapLongVecDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongVecDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::value_type const &":
        return _cstl.VecMapLongVecDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongVecDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::value_type":
        return _cstl.VecMapLongVecDouble_pop(self)

    def append(self, x: "MapLongVecDouble") -> "void":
        return _cstl.VecMapLongVecDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongVecDouble_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::size_type":
        return _cstl.VecMapLongVecDouble_size(self)

    def swap(self, v: "VecMapLongVecDouble") -> "void":
        return _cstl.VecMapLongVecDouble_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::iterator":
        return _cstl.VecMapLongVecDouble_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::iterator":
        return _cstl.VecMapLongVecDouble_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::reverse_iterator":
        return _cstl.VecMapLongVecDouble_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::reverse_iterator":
        return _cstl.VecMapLongVecDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongVecDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::allocator_type":
        return _cstl.VecMapLongVecDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongVecDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::iterator":
        return _cstl.VecMapLongVecDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongVecDouble_swiginit(self, _cstl.new_VecMapLongVecDouble(*args))

    def push_back(self, x: "MapLongVecDouble") -> "void":
        return _cstl.VecMapLongVecDouble_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::value_type const &":
        return _cstl.VecMapLongVecDouble_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::value_type const &":
        return _cstl.VecMapLongVecDouble_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::size_type", x: "MapLongVecDouble") -> "void":
        return _cstl.VecMapLongVecDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongVecDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongVecDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::size_type") -> "void":
        return _cstl.VecMapLongVecDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< double > > >::size_type":
        return _cstl.VecMapLongVecDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongVecDouble

# Register VecMapLongVecDouble in _cstl:
_cstl.VecMapLongVecDouble_swigregister(VecMapLongVecDouble)

class VecMapLongVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongVecBool___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::size_type":
        return _cstl.VecMapLongVecBool___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::vector< bool,std::allocator< bool > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::vector< bool,std::allocator< bool > > > > >,std::allocator< std::unordered_map< std::int64_t,std::vector< bool,std::allocator< bool > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::vector< bool,std::allocator< bool > > > > > > > *":
        return _cstl.VecMapLongVecBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongVecBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::difference_type") -> "void":
        return _cstl.VecMapLongVecBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongVecBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::value_type const &":
        return _cstl.VecMapLongVecBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongVecBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::value_type":
        return _cstl.VecMapLongVecBool_pop(self)

    def append(self, x: "MapLongVecBool") -> "void":
        return _cstl.VecMapLongVecBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongVecBool_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::size_type":
        return _cstl.VecMapLongVecBool_size(self)

    def swap(self, v: "VecMapLongVecBool") -> "void":
        return _cstl.VecMapLongVecBool_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::iterator":
        return _cstl.VecMapLongVecBool_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::iterator":
        return _cstl.VecMapLongVecBool_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::reverse_iterator":
        return _cstl.VecMapLongVecBool_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::reverse_iterator":
        return _cstl.VecMapLongVecBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongVecBool_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::allocator_type":
        return _cstl.VecMapLongVecBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongVecBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::iterator":
        return _cstl.VecMapLongVecBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongVecBool_swiginit(self, _cstl.new_VecMapLongVecBool(*args))

    def push_back(self, x: "MapLongVecBool") -> "void":
        return _cstl.VecMapLongVecBool_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::value_type const &":
        return _cstl.VecMapLongVecBool_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::value_type const &":
        return _cstl.VecMapLongVecBool_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::size_type", x: "MapLongVecBool") -> "void":
        return _cstl.VecMapLongVecBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongVecBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongVecBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::size_type") -> "void":
        return _cstl.VecMapLongVecBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< bool > > >::size_type":
        return _cstl.VecMapLongVecBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongVecBool

# Register VecMapLongVecBool in _cstl:
_cstl.VecMapLongVecBool_swigregister(VecMapLongVecBool)

class VecMapLongVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongVecLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::size_type":
        return _cstl.VecMapLongVecLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t,std::allocator< std::int64_t > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::vector< std::int64_t,std::allocator< std::int64_t > > > > >,std::allocator< std::unordered_map< std::int64_t,std::vector< std::int64_t,std::allocator< std::int64_t > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::vector< std::int64_t,std::allocator< std::int64_t > > > > > > > *":
        return _cstl.VecMapLongVecLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongVecLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecMapLongVecLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongVecLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::value_type const &":
        return _cstl.VecMapLongVecLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongVecLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::value_type":
        return _cstl.VecMapLongVecLong_pop(self)

    def append(self, x: "MapLongVecLong") -> "void":
        return _cstl.VecMapLongVecLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongVecLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::size_type":
        return _cstl.VecMapLongVecLong_size(self)

    def swap(self, v: "VecMapLongVecLong") -> "void":
        return _cstl.VecMapLongVecLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::iterator":
        return _cstl.VecMapLongVecLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::iterator":
        return _cstl.VecMapLongVecLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapLongVecLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapLongVecLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongVecLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::allocator_type":
        return _cstl.VecMapLongVecLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongVecLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::iterator":
        return _cstl.VecMapLongVecLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongVecLong_swiginit(self, _cstl.new_VecMapLongVecLong(*args))

    def push_back(self, x: "MapLongVecLong") -> "void":
        return _cstl.VecMapLongVecLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::value_type const &":
        return _cstl.VecMapLongVecLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::value_type const &":
        return _cstl.VecMapLongVecLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::size_type", x: "MapLongVecLong") -> "void":
        return _cstl.VecMapLongVecLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongVecLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongVecLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::size_type") -> "void":
        return _cstl.VecMapLongVecLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::size_type":
        return _cstl.VecMapLongVecLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongVecLong

# Register VecMapLongVecLong in _cstl:
_cstl.VecMapLongVecLong_swigregister(VecMapLongVecLong)

class VecMapLongSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongSetInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::size_type":
        return _cstl.VecMapLongSetInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_set< int,std::hash< int >,std::equal_to< int >,std::allocator< int > > > > > > > *":
        return _cstl.VecMapLongSetInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongSetInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::difference_type") -> "void":
        return _cstl.VecMapLongSetInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongSetInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::value_type const &":
        return _cstl.VecMapLongSetInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongSetInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::value_type":
        return _cstl.VecMapLongSetInt_pop(self)

    def append(self, x: "MapLongSetInt") -> "void":
        return _cstl.VecMapLongSetInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongSetInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::size_type":
        return _cstl.VecMapLongSetInt_size(self)

    def swap(self, v: "VecMapLongSetInt") -> "void":
        return _cstl.VecMapLongSetInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::iterator":
        return _cstl.VecMapLongSetInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::iterator":
        return _cstl.VecMapLongSetInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::reverse_iterator":
        return _cstl.VecMapLongSetInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::reverse_iterator":
        return _cstl.VecMapLongSetInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongSetInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::allocator_type":
        return _cstl.VecMapLongSetInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongSetInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::iterator":
        return _cstl.VecMapLongSetInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongSetInt_swiginit(self, _cstl.new_VecMapLongSetInt(*args))

    def push_back(self, x: "MapLongSetInt") -> "void":
        return _cstl.VecMapLongSetInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::value_type const &":
        return _cstl.VecMapLongSetInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::value_type const &":
        return _cstl.VecMapLongSetInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::size_type", x: "MapLongSetInt") -> "void":
        return _cstl.VecMapLongSetInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongSetInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongSetInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::size_type") -> "void":
        return _cstl.VecMapLongSetInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< int > > >::size_type":
        return _cstl.VecMapLongSetInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongSetInt

# Register VecMapLongSetInt in _cstl:
_cstl.VecMapLongSetInt_swigregister(VecMapLongSetInt)

class VecMapLongSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongSetStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::size_type":
        return _cstl.VecMapLongSetStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_set< std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::string > > > > > > > *":
        return _cstl.VecMapLongSetStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongSetStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::difference_type") -> "void":
        return _cstl.VecMapLongSetStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongSetStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::value_type const &":
        return _cstl.VecMapLongSetStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongSetStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::value_type":
        return _cstl.VecMapLongSetStr_pop(self)

    def append(self, x: "MapLongSetStr") -> "void":
        return _cstl.VecMapLongSetStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongSetStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::size_type":
        return _cstl.VecMapLongSetStr_size(self)

    def swap(self, v: "VecMapLongSetStr") -> "void":
        return _cstl.VecMapLongSetStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::iterator":
        return _cstl.VecMapLongSetStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::iterator":
        return _cstl.VecMapLongSetStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::reverse_iterator":
        return _cstl.VecMapLongSetStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::reverse_iterator":
        return _cstl.VecMapLongSetStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongSetStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::allocator_type":
        return _cstl.VecMapLongSetStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongSetStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::iterator":
        return _cstl.VecMapLongSetStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongSetStr_swiginit(self, _cstl.new_VecMapLongSetStr(*args))

    def push_back(self, x: "MapLongSetStr") -> "void":
        return _cstl.VecMapLongSetStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::value_type const &":
        return _cstl.VecMapLongSetStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::value_type const &":
        return _cstl.VecMapLongSetStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::size_type", x: "MapLongSetStr") -> "void":
        return _cstl.VecMapLongSetStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongSetStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongSetStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::size_type") -> "void":
        return _cstl.VecMapLongSetStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::size_type":
        return _cstl.VecMapLongSetStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongSetStr

# Register VecMapLongSetStr in _cstl:
_cstl.VecMapLongSetStr_swigregister(VecMapLongSetStr)

class VecMapLongSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongSetLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.VecMapLongSetLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_set< std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::int64_t > > > > > > > *":
        return _cstl.VecMapLongSetLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongSetLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecMapLongSetLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongSetLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::value_type const &":
        return _cstl.VecMapLongSetLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongSetLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::value_type":
        return _cstl.VecMapLongSetLong_pop(self)

    def append(self, x: "MapLongSetLong") -> "void":
        return _cstl.VecMapLongSetLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongSetLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.VecMapLongSetLong_size(self)

    def swap(self, v: "VecMapLongSetLong") -> "void":
        return _cstl.VecMapLongSetLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.VecMapLongSetLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.VecMapLongSetLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapLongSetLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapLongSetLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongSetLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::allocator_type":
        return _cstl.VecMapLongSetLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongSetLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.VecMapLongSetLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongSetLong_swiginit(self, _cstl.new_VecMapLongSetLong(*args))

    def push_back(self, x: "MapLongSetLong") -> "void":
        return _cstl.VecMapLongSetLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::value_type const &":
        return _cstl.VecMapLongSetLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::value_type const &":
        return _cstl.VecMapLongSetLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::size_type", x: "MapLongSetLong") -> "void":
        return _cstl.VecMapLongSetLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongSetLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongSetLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::size_type") -> "void":
        return _cstl.VecMapLongSetLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.VecMapLongSetLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongSetLong

# Register VecMapLongSetLong in _cstl:
_cstl.VecMapLongSetLong_swigregister(VecMapLongSetLong)

class VecMapLongMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongMapIntInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::size_type":
        return _cstl.VecMapLongMapIntInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< int,int,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,int > > > > > > > > *":
        return _cstl.VecMapLongMapIntInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongMapIntInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::difference_type") -> "void":
        return _cstl.VecMapLongMapIntInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapIntInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::value_type const &":
        return _cstl.VecMapLongMapIntInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapIntInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::value_type":
        return _cstl.VecMapLongMapIntInt_pop(self)

    def append(self, x: "MapLongMapIntInt") -> "void":
        return _cstl.VecMapLongMapIntInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongMapIntInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::size_type":
        return _cstl.VecMapLongMapIntInt_size(self)

    def swap(self, v: "VecMapLongMapIntInt") -> "void":
        return _cstl.VecMapLongMapIntInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::iterator":
        return _cstl.VecMapLongMapIntInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::iterator":
        return _cstl.VecMapLongMapIntInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::reverse_iterator":
        return _cstl.VecMapLongMapIntInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::reverse_iterator":
        return _cstl.VecMapLongMapIntInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongMapIntInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::allocator_type":
        return _cstl.VecMapLongMapIntInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongMapIntInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::iterator":
        return _cstl.VecMapLongMapIntInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongMapIntInt_swiginit(self, _cstl.new_VecMapLongMapIntInt(*args))

    def push_back(self, x: "MapLongMapIntInt") -> "void":
        return _cstl.VecMapLongMapIntInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::value_type const &":
        return _cstl.VecMapLongMapIntInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::value_type const &":
        return _cstl.VecMapLongMapIntInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::size_type", x: "MapLongMapIntInt") -> "void":
        return _cstl.VecMapLongMapIntInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongMapIntInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongMapIntInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::size_type") -> "void":
        return _cstl.VecMapLongMapIntInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::size_type":
        return _cstl.VecMapLongMapIntInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongMapIntInt

# Register VecMapLongMapIntInt in _cstl:
_cstl.VecMapLongMapIntInt_swigregister(VecMapLongMapIntInt)

class VecMapLongMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongMapIntStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.VecMapLongMapIntStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< int,std::string,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::string > > > > > > > > *":
        return _cstl.VecMapLongMapIntStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongMapIntStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::difference_type") -> "void":
        return _cstl.VecMapLongMapIntStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapIntStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::value_type const &":
        return _cstl.VecMapLongMapIntStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapIntStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::value_type":
        return _cstl.VecMapLongMapIntStr_pop(self)

    def append(self, x: "MapLongMapIntStr") -> "void":
        return _cstl.VecMapLongMapIntStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongMapIntStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.VecMapLongMapIntStr_size(self)

    def swap(self, v: "VecMapLongMapIntStr") -> "void":
        return _cstl.VecMapLongMapIntStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.VecMapLongMapIntStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.VecMapLongMapIntStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::reverse_iterator":
        return _cstl.VecMapLongMapIntStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::reverse_iterator":
        return _cstl.VecMapLongMapIntStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongMapIntStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::allocator_type":
        return _cstl.VecMapLongMapIntStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongMapIntStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.VecMapLongMapIntStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongMapIntStr_swiginit(self, _cstl.new_VecMapLongMapIntStr(*args))

    def push_back(self, x: "MapLongMapIntStr") -> "void":
        return _cstl.VecMapLongMapIntStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::value_type const &":
        return _cstl.VecMapLongMapIntStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::value_type const &":
        return _cstl.VecMapLongMapIntStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::size_type", x: "MapLongMapIntStr") -> "void":
        return _cstl.VecMapLongMapIntStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongMapIntStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongMapIntStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::size_type") -> "void":
        return _cstl.VecMapLongMapIntStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.VecMapLongMapIntStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongMapIntStr

# Register VecMapLongMapIntStr in _cstl:
_cstl.VecMapLongMapIntStr_swigregister(VecMapLongMapIntStr)

class VecMapLongMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongMapIntFloat___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::size_type":
        return _cstl.VecMapLongMapIntFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< int,float,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,float > > > > > > > > *":
        return _cstl.VecMapLongMapIntFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongMapIntFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::difference_type") -> "void":
        return _cstl.VecMapLongMapIntFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapIntFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::value_type const &":
        return _cstl.VecMapLongMapIntFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapIntFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::value_type":
        return _cstl.VecMapLongMapIntFloat_pop(self)

    def append(self, x: "MapLongMapIntFloat") -> "void":
        return _cstl.VecMapLongMapIntFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongMapIntFloat_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::size_type":
        return _cstl.VecMapLongMapIntFloat_size(self)

    def swap(self, v: "VecMapLongMapIntFloat") -> "void":
        return _cstl.VecMapLongMapIntFloat_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::iterator":
        return _cstl.VecMapLongMapIntFloat_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::iterator":
        return _cstl.VecMapLongMapIntFloat_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::reverse_iterator":
        return _cstl.VecMapLongMapIntFloat_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::reverse_iterator":
        return _cstl.VecMapLongMapIntFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongMapIntFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::allocator_type":
        return _cstl.VecMapLongMapIntFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongMapIntFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::iterator":
        return _cstl.VecMapLongMapIntFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongMapIntFloat_swiginit(self, _cstl.new_VecMapLongMapIntFloat(*args))

    def push_back(self, x: "MapLongMapIntFloat") -> "void":
        return _cstl.VecMapLongMapIntFloat_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::value_type const &":
        return _cstl.VecMapLongMapIntFloat_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::value_type const &":
        return _cstl.VecMapLongMapIntFloat_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::size_type", x: "MapLongMapIntFloat") -> "void":
        return _cstl.VecMapLongMapIntFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongMapIntFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongMapIntFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::size_type") -> "void":
        return _cstl.VecMapLongMapIntFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::size_type":
        return _cstl.VecMapLongMapIntFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongMapIntFloat

# Register VecMapLongMapIntFloat in _cstl:
_cstl.VecMapLongMapIntFloat_swigregister(VecMapLongMapIntFloat)

class VecMapLongMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongMapIntDouble___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::size_type":
        return _cstl.VecMapLongMapIntDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< int,double,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,double > > > > > > > > *":
        return _cstl.VecMapLongMapIntDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongMapIntDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::difference_type") -> "void":
        return _cstl.VecMapLongMapIntDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapIntDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::value_type const &":
        return _cstl.VecMapLongMapIntDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapIntDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::value_type":
        return _cstl.VecMapLongMapIntDouble_pop(self)

    def append(self, x: "MapLongMapIntDouble") -> "void":
        return _cstl.VecMapLongMapIntDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongMapIntDouble_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::size_type":
        return _cstl.VecMapLongMapIntDouble_size(self)

    def swap(self, v: "VecMapLongMapIntDouble") -> "void":
        return _cstl.VecMapLongMapIntDouble_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::iterator":
        return _cstl.VecMapLongMapIntDouble_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::iterator":
        return _cstl.VecMapLongMapIntDouble_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::reverse_iterator":
        return _cstl.VecMapLongMapIntDouble_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::reverse_iterator":
        return _cstl.VecMapLongMapIntDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongMapIntDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::allocator_type":
        return _cstl.VecMapLongMapIntDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongMapIntDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::iterator":
        return _cstl.VecMapLongMapIntDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongMapIntDouble_swiginit(self, _cstl.new_VecMapLongMapIntDouble(*args))

    def push_back(self, x: "MapLongMapIntDouble") -> "void":
        return _cstl.VecMapLongMapIntDouble_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::value_type const &":
        return _cstl.VecMapLongMapIntDouble_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::value_type const &":
        return _cstl.VecMapLongMapIntDouble_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::size_type", x: "MapLongMapIntDouble") -> "void":
        return _cstl.VecMapLongMapIntDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongMapIntDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongMapIntDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::size_type") -> "void":
        return _cstl.VecMapLongMapIntDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::size_type":
        return _cstl.VecMapLongMapIntDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongMapIntDouble

# Register VecMapLongMapIntDouble in _cstl:
_cstl.VecMapLongMapIntDouble_swigregister(VecMapLongMapIntDouble)

class VecMapLongMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongMapIntBool___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::size_type":
        return _cstl.VecMapLongMapIntBool___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< int,bool,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,bool > > > > > > > > *":
        return _cstl.VecMapLongMapIntBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongMapIntBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::difference_type") -> "void":
        return _cstl.VecMapLongMapIntBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapIntBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::value_type const &":
        return _cstl.VecMapLongMapIntBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapIntBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::value_type":
        return _cstl.VecMapLongMapIntBool_pop(self)

    def append(self, x: "MapLongMapIntBool") -> "void":
        return _cstl.VecMapLongMapIntBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongMapIntBool_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::size_type":
        return _cstl.VecMapLongMapIntBool_size(self)

    def swap(self, v: "VecMapLongMapIntBool") -> "void":
        return _cstl.VecMapLongMapIntBool_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::iterator":
        return _cstl.VecMapLongMapIntBool_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::iterator":
        return _cstl.VecMapLongMapIntBool_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::reverse_iterator":
        return _cstl.VecMapLongMapIntBool_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::reverse_iterator":
        return _cstl.VecMapLongMapIntBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongMapIntBool_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::allocator_type":
        return _cstl.VecMapLongMapIntBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongMapIntBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::iterator":
        return _cstl.VecMapLongMapIntBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongMapIntBool_swiginit(self, _cstl.new_VecMapLongMapIntBool(*args))

    def push_back(self, x: "MapLongMapIntBool") -> "void":
        return _cstl.VecMapLongMapIntBool_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::value_type const &":
        return _cstl.VecMapLongMapIntBool_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::value_type const &":
        return _cstl.VecMapLongMapIntBool_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::size_type", x: "MapLongMapIntBool") -> "void":
        return _cstl.VecMapLongMapIntBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongMapIntBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongMapIntBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::size_type") -> "void":
        return _cstl.VecMapLongMapIntBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::size_type":
        return _cstl.VecMapLongMapIntBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongMapIntBool

# Register VecMapLongMapIntBool in _cstl:
_cstl.VecMapLongMapIntBool_swigregister(VecMapLongMapIntBool)

class VecMapLongMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongMapIntLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.VecMapLongMapIntLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< int,std::int64_t,std::hash< int >,std::equal_to< int >,std::allocator< std::pair< int const,std::int64_t > > > > > > > > *":
        return _cstl.VecMapLongMapIntLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongMapIntLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecMapLongMapIntLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapIntLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::value_type const &":
        return _cstl.VecMapLongMapIntLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapIntLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::value_type":
        return _cstl.VecMapLongMapIntLong_pop(self)

    def append(self, x: "MapLongMapIntLong") -> "void":
        return _cstl.VecMapLongMapIntLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongMapIntLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.VecMapLongMapIntLong_size(self)

    def swap(self, v: "VecMapLongMapIntLong") -> "void":
        return _cstl.VecMapLongMapIntLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.VecMapLongMapIntLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.VecMapLongMapIntLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapLongMapIntLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapLongMapIntLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongMapIntLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::allocator_type":
        return _cstl.VecMapLongMapIntLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongMapIntLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.VecMapLongMapIntLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongMapIntLong_swiginit(self, _cstl.new_VecMapLongMapIntLong(*args))

    def push_back(self, x: "MapLongMapIntLong") -> "void":
        return _cstl.VecMapLongMapIntLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::value_type const &":
        return _cstl.VecMapLongMapIntLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::value_type const &":
        return _cstl.VecMapLongMapIntLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::size_type", x: "MapLongMapIntLong") -> "void":
        return _cstl.VecMapLongMapIntLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongMapIntLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongMapIntLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::size_type") -> "void":
        return _cstl.VecMapLongMapIntLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.VecMapLongMapIntLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongMapIntLong

# Register VecMapLongMapIntLong in _cstl:
_cstl.VecMapLongMapIntLong_swigregister(VecMapLongMapIntLong)

class VecMapLongMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongMapStrInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.VecMapLongMapStrInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::string,int,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,int > > > > > > > > *":
        return _cstl.VecMapLongMapStrInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongMapStrInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::difference_type") -> "void":
        return _cstl.VecMapLongMapStrInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapStrInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::value_type const &":
        return _cstl.VecMapLongMapStrInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapStrInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::value_type":
        return _cstl.VecMapLongMapStrInt_pop(self)

    def append(self, x: "MapLongMapStrInt") -> "void":
        return _cstl.VecMapLongMapStrInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongMapStrInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.VecMapLongMapStrInt_size(self)

    def swap(self, v: "VecMapLongMapStrInt") -> "void":
        return _cstl.VecMapLongMapStrInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.VecMapLongMapStrInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.VecMapLongMapStrInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::reverse_iterator":
        return _cstl.VecMapLongMapStrInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::reverse_iterator":
        return _cstl.VecMapLongMapStrInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongMapStrInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::allocator_type":
        return _cstl.VecMapLongMapStrInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongMapStrInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.VecMapLongMapStrInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongMapStrInt_swiginit(self, _cstl.new_VecMapLongMapStrInt(*args))

    def push_back(self, x: "MapLongMapStrInt") -> "void":
        return _cstl.VecMapLongMapStrInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::value_type const &":
        return _cstl.VecMapLongMapStrInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::value_type const &":
        return _cstl.VecMapLongMapStrInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::size_type", x: "MapLongMapStrInt") -> "void":
        return _cstl.VecMapLongMapStrInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongMapStrInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongMapStrInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::size_type") -> "void":
        return _cstl.VecMapLongMapStrInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.VecMapLongMapStrInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongMapStrInt

# Register VecMapLongMapStrInt in _cstl:
_cstl.VecMapLongMapStrInt_swigregister(VecMapLongMapStrInt)

class VecMapLongMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongMapStrStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.VecMapLongMapStrStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::string,std::string,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::string > > > > > > > > *":
        return _cstl.VecMapLongMapStrStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongMapStrStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::difference_type") -> "void":
        return _cstl.VecMapLongMapStrStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapStrStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::value_type const &":
        return _cstl.VecMapLongMapStrStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapStrStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::value_type":
        return _cstl.VecMapLongMapStrStr_pop(self)

    def append(self, x: "MapLongMapStrStr") -> "void":
        return _cstl.VecMapLongMapStrStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongMapStrStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.VecMapLongMapStrStr_size(self)

    def swap(self, v: "VecMapLongMapStrStr") -> "void":
        return _cstl.VecMapLongMapStrStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.VecMapLongMapStrStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.VecMapLongMapStrStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::reverse_iterator":
        return _cstl.VecMapLongMapStrStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::reverse_iterator":
        return _cstl.VecMapLongMapStrStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongMapStrStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::allocator_type":
        return _cstl.VecMapLongMapStrStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongMapStrStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.VecMapLongMapStrStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongMapStrStr_swiginit(self, _cstl.new_VecMapLongMapStrStr(*args))

    def push_back(self, x: "MapLongMapStrStr") -> "void":
        return _cstl.VecMapLongMapStrStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::value_type const &":
        return _cstl.VecMapLongMapStrStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::value_type const &":
        return _cstl.VecMapLongMapStrStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::size_type", x: "MapLongMapStrStr") -> "void":
        return _cstl.VecMapLongMapStrStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongMapStrStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongMapStrStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::size_type") -> "void":
        return _cstl.VecMapLongMapStrStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.VecMapLongMapStrStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongMapStrStr

# Register VecMapLongMapStrStr in _cstl:
_cstl.VecMapLongMapStrStr_swigregister(VecMapLongMapStrStr)

class VecMapLongMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongMapStrFloat___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.VecMapLongMapStrFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::string,float,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,float > > > > > > > > *":
        return _cstl.VecMapLongMapStrFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongMapStrFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::difference_type") -> "void":
        return _cstl.VecMapLongMapStrFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapStrFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::value_type const &":
        return _cstl.VecMapLongMapStrFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapStrFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::value_type":
        return _cstl.VecMapLongMapStrFloat_pop(self)

    def append(self, x: "MapLongMapStrFloat") -> "void":
        return _cstl.VecMapLongMapStrFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongMapStrFloat_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.VecMapLongMapStrFloat_size(self)

    def swap(self, v: "VecMapLongMapStrFloat") -> "void":
        return _cstl.VecMapLongMapStrFloat_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.VecMapLongMapStrFloat_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.VecMapLongMapStrFloat_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::reverse_iterator":
        return _cstl.VecMapLongMapStrFloat_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::reverse_iterator":
        return _cstl.VecMapLongMapStrFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongMapStrFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::allocator_type":
        return _cstl.VecMapLongMapStrFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongMapStrFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.VecMapLongMapStrFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongMapStrFloat_swiginit(self, _cstl.new_VecMapLongMapStrFloat(*args))

    def push_back(self, x: "MapLongMapStrFloat") -> "void":
        return _cstl.VecMapLongMapStrFloat_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::value_type const &":
        return _cstl.VecMapLongMapStrFloat_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::value_type const &":
        return _cstl.VecMapLongMapStrFloat_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::size_type", x: "MapLongMapStrFloat") -> "void":
        return _cstl.VecMapLongMapStrFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongMapStrFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongMapStrFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::size_type") -> "void":
        return _cstl.VecMapLongMapStrFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.VecMapLongMapStrFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongMapStrFloat

# Register VecMapLongMapStrFloat in _cstl:
_cstl.VecMapLongMapStrFloat_swigregister(VecMapLongMapStrFloat)

class VecMapLongMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongMapStrDouble___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.VecMapLongMapStrDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::string,double,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,double > > > > > > > > *":
        return _cstl.VecMapLongMapStrDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongMapStrDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::difference_type") -> "void":
        return _cstl.VecMapLongMapStrDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapStrDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::value_type const &":
        return _cstl.VecMapLongMapStrDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapStrDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::value_type":
        return _cstl.VecMapLongMapStrDouble_pop(self)

    def append(self, x: "MapLongMapStrDouble") -> "void":
        return _cstl.VecMapLongMapStrDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongMapStrDouble_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.VecMapLongMapStrDouble_size(self)

    def swap(self, v: "VecMapLongMapStrDouble") -> "void":
        return _cstl.VecMapLongMapStrDouble_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.VecMapLongMapStrDouble_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.VecMapLongMapStrDouble_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::reverse_iterator":
        return _cstl.VecMapLongMapStrDouble_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::reverse_iterator":
        return _cstl.VecMapLongMapStrDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongMapStrDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::allocator_type":
        return _cstl.VecMapLongMapStrDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongMapStrDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.VecMapLongMapStrDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongMapStrDouble_swiginit(self, _cstl.new_VecMapLongMapStrDouble(*args))

    def push_back(self, x: "MapLongMapStrDouble") -> "void":
        return _cstl.VecMapLongMapStrDouble_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::value_type const &":
        return _cstl.VecMapLongMapStrDouble_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::value_type const &":
        return _cstl.VecMapLongMapStrDouble_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::size_type", x: "MapLongMapStrDouble") -> "void":
        return _cstl.VecMapLongMapStrDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongMapStrDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongMapStrDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::size_type") -> "void":
        return _cstl.VecMapLongMapStrDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.VecMapLongMapStrDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongMapStrDouble

# Register VecMapLongMapStrDouble in _cstl:
_cstl.VecMapLongMapStrDouble_swigregister(VecMapLongMapStrDouble)

class VecMapLongMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongMapStrBool___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.VecMapLongMapStrBool___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::string,bool,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,bool > > > > > > > > *":
        return _cstl.VecMapLongMapStrBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongMapStrBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::difference_type") -> "void":
        return _cstl.VecMapLongMapStrBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapStrBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::value_type const &":
        return _cstl.VecMapLongMapStrBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapStrBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::value_type":
        return _cstl.VecMapLongMapStrBool_pop(self)

    def append(self, x: "MapLongMapStrBool") -> "void":
        return _cstl.VecMapLongMapStrBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongMapStrBool_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.VecMapLongMapStrBool_size(self)

    def swap(self, v: "VecMapLongMapStrBool") -> "void":
        return _cstl.VecMapLongMapStrBool_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.VecMapLongMapStrBool_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.VecMapLongMapStrBool_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::reverse_iterator":
        return _cstl.VecMapLongMapStrBool_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::reverse_iterator":
        return _cstl.VecMapLongMapStrBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongMapStrBool_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::allocator_type":
        return _cstl.VecMapLongMapStrBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongMapStrBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.VecMapLongMapStrBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongMapStrBool_swiginit(self, _cstl.new_VecMapLongMapStrBool(*args))

    def push_back(self, x: "MapLongMapStrBool") -> "void":
        return _cstl.VecMapLongMapStrBool_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::value_type const &":
        return _cstl.VecMapLongMapStrBool_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::value_type const &":
        return _cstl.VecMapLongMapStrBool_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::size_type", x: "MapLongMapStrBool") -> "void":
        return _cstl.VecMapLongMapStrBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongMapStrBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongMapStrBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::size_type") -> "void":
        return _cstl.VecMapLongMapStrBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.VecMapLongMapStrBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongMapStrBool

# Register VecMapLongMapStrBool in _cstl:
_cstl.VecMapLongMapStrBool_swigregister(VecMapLongMapStrBool)

class VecMapLongMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongMapStrLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.VecMapLongMapStrLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::string,std::int64_t,std::hash< std::string >,std::equal_to< std::string >,std::allocator< std::pair< std::string const,std::int64_t > > > > > > > > *":
        return _cstl.VecMapLongMapStrLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongMapStrLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecMapLongMapStrLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapStrLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::value_type const &":
        return _cstl.VecMapLongMapStrLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapStrLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::value_type":
        return _cstl.VecMapLongMapStrLong_pop(self)

    def append(self, x: "MapLongMapStrLong") -> "void":
        return _cstl.VecMapLongMapStrLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongMapStrLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.VecMapLongMapStrLong_size(self)

    def swap(self, v: "VecMapLongMapStrLong") -> "void":
        return _cstl.VecMapLongMapStrLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.VecMapLongMapStrLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.VecMapLongMapStrLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapLongMapStrLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapLongMapStrLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongMapStrLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::allocator_type":
        return _cstl.VecMapLongMapStrLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongMapStrLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.VecMapLongMapStrLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongMapStrLong_swiginit(self, _cstl.new_VecMapLongMapStrLong(*args))

    def push_back(self, x: "MapLongMapStrLong") -> "void":
        return _cstl.VecMapLongMapStrLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::value_type const &":
        return _cstl.VecMapLongMapStrLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::value_type const &":
        return _cstl.VecMapLongMapStrLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::size_type", x: "MapLongMapStrLong") -> "void":
        return _cstl.VecMapLongMapStrLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongMapStrLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongMapStrLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::size_type") -> "void":
        return _cstl.VecMapLongMapStrLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.VecMapLongMapStrLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongMapStrLong

# Register VecMapLongMapStrLong in _cstl:
_cstl.VecMapLongMapStrLong_swigregister(VecMapLongMapStrLong)

class VecMapLongMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongMapLongInt___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.VecMapLongMapLongInt___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::int64_t,int,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,int > > > > > > > > *":
        return _cstl.VecMapLongMapLongInt___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongMapLongInt___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::difference_type") -> "void":
        return _cstl.VecMapLongMapLongInt___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapLongInt___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::value_type const &":
        return _cstl.VecMapLongMapLongInt___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapLongInt___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::value_type":
        return _cstl.VecMapLongMapLongInt_pop(self)

    def append(self, x: "MapLongMapLongInt") -> "void":
        return _cstl.VecMapLongMapLongInt_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongMapLongInt_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.VecMapLongMapLongInt_size(self)

    def swap(self, v: "VecMapLongMapLongInt") -> "void":
        return _cstl.VecMapLongMapLongInt_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.VecMapLongMapLongInt_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.VecMapLongMapLongInt_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::reverse_iterator":
        return _cstl.VecMapLongMapLongInt_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::reverse_iterator":
        return _cstl.VecMapLongMapLongInt_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongMapLongInt_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::allocator_type":
        return _cstl.VecMapLongMapLongInt_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongMapLongInt_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.VecMapLongMapLongInt_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongMapLongInt_swiginit(self, _cstl.new_VecMapLongMapLongInt(*args))

    def push_back(self, x: "MapLongMapLongInt") -> "void":
        return _cstl.VecMapLongMapLongInt_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::value_type const &":
        return _cstl.VecMapLongMapLongInt_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::value_type const &":
        return _cstl.VecMapLongMapLongInt_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::size_type", x: "MapLongMapLongInt") -> "void":
        return _cstl.VecMapLongMapLongInt_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongMapLongInt_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongMapLongInt_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::size_type") -> "void":
        return _cstl.VecMapLongMapLongInt_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.VecMapLongMapLongInt_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongMapLongInt

# Register VecMapLongMapLongInt in _cstl:
_cstl.VecMapLongMapLongInt_swigregister(VecMapLongMapLongInt)

class VecMapLongMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongMapLongStr___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.VecMapLongMapLongStr___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::int64_t,std::string,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::string > > > > > > > > *":
        return _cstl.VecMapLongMapLongStr___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongMapLongStr___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::difference_type") -> "void":
        return _cstl.VecMapLongMapLongStr___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapLongStr___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::value_type const &":
        return _cstl.VecMapLongMapLongStr___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapLongStr___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::value_type":
        return _cstl.VecMapLongMapLongStr_pop(self)

    def append(self, x: "MapLongMapLongStr") -> "void":
        return _cstl.VecMapLongMapLongStr_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongMapLongStr_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.VecMapLongMapLongStr_size(self)

    def swap(self, v: "VecMapLongMapLongStr") -> "void":
        return _cstl.VecMapLongMapLongStr_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.VecMapLongMapLongStr_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.VecMapLongMapLongStr_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::reverse_iterator":
        return _cstl.VecMapLongMapLongStr_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::reverse_iterator":
        return _cstl.VecMapLongMapLongStr_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongMapLongStr_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::allocator_type":
        return _cstl.VecMapLongMapLongStr_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongMapLongStr_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.VecMapLongMapLongStr_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongMapLongStr_swiginit(self, _cstl.new_VecMapLongMapLongStr(*args))

    def push_back(self, x: "MapLongMapLongStr") -> "void":
        return _cstl.VecMapLongMapLongStr_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::value_type const &":
        return _cstl.VecMapLongMapLongStr_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::value_type const &":
        return _cstl.VecMapLongMapLongStr_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::size_type", x: "MapLongMapLongStr") -> "void":
        return _cstl.VecMapLongMapLongStr_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongMapLongStr_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongMapLongStr_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::size_type") -> "void":
        return _cstl.VecMapLongMapLongStr_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.VecMapLongMapLongStr_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongMapLongStr

# Register VecMapLongMapLongStr in _cstl:
_cstl.VecMapLongMapLongStr_swigregister(VecMapLongMapLongStr)

class VecMapLongMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongMapLongFloat___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.VecMapLongMapLongFloat___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::int64_t,float,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,float > > > > > > > > *":
        return _cstl.VecMapLongMapLongFloat___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongMapLongFloat___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::difference_type") -> "void":
        return _cstl.VecMapLongMapLongFloat___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapLongFloat___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::value_type const &":
        return _cstl.VecMapLongMapLongFloat___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapLongFloat___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::value_type":
        return _cstl.VecMapLongMapLongFloat_pop(self)

    def append(self, x: "MapLongMapLongFloat") -> "void":
        return _cstl.VecMapLongMapLongFloat_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongMapLongFloat_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.VecMapLongMapLongFloat_size(self)

    def swap(self, v: "VecMapLongMapLongFloat") -> "void":
        return _cstl.VecMapLongMapLongFloat_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.VecMapLongMapLongFloat_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.VecMapLongMapLongFloat_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::reverse_iterator":
        return _cstl.VecMapLongMapLongFloat_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::reverse_iterator":
        return _cstl.VecMapLongMapLongFloat_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongMapLongFloat_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::allocator_type":
        return _cstl.VecMapLongMapLongFloat_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongMapLongFloat_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.VecMapLongMapLongFloat_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongMapLongFloat_swiginit(self, _cstl.new_VecMapLongMapLongFloat(*args))

    def push_back(self, x: "MapLongMapLongFloat") -> "void":
        return _cstl.VecMapLongMapLongFloat_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::value_type const &":
        return _cstl.VecMapLongMapLongFloat_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::value_type const &":
        return _cstl.VecMapLongMapLongFloat_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::size_type", x: "MapLongMapLongFloat") -> "void":
        return _cstl.VecMapLongMapLongFloat_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongMapLongFloat_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongMapLongFloat_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::size_type") -> "void":
        return _cstl.VecMapLongMapLongFloat_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.VecMapLongMapLongFloat_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongMapLongFloat

# Register VecMapLongMapLongFloat in _cstl:
_cstl.VecMapLongMapLongFloat_swigregister(VecMapLongMapLongFloat)

class VecMapLongMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongMapLongDouble___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.VecMapLongMapLongDouble___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::int64_t,double,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,double > > > > > > > > *":
        return _cstl.VecMapLongMapLongDouble___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongMapLongDouble___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::difference_type") -> "void":
        return _cstl.VecMapLongMapLongDouble___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapLongDouble___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::value_type const &":
        return _cstl.VecMapLongMapLongDouble___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapLongDouble___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::value_type":
        return _cstl.VecMapLongMapLongDouble_pop(self)

    def append(self, x: "MapLongMapLongDouble") -> "void":
        return _cstl.VecMapLongMapLongDouble_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongMapLongDouble_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.VecMapLongMapLongDouble_size(self)

    def swap(self, v: "VecMapLongMapLongDouble") -> "void":
        return _cstl.VecMapLongMapLongDouble_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.VecMapLongMapLongDouble_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.VecMapLongMapLongDouble_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::reverse_iterator":
        return _cstl.VecMapLongMapLongDouble_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::reverse_iterator":
        return _cstl.VecMapLongMapLongDouble_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongMapLongDouble_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::allocator_type":
        return _cstl.VecMapLongMapLongDouble_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongMapLongDouble_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.VecMapLongMapLongDouble_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongMapLongDouble_swiginit(self, _cstl.new_VecMapLongMapLongDouble(*args))

    def push_back(self, x: "MapLongMapLongDouble") -> "void":
        return _cstl.VecMapLongMapLongDouble_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::value_type const &":
        return _cstl.VecMapLongMapLongDouble_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::value_type const &":
        return _cstl.VecMapLongMapLongDouble_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::size_type", x: "MapLongMapLongDouble") -> "void":
        return _cstl.VecMapLongMapLongDouble_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongMapLongDouble_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongMapLongDouble_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::size_type") -> "void":
        return _cstl.VecMapLongMapLongDouble_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.VecMapLongMapLongDouble_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongMapLongDouble

# Register VecMapLongMapLongDouble in _cstl:
_cstl.VecMapLongMapLongDouble_swigregister(VecMapLongMapLongDouble)

class VecMapLongMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongMapLongBool___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.VecMapLongMapLongBool___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::int64_t,bool,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,bool > > > > > > > > *":
        return _cstl.VecMapLongMapLongBool___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongMapLongBool___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::difference_type") -> "void":
        return _cstl.VecMapLongMapLongBool___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapLongBool___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::value_type const &":
        return _cstl.VecMapLongMapLongBool___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapLongBool___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::value_type":
        return _cstl.VecMapLongMapLongBool_pop(self)

    def append(self, x: "MapLongMapLongBool") -> "void":
        return _cstl.VecMapLongMapLongBool_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongMapLongBool_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.VecMapLongMapLongBool_size(self)

    def swap(self, v: "VecMapLongMapLongBool") -> "void":
        return _cstl.VecMapLongMapLongBool_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.VecMapLongMapLongBool_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.VecMapLongMapLongBool_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::reverse_iterator":
        return _cstl.VecMapLongMapLongBool_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::reverse_iterator":
        return _cstl.VecMapLongMapLongBool_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongMapLongBool_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::allocator_type":
        return _cstl.VecMapLongMapLongBool_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongMapLongBool_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.VecMapLongMapLongBool_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongMapLongBool_swiginit(self, _cstl.new_VecMapLongMapLongBool(*args))

    def push_back(self, x: "MapLongMapLongBool") -> "void":
        return _cstl.VecMapLongMapLongBool_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::value_type const &":
        return _cstl.VecMapLongMapLongBool_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::value_type const &":
        return _cstl.VecMapLongMapLongBool_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::size_type", x: "MapLongMapLongBool") -> "void":
        return _cstl.VecMapLongMapLongBool_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongMapLongBool_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongMapLongBool_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::size_type") -> "void":
        return _cstl.VecMapLongMapLongBool_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.VecMapLongMapLongBool_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongMapLongBool

# Register VecMapLongMapLongBool in _cstl:
_cstl.VecMapLongMapLongBool_swigregister(VecMapLongMapLongBool)

class VecMapLongMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.VecMapLongMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.VecMapLongMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.VecMapLongMapLongLong___bool__(self)

    def __len__(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.VecMapLongMapLongLong___len__(self)

    def __getslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::difference_type") -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > > > > >,std::allocator< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > >,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::unordered_map< std::int64_t,std::int64_t,std::hash< std::int64_t >,std::equal_to< std::int64_t >,std::allocator< std::pair< std::int64_t const,std::int64_t > > > > > > > > *":
        return _cstl.VecMapLongMapLongLong___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _cstl.VecMapLongMapLongLong___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::difference_type", j: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::difference_type") -> "void":
        return _cstl.VecMapLongMapLongLong___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapLongLong___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::value_type const &":
        return _cstl.VecMapLongMapLongLong___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _cstl.VecMapLongMapLongLong___setitem__(self, *args)

    def pop(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::value_type":
        return _cstl.VecMapLongMapLongLong_pop(self)

    def append(self, x: "MapLongMapLongLong") -> "void":
        return _cstl.VecMapLongMapLongLong_append(self, x)

    def empty(self) -> "bool":
        return _cstl.VecMapLongMapLongLong_empty(self)

    def size(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.VecMapLongMapLongLong_size(self)

    def swap(self, v: "VecMapLongMapLongLong") -> "void":
        return _cstl.VecMapLongMapLongLong_swap(self, v)

    def begin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.VecMapLongMapLongLong_begin(self)

    def end(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.VecMapLongMapLongLong_end(self)

    def rbegin(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapLongMapLongLong_rbegin(self)

    def rend(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::reverse_iterator":
        return _cstl.VecMapLongMapLongLong_rend(self)

    def clear(self) -> "void":
        return _cstl.VecMapLongMapLongLong_clear(self)

    def get_allocator(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::allocator_type":
        return _cstl.VecMapLongMapLongLong_get_allocator(self)

    def pop_back(self) -> "void":
        return _cstl.VecMapLongMapLongLong_pop_back(self)

    def erase(self, *args) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.VecMapLongMapLongLong_erase(self, *args)

    def __init__(self, *args):
        _cstl.VecMapLongMapLongLong_swiginit(self, _cstl.new_VecMapLongMapLongLong(*args))

    def push_back(self, x: "MapLongMapLongLong") -> "void":
        return _cstl.VecMapLongMapLongLong_push_back(self, x)

    def front(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::value_type const &":
        return _cstl.VecMapLongMapLongLong_front(self)

    def back(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::value_type const &":
        return _cstl.VecMapLongMapLongLong_back(self)

    def assign(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::size_type", x: "MapLongMapLongLong") -> "void":
        return _cstl.VecMapLongMapLongLong_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _cstl.VecMapLongMapLongLong_resize(self, *args)

    def insert(self, *args) -> "void":
        return _cstl.VecMapLongMapLongLong_insert(self, *args)

    def reserve(self, n: "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::size_type") -> "void":
        return _cstl.VecMapLongMapLongLong_reserve(self, n)

    def capacity(self) -> "std::vector< std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.VecMapLongMapLongLong_capacity(self)
    __swig_destroy__ = _cstl.delete_VecMapLongMapLongLong

# Register VecMapLongMapLongLong in _cstl:
_cstl.VecMapLongMapLongLong_swigregister(VecMapLongMapLongLong)

class MapIntVecVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecVecInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::vector< int > > >::size_type":
        return _cstl.MapIntVecVecInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::vector< int > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::vector< int > > >::mapped_type const &":
        return _cstl.MapIntVecVecInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::vector< int > > >::key_type const &") -> "void":
        return _cstl.MapIntVecVecInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecVecInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecVecInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecVecInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecVecInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecVecInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecVecInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecVecInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecVecInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecVecInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecVecInt_swiginit(self, _cstl.new_MapIntVecVecInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecVecInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::vector< int > > >::size_type":
        return _cstl.MapIntVecVecInt_size(self)

    def swap(self, v: "MapIntVecVecInt") -> "void":
        return _cstl.MapIntVecVecInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::vector< int > > >::iterator":
        return _cstl.MapIntVecVecInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::vector< int > > >::iterator":
        return _cstl.MapIntVecVecInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecVecInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::vector< int > > >::allocator_type":
        return _cstl.MapIntVecVecInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::vector< int > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::vector< int > > >::size_type":
        return _cstl.MapIntVecVecInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecVecInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::vector< int > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::vector< int > > >::iterator":
        return _cstl.MapIntVecVecInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecVecInt

# Register MapIntVecVecInt in _cstl:
_cstl.MapIntVecVecInt_swigregister(MapIntVecVecInt)

class MapIntVecVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecVecStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::vector< std::string > > >::size_type":
        return _cstl.MapIntVecVecStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::vector< std::string > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::vector< std::string > > >::mapped_type const &":
        return _cstl.MapIntVecVecStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::vector< std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntVecVecStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecVecStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecVecStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecVecStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecVecStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecVecStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecVecStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecVecStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecVecStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecVecStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecVecStr_swiginit(self, _cstl.new_MapIntVecVecStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecVecStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::vector< std::string > > >::size_type":
        return _cstl.MapIntVecVecStr_size(self)

    def swap(self, v: "MapIntVecVecStr") -> "void":
        return _cstl.MapIntVecVecStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::vector< std::string > > >::iterator":
        return _cstl.MapIntVecVecStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::vector< std::string > > >::iterator":
        return _cstl.MapIntVecVecStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecVecStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::vector< std::string > > >::allocator_type":
        return _cstl.MapIntVecVecStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::vector< std::string > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::vector< std::string > > >::size_type":
        return _cstl.MapIntVecVecStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecVecStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::vector< std::string > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::vector< std::string > > >::iterator":
        return _cstl.MapIntVecVecStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecVecStr

# Register MapIntVecVecStr in _cstl:
_cstl.MapIntVecVecStr_swigregister(MapIntVecVecStr)

class MapIntVecVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecVecFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::vector< float > > >::size_type":
        return _cstl.MapIntVecVecFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::vector< float > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::vector< float > > >::mapped_type const &":
        return _cstl.MapIntVecVecFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::vector< float > > >::key_type const &") -> "void":
        return _cstl.MapIntVecVecFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecVecFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecVecFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecVecFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecVecFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecVecFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecVecFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecVecFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecVecFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecVecFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecVecFloat_swiginit(self, _cstl.new_MapIntVecVecFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecVecFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::vector< float > > >::size_type":
        return _cstl.MapIntVecVecFloat_size(self)

    def swap(self, v: "MapIntVecVecFloat") -> "void":
        return _cstl.MapIntVecVecFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::vector< float > > >::iterator":
        return _cstl.MapIntVecVecFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::vector< float > > >::iterator":
        return _cstl.MapIntVecVecFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecVecFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::vector< float > > >::allocator_type":
        return _cstl.MapIntVecVecFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::vector< float > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::vector< float > > >::size_type":
        return _cstl.MapIntVecVecFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecVecFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::vector< float > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::vector< float > > >::iterator":
        return _cstl.MapIntVecVecFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecVecFloat

# Register MapIntVecVecFloat in _cstl:
_cstl.MapIntVecVecFloat_swigregister(MapIntVecVecFloat)

class MapIntVecVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecVecDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::vector< double > > >::size_type":
        return _cstl.MapIntVecVecDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::vector< double > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::vector< double > > >::mapped_type const &":
        return _cstl.MapIntVecVecDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::vector< double > > >::key_type const &") -> "void":
        return _cstl.MapIntVecVecDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecVecDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecVecDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecVecDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecVecDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecVecDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecVecDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecVecDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecVecDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecVecDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecVecDouble_swiginit(self, _cstl.new_MapIntVecVecDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecVecDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::vector< double > > >::size_type":
        return _cstl.MapIntVecVecDouble_size(self)

    def swap(self, v: "MapIntVecVecDouble") -> "void":
        return _cstl.MapIntVecVecDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::vector< double > > >::iterator":
        return _cstl.MapIntVecVecDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::vector< double > > >::iterator":
        return _cstl.MapIntVecVecDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecVecDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::vector< double > > >::allocator_type":
        return _cstl.MapIntVecVecDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::vector< double > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::vector< double > > >::size_type":
        return _cstl.MapIntVecVecDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecVecDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::vector< double > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::vector< double > > >::iterator":
        return _cstl.MapIntVecVecDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecVecDouble

# Register MapIntVecVecDouble in _cstl:
_cstl.MapIntVecVecDouble_swigregister(MapIntVecVecDouble)

class MapIntVecVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecVecBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::vector< bool > > >::size_type":
        return _cstl.MapIntVecVecBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::vector< bool > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::vector< bool > > >::mapped_type const &":
        return _cstl.MapIntVecVecBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::vector< bool > > >::key_type const &") -> "void":
        return _cstl.MapIntVecVecBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecVecBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecVecBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecVecBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecVecBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecVecBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecVecBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecVecBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecVecBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecVecBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecVecBool_swiginit(self, _cstl.new_MapIntVecVecBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecVecBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::vector< bool > > >::size_type":
        return _cstl.MapIntVecVecBool_size(self)

    def swap(self, v: "MapIntVecVecBool") -> "void":
        return _cstl.MapIntVecVecBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::vector< bool > > >::iterator":
        return _cstl.MapIntVecVecBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::vector< bool > > >::iterator":
        return _cstl.MapIntVecVecBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecVecBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::vector< bool > > >::allocator_type":
        return _cstl.MapIntVecVecBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::vector< bool > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::vector< bool > > >::size_type":
        return _cstl.MapIntVecVecBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecVecBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::vector< bool > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::vector< bool > > >::iterator":
        return _cstl.MapIntVecVecBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecVecBool

# Register MapIntVecVecBool in _cstl:
_cstl.MapIntVecVecBool_swigregister(MapIntVecVecBool)

class MapIntVecVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecVecLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::vector< std::int64_t > > >::size_type":
        return _cstl.MapIntVecVecLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::vector< std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntVecVecLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::vector< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntVecVecLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecVecLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecVecLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecVecLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecVecLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecVecLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecVecLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecVecLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecVecLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecVecLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecVecLong_swiginit(self, _cstl.new_MapIntVecVecLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecVecLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::vector< std::int64_t > > >::size_type":
        return _cstl.MapIntVecVecLong_size(self)

    def swap(self, v: "MapIntVecVecLong") -> "void":
        return _cstl.MapIntVecVecLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::vector< std::int64_t > > >::iterator":
        return _cstl.MapIntVecVecLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::vector< std::int64_t > > >::iterator":
        return _cstl.MapIntVecVecLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecVecLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::vector< std::int64_t > > >::allocator_type":
        return _cstl.MapIntVecVecLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::vector< std::int64_t > > >::size_type":
        return _cstl.MapIntVecVecLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecVecLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::vector< std::int64_t > > >::iterator":
        return _cstl.MapIntVecVecLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecVecLong

# Register MapIntVecVecLong in _cstl:
_cstl.MapIntVecVecLong_swigregister(MapIntVecVecLong)

class MapIntVecSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecSetInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_set< int > > >::size_type":
        return _cstl.MapIntVecSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_set< int > > >::mapped_type const &":
        return _cstl.MapIntVecSetInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_set< int > > >::key_type const &") -> "void":
        return _cstl.MapIntVecSetInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecSetInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecSetInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecSetInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecSetInt_swiginit(self, _cstl.new_MapIntVecSetInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecSetInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_set< int > > >::size_type":
        return _cstl.MapIntVecSetInt_size(self)

    def swap(self, v: "MapIntVecSetInt") -> "void":
        return _cstl.MapIntVecSetInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_set< int > > >::iterator":
        return _cstl.MapIntVecSetInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_set< int > > >::iterator":
        return _cstl.MapIntVecSetInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecSetInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_set< int > > >::allocator_type":
        return _cstl.MapIntVecSetInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_set< int > > >::size_type":
        return _cstl.MapIntVecSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecSetInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_set< int > > >::iterator":
        return _cstl.MapIntVecSetInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecSetInt

# Register MapIntVecSetInt in _cstl:
_cstl.MapIntVecSetInt_swigregister(MapIntVecSetInt)

class MapIntVecSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecSetStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_set< std::string > > >::size_type":
        return _cstl.MapIntVecSetStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_set< std::string > > >::mapped_type const &":
        return _cstl.MapIntVecSetStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_set< std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntVecSetStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecSetStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecSetStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecSetStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecSetStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecSetStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecSetStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecSetStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecSetStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecSetStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecSetStr_swiginit(self, _cstl.new_MapIntVecSetStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecSetStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_set< std::string > > >::size_type":
        return _cstl.MapIntVecSetStr_size(self)

    def swap(self, v: "MapIntVecSetStr") -> "void":
        return _cstl.MapIntVecSetStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_set< std::string > > >::iterator":
        return _cstl.MapIntVecSetStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_set< std::string > > >::iterator":
        return _cstl.MapIntVecSetStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecSetStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_set< std::string > > >::allocator_type":
        return _cstl.MapIntVecSetStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_set< std::string > > >::size_type":
        return _cstl.MapIntVecSetStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecSetStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_set< std::string > > >::iterator":
        return _cstl.MapIntVecSetStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecSetStr

# Register MapIntVecSetStr in _cstl:
_cstl.MapIntVecSetStr_swigregister(MapIntVecSetStr)

class MapIntVecSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecSetLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapIntVecSetLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_set< std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntVecSetLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_set< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntVecSetLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecSetLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecSetLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecSetLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecSetLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecSetLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecSetLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecSetLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecSetLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecSetLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecSetLong_swiginit(self, _cstl.new_MapIntVecSetLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecSetLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapIntVecSetLong_size(self)

    def swap(self, v: "MapIntVecSetLong") -> "void":
        return _cstl.MapIntVecSetLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapIntVecSetLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapIntVecSetLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecSetLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_set< std::int64_t > > >::allocator_type":
        return _cstl.MapIntVecSetLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapIntVecSetLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecSetLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapIntVecSetLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecSetLong

# Register MapIntVecSetLong in _cstl:
_cstl.MapIntVecSetLong_swigregister(MapIntVecSetLong)

class MapIntVecMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecMapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,int > > >::size_type":
        return _cstl.MapIntVecMapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< int,int > > >::mapped_type const &":
        return _cstl.MapIntVecMapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,int > > >::key_type const &") -> "void":
        return _cstl.MapIntVecMapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecMapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecMapIntInt_swiginit(self, _cstl.new_MapIntVecMapIntInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecMapIntInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,int > > >::size_type":
        return _cstl.MapIntVecMapIntInt_size(self)

    def swap(self, v: "MapIntVecMapIntInt") -> "void":
        return _cstl.MapIntVecMapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,int > > >::iterator":
        return _cstl.MapIntVecMapIntInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,int > > >::iterator":
        return _cstl.MapIntVecMapIntInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecMapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,int > > >::allocator_type":
        return _cstl.MapIntVecMapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< int,int > > >::size_type":
        return _cstl.MapIntVecMapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecMapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< int,int > > >::iterator":
        return _cstl.MapIntVecMapIntInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecMapIntInt

# Register MapIntVecMapIntInt in _cstl:
_cstl.MapIntVecMapIntInt_swigregister(MapIntVecMapIntInt)

class MapIntVecMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecMapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapIntVecMapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< int,std::string > > >::mapped_type const &":
        return _cstl.MapIntVecMapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntVecMapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecMapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecMapIntStr_swiginit(self, _cstl.new_MapIntVecMapIntStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecMapIntStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapIntVecMapIntStr_size(self)

    def swap(self, v: "MapIntVecMapIntStr") -> "void":
        return _cstl.MapIntVecMapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapIntVecMapIntStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapIntVecMapIntStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecMapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,std::string > > >::allocator_type":
        return _cstl.MapIntVecMapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapIntVecMapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecMapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapIntVecMapIntStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecMapIntStr

# Register MapIntVecMapIntStr in _cstl:
_cstl.MapIntVecMapIntStr_swigregister(MapIntVecMapIntStr)

class MapIntVecMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecMapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,float > > >::size_type":
        return _cstl.MapIntVecMapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< int,float > > >::mapped_type const &":
        return _cstl.MapIntVecMapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,float > > >::key_type const &") -> "void":
        return _cstl.MapIntVecMapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecMapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecMapIntFloat_swiginit(self, _cstl.new_MapIntVecMapIntFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecMapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,float > > >::size_type":
        return _cstl.MapIntVecMapIntFloat_size(self)

    def swap(self, v: "MapIntVecMapIntFloat") -> "void":
        return _cstl.MapIntVecMapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,float > > >::iterator":
        return _cstl.MapIntVecMapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,float > > >::iterator":
        return _cstl.MapIntVecMapIntFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecMapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,float > > >::allocator_type":
        return _cstl.MapIntVecMapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< int,float > > >::size_type":
        return _cstl.MapIntVecMapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecMapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< int,float > > >::iterator":
        return _cstl.MapIntVecMapIntFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecMapIntFloat

# Register MapIntVecMapIntFloat in _cstl:
_cstl.MapIntVecMapIntFloat_swigregister(MapIntVecMapIntFloat)

class MapIntVecMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecMapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,double > > >::size_type":
        return _cstl.MapIntVecMapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< int,double > > >::mapped_type const &":
        return _cstl.MapIntVecMapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,double > > >::key_type const &") -> "void":
        return _cstl.MapIntVecMapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecMapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecMapIntDouble_swiginit(self, _cstl.new_MapIntVecMapIntDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecMapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,double > > >::size_type":
        return _cstl.MapIntVecMapIntDouble_size(self)

    def swap(self, v: "MapIntVecMapIntDouble") -> "void":
        return _cstl.MapIntVecMapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,double > > >::iterator":
        return _cstl.MapIntVecMapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,double > > >::iterator":
        return _cstl.MapIntVecMapIntDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecMapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,double > > >::allocator_type":
        return _cstl.MapIntVecMapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< int,double > > >::size_type":
        return _cstl.MapIntVecMapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecMapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< int,double > > >::iterator":
        return _cstl.MapIntVecMapIntDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecMapIntDouble

# Register MapIntVecMapIntDouble in _cstl:
_cstl.MapIntVecMapIntDouble_swigregister(MapIntVecMapIntDouble)

class MapIntVecMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecMapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapIntVecMapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< int,bool > > >::mapped_type const &":
        return _cstl.MapIntVecMapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,bool > > >::key_type const &") -> "void":
        return _cstl.MapIntVecMapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecMapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecMapIntBool_swiginit(self, _cstl.new_MapIntVecMapIntBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecMapIntBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapIntVecMapIntBool_size(self)

    def swap(self, v: "MapIntVecMapIntBool") -> "void":
        return _cstl.MapIntVecMapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapIntVecMapIntBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapIntVecMapIntBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecMapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,bool > > >::allocator_type":
        return _cstl.MapIntVecMapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapIntVecMapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecMapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapIntVecMapIntBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecMapIntBool

# Register MapIntVecMapIntBool in _cstl:
_cstl.MapIntVecMapIntBool_swigregister(MapIntVecMapIntBool)

class MapIntVecMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecMapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapIntVecMapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< int,std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntVecMapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntVecMapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecMapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecMapIntLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecMapIntLong_swiginit(self, _cstl.new_MapIntVecMapIntLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecMapIntLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapIntVecMapIntLong_size(self)

    def swap(self, v: "MapIntVecMapIntLong") -> "void":
        return _cstl.MapIntVecMapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapIntVecMapIntLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapIntVecMapIntLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecMapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_map< int,std::int64_t > > >::allocator_type":
        return _cstl.MapIntVecMapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapIntVecMapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecMapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapIntVecMapIntLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecMapIntLong

# Register MapIntVecMapIntLong in _cstl:
_cstl.MapIntVecMapIntLong_swigregister(MapIntVecMapIntLong)

class MapIntVecMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecMapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapIntVecMapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,int > > >::mapped_type const &":
        return _cstl.MapIntVecMapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,int > > >::key_type const &") -> "void":
        return _cstl.MapIntVecMapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecMapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecMapStrInt_swiginit(self, _cstl.new_MapIntVecMapStrInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecMapStrInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapIntVecMapStrInt_size(self)

    def swap(self, v: "MapIntVecMapStrInt") -> "void":
        return _cstl.MapIntVecMapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapIntVecMapStrInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapIntVecMapStrInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecMapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,int > > >::allocator_type":
        return _cstl.MapIntVecMapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapIntVecMapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecMapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapIntVecMapStrInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecMapStrInt

# Register MapIntVecMapStrInt in _cstl:
_cstl.MapIntVecMapStrInt_swigregister(MapIntVecMapStrInt)

class MapIntVecMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecMapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapIntVecMapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::string > > >::mapped_type const &":
        return _cstl.MapIntVecMapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntVecMapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecMapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecMapStrStr_swiginit(self, _cstl.new_MapIntVecMapStrStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecMapStrStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapIntVecMapStrStr_size(self)

    def swap(self, v: "MapIntVecMapStrStr") -> "void":
        return _cstl.MapIntVecMapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapIntVecMapStrStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapIntVecMapStrStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecMapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::string > > >::allocator_type":
        return _cstl.MapIntVecMapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapIntVecMapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecMapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapIntVecMapStrStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecMapStrStr

# Register MapIntVecMapStrStr in _cstl:
_cstl.MapIntVecMapStrStr_swigregister(MapIntVecMapStrStr)

class MapIntVecMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecMapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapIntVecMapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,float > > >::mapped_type const &":
        return _cstl.MapIntVecMapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,float > > >::key_type const &") -> "void":
        return _cstl.MapIntVecMapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecMapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecMapStrFloat_swiginit(self, _cstl.new_MapIntVecMapStrFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecMapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapIntVecMapStrFloat_size(self)

    def swap(self, v: "MapIntVecMapStrFloat") -> "void":
        return _cstl.MapIntVecMapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapIntVecMapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapIntVecMapStrFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecMapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,float > > >::allocator_type":
        return _cstl.MapIntVecMapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapIntVecMapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecMapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapIntVecMapStrFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecMapStrFloat

# Register MapIntVecMapStrFloat in _cstl:
_cstl.MapIntVecMapStrFloat_swigregister(MapIntVecMapStrFloat)

class MapIntVecMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecMapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapIntVecMapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,double > > >::mapped_type const &":
        return _cstl.MapIntVecMapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,double > > >::key_type const &") -> "void":
        return _cstl.MapIntVecMapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecMapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecMapStrDouble_swiginit(self, _cstl.new_MapIntVecMapStrDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecMapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapIntVecMapStrDouble_size(self)

    def swap(self, v: "MapIntVecMapStrDouble") -> "void":
        return _cstl.MapIntVecMapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapIntVecMapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapIntVecMapStrDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecMapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,double > > >::allocator_type":
        return _cstl.MapIntVecMapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapIntVecMapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecMapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapIntVecMapStrDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecMapStrDouble

# Register MapIntVecMapStrDouble in _cstl:
_cstl.MapIntVecMapStrDouble_swigregister(MapIntVecMapStrDouble)

class MapIntVecMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecMapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapIntVecMapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,bool > > >::mapped_type const &":
        return _cstl.MapIntVecMapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,bool > > >::key_type const &") -> "void":
        return _cstl.MapIntVecMapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecMapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecMapStrBool_swiginit(self, _cstl.new_MapIntVecMapStrBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecMapStrBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapIntVecMapStrBool_size(self)

    def swap(self, v: "MapIntVecMapStrBool") -> "void":
        return _cstl.MapIntVecMapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapIntVecMapStrBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapIntVecMapStrBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecMapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,bool > > >::allocator_type":
        return _cstl.MapIntVecMapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapIntVecMapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecMapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapIntVecMapStrBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecMapStrBool

# Register MapIntVecMapStrBool in _cstl:
_cstl.MapIntVecMapStrBool_swigregister(MapIntVecMapStrBool)

class MapIntVecMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecMapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapIntVecMapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntVecMapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntVecMapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecMapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecMapStrLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecMapStrLong_swiginit(self, _cstl.new_MapIntVecMapStrLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecMapStrLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapIntVecMapStrLong_size(self)

    def swap(self, v: "MapIntVecMapStrLong") -> "void":
        return _cstl.MapIntVecMapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapIntVecMapStrLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapIntVecMapStrLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecMapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::int64_t > > >::allocator_type":
        return _cstl.MapIntVecMapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapIntVecMapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecMapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapIntVecMapStrLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecMapStrLong

# Register MapIntVecMapStrLong in _cstl:
_cstl.MapIntVecMapStrLong_swigregister(MapIntVecMapStrLong)

class MapIntVecMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecMapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapIntVecMapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,int > > >::mapped_type const &":
        return _cstl.MapIntVecMapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,int > > >::key_type const &") -> "void":
        return _cstl.MapIntVecMapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecMapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecMapLongInt_swiginit(self, _cstl.new_MapIntVecMapLongInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecMapLongInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapIntVecMapLongInt_size(self)

    def swap(self, v: "MapIntVecMapLongInt") -> "void":
        return _cstl.MapIntVecMapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapIntVecMapLongInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapIntVecMapLongInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecMapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,int > > >::allocator_type":
        return _cstl.MapIntVecMapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapIntVecMapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecMapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapIntVecMapLongInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecMapLongInt

# Register MapIntVecMapLongInt in _cstl:
_cstl.MapIntVecMapLongInt_swigregister(MapIntVecMapLongInt)

class MapIntVecMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecMapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapIntVecMapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::string > > >::mapped_type const &":
        return _cstl.MapIntVecMapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntVecMapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecMapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecMapLongStr_swiginit(self, _cstl.new_MapIntVecMapLongStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecMapLongStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapIntVecMapLongStr_size(self)

    def swap(self, v: "MapIntVecMapLongStr") -> "void":
        return _cstl.MapIntVecMapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapIntVecMapLongStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapIntVecMapLongStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecMapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::string > > >::allocator_type":
        return _cstl.MapIntVecMapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapIntVecMapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecMapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapIntVecMapLongStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecMapLongStr

# Register MapIntVecMapLongStr in _cstl:
_cstl.MapIntVecMapLongStr_swigregister(MapIntVecMapLongStr)

class MapIntVecMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecMapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapIntVecMapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,float > > >::mapped_type const &":
        return _cstl.MapIntVecMapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,float > > >::key_type const &") -> "void":
        return _cstl.MapIntVecMapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecMapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecMapLongFloat_swiginit(self, _cstl.new_MapIntVecMapLongFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecMapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapIntVecMapLongFloat_size(self)

    def swap(self, v: "MapIntVecMapLongFloat") -> "void":
        return _cstl.MapIntVecMapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapIntVecMapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapIntVecMapLongFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecMapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,float > > >::allocator_type":
        return _cstl.MapIntVecMapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapIntVecMapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecMapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapIntVecMapLongFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecMapLongFloat

# Register MapIntVecMapLongFloat in _cstl:
_cstl.MapIntVecMapLongFloat_swigregister(MapIntVecMapLongFloat)

class MapIntVecMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecMapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapIntVecMapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,double > > >::mapped_type const &":
        return _cstl.MapIntVecMapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,double > > >::key_type const &") -> "void":
        return _cstl.MapIntVecMapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecMapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecMapLongDouble_swiginit(self, _cstl.new_MapIntVecMapLongDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecMapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapIntVecMapLongDouble_size(self)

    def swap(self, v: "MapIntVecMapLongDouble") -> "void":
        return _cstl.MapIntVecMapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapIntVecMapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapIntVecMapLongDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecMapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,double > > >::allocator_type":
        return _cstl.MapIntVecMapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapIntVecMapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecMapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapIntVecMapLongDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecMapLongDouble

# Register MapIntVecMapLongDouble in _cstl:
_cstl.MapIntVecMapLongDouble_swigregister(MapIntVecMapLongDouble)

class MapIntVecMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecMapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapIntVecMapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,bool > > >::mapped_type const &":
        return _cstl.MapIntVecMapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "void":
        return _cstl.MapIntVecMapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecMapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecMapLongBool_swiginit(self, _cstl.new_MapIntVecMapLongBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecMapLongBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapIntVecMapLongBool_size(self)

    def swap(self, v: "MapIntVecMapLongBool") -> "void":
        return _cstl.MapIntVecMapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapIntVecMapLongBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapIntVecMapLongBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecMapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,bool > > >::allocator_type":
        return _cstl.MapIntVecMapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapIntVecMapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecMapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapIntVecMapLongBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecMapLongBool

# Register MapIntVecMapLongBool in _cstl:
_cstl.MapIntVecMapLongBool_swigregister(MapIntVecMapLongBool)

class MapIntVecMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntVecMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntVecMapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapIntVecMapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntVecMapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntVecMapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntVecMapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntVecMapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntVecMapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntVecMapLongLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntVecMapLongLong_swiginit(self, _cstl.new_MapIntVecMapLongLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntVecMapLongLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapIntVecMapLongLong_size(self)

    def swap(self, v: "MapIntVecMapLongLong") -> "void":
        return _cstl.MapIntVecMapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapIntVecMapLongLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapIntVecMapLongLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntVecMapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::allocator_type":
        return _cstl.MapIntVecMapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapIntVecMapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntVecMapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapIntVecMapLongLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntVecMapLongLong

# Register MapIntVecMapLongLong in _cstl:
_cstl.MapIntVecMapLongLong_swigregister(MapIntVecMapLongLong)

class MapIntMapIntVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntVecInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< int > > >::size_type":
        return _cstl.MapIntMapIntVecInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::vector< int > > >::mapped_type const &":
        return _cstl.MapIntMapIntVecInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< int > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntVecInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntVecInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntVecInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntVecInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntVecInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntVecInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntVecInt_swiginit(self, _cstl.new_MapIntMapIntVecInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntVecInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< int > > >::size_type":
        return _cstl.MapIntMapIntVecInt_size(self)

    def swap(self, v: "MapIntMapIntVecInt") -> "void":
        return _cstl.MapIntMapIntVecInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< int > > >::iterator":
        return _cstl.MapIntMapIntVecInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< int > > >::iterator":
        return _cstl.MapIntMapIntVecInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntVecInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< int > > >::allocator_type":
        return _cstl.MapIntMapIntVecInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::vector< int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::vector< int > > >::size_type":
        return _cstl.MapIntMapIntVecInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntVecInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::vector< int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::vector< int > > >::iterator":
        return _cstl.MapIntMapIntVecInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntVecInt

# Register MapIntMapIntVecInt in _cstl:
_cstl.MapIntMapIntVecInt_swigregister(MapIntMapIntVecInt)

class MapIntMapIntVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntVecStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< std::string > > >::size_type":
        return _cstl.MapIntMapIntVecStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::vector< std::string > > >::mapped_type const &":
        return _cstl.MapIntMapIntVecStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntVecStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntVecStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntVecStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntVecStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntVecStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntVecStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntVecStr_swiginit(self, _cstl.new_MapIntMapIntVecStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntVecStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< std::string > > >::size_type":
        return _cstl.MapIntMapIntVecStr_size(self)

    def swap(self, v: "MapIntMapIntVecStr") -> "void":
        return _cstl.MapIntMapIntVecStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< std::string > > >::iterator":
        return _cstl.MapIntMapIntVecStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< std::string > > >::iterator":
        return _cstl.MapIntMapIntVecStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntVecStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< std::string > > >::allocator_type":
        return _cstl.MapIntMapIntVecStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::vector< std::string > > >::size_type":
        return _cstl.MapIntMapIntVecStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntVecStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::vector< std::string > > >::iterator":
        return _cstl.MapIntMapIntVecStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntVecStr

# Register MapIntMapIntVecStr in _cstl:
_cstl.MapIntMapIntVecStr_swigregister(MapIntMapIntVecStr)

class MapIntMapIntVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntVecFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< float > > >::size_type":
        return _cstl.MapIntMapIntVecFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::vector< float > > >::mapped_type const &":
        return _cstl.MapIntMapIntVecFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< float > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntVecFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntVecFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntVecFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntVecFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntVecFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntVecFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntVecFloat_swiginit(self, _cstl.new_MapIntMapIntVecFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntVecFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< float > > >::size_type":
        return _cstl.MapIntMapIntVecFloat_size(self)

    def swap(self, v: "MapIntMapIntVecFloat") -> "void":
        return _cstl.MapIntMapIntVecFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< float > > >::iterator":
        return _cstl.MapIntMapIntVecFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< float > > >::iterator":
        return _cstl.MapIntMapIntVecFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntVecFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< float > > >::allocator_type":
        return _cstl.MapIntMapIntVecFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::vector< float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::vector< float > > >::size_type":
        return _cstl.MapIntMapIntVecFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntVecFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::vector< float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::vector< float > > >::iterator":
        return _cstl.MapIntMapIntVecFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntVecFloat

# Register MapIntMapIntVecFloat in _cstl:
_cstl.MapIntMapIntVecFloat_swigregister(MapIntMapIntVecFloat)

class MapIntMapIntVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntVecDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< double > > >::size_type":
        return _cstl.MapIntMapIntVecDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::vector< double > > >::mapped_type const &":
        return _cstl.MapIntMapIntVecDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< double > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntVecDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntVecDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntVecDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntVecDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntVecDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntVecDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntVecDouble_swiginit(self, _cstl.new_MapIntMapIntVecDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntVecDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< double > > >::size_type":
        return _cstl.MapIntMapIntVecDouble_size(self)

    def swap(self, v: "MapIntMapIntVecDouble") -> "void":
        return _cstl.MapIntMapIntVecDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< double > > >::iterator":
        return _cstl.MapIntMapIntVecDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< double > > >::iterator":
        return _cstl.MapIntMapIntVecDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntVecDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< double > > >::allocator_type":
        return _cstl.MapIntMapIntVecDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::vector< double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::vector< double > > >::size_type":
        return _cstl.MapIntMapIntVecDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntVecDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::vector< double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::vector< double > > >::iterator":
        return _cstl.MapIntMapIntVecDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntVecDouble

# Register MapIntMapIntVecDouble in _cstl:
_cstl.MapIntMapIntVecDouble_swigregister(MapIntMapIntVecDouble)

class MapIntMapIntVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntVecBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< bool > > >::size_type":
        return _cstl.MapIntMapIntVecBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::vector< bool > > >::mapped_type const &":
        return _cstl.MapIntMapIntVecBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< bool > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntVecBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntVecBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntVecBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntVecBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntVecBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntVecBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntVecBool_swiginit(self, _cstl.new_MapIntMapIntVecBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntVecBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< bool > > >::size_type":
        return _cstl.MapIntMapIntVecBool_size(self)

    def swap(self, v: "MapIntMapIntVecBool") -> "void":
        return _cstl.MapIntMapIntVecBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< bool > > >::iterator":
        return _cstl.MapIntMapIntVecBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< bool > > >::iterator":
        return _cstl.MapIntMapIntVecBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntVecBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< bool > > >::allocator_type":
        return _cstl.MapIntMapIntVecBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::vector< bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::vector< bool > > >::size_type":
        return _cstl.MapIntMapIntVecBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntVecBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::vector< bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::vector< bool > > >::iterator":
        return _cstl.MapIntMapIntVecBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntVecBool

# Register MapIntMapIntVecBool in _cstl:
_cstl.MapIntMapIntVecBool_swigregister(MapIntMapIntVecBool)

class MapIntMapIntVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntVecLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapIntMapIntVecLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::vector< std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntMapIntVecLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntVecLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntVecLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntVecLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntVecLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntVecLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntVecLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntVecLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntVecLong_swiginit(self, _cstl.new_MapIntMapIntVecLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntVecLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapIntMapIntVecLong_size(self)

    def swap(self, v: "MapIntMapIntVecLong") -> "void":
        return _cstl.MapIntMapIntVecLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapIntMapIntVecLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapIntMapIntVecLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntVecLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::vector< std::int64_t > > >::allocator_type":
        return _cstl.MapIntMapIntVecLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapIntMapIntVecLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntVecLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapIntMapIntVecLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntVecLong

# Register MapIntMapIntVecLong in _cstl:
_cstl.MapIntMapIntVecLong_swigregister(MapIntMapIntVecLong)

class MapIntMapIntSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntSetInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< int > > >::size_type":
        return _cstl.MapIntMapIntSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< int > > >::mapped_type const &":
        return _cstl.MapIntMapIntSetInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_set< int > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntSetInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntSetInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntSetInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntSetInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntSetInt_swiginit(self, _cstl.new_MapIntMapIntSetInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntSetInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< int > > >::size_type":
        return _cstl.MapIntMapIntSetInt_size(self)

    def swap(self, v: "MapIntMapIntSetInt") -> "void":
        return _cstl.MapIntMapIntSetInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< int > > >::iterator":
        return _cstl.MapIntMapIntSetInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< int > > >::iterator":
        return _cstl.MapIntMapIntSetInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntSetInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< int > > >::allocator_type":
        return _cstl.MapIntMapIntSetInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< int > > >::size_type":
        return _cstl.MapIntMapIntSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntSetInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< int > > >::iterator":
        return _cstl.MapIntMapIntSetInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntSetInt

# Register MapIntMapIntSetInt in _cstl:
_cstl.MapIntMapIntSetInt_swigregister(MapIntMapIntSetInt)

class MapIntMapIntSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntSetStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapIntMapIntSetStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::string > > >::mapped_type const &":
        return _cstl.MapIntMapIntSetStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntSetStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntSetStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntSetStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntSetStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntSetStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntSetStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntSetStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntSetStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntSetStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntSetStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntSetStr_swiginit(self, _cstl.new_MapIntMapIntSetStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntSetStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapIntMapIntSetStr_size(self)

    def swap(self, v: "MapIntMapIntSetStr") -> "void":
        return _cstl.MapIntMapIntSetStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapIntMapIntSetStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapIntMapIntSetStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntSetStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::string > > >::allocator_type":
        return _cstl.MapIntMapIntSetStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapIntMapIntSetStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntSetStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapIntMapIntSetStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntSetStr

# Register MapIntMapIntSetStr in _cstl:
_cstl.MapIntMapIntSetStr_swigregister(MapIntMapIntSetStr)

class MapIntMapIntSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntSetLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapIntMapIntSetLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntMapIntSetLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntSetLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntSetLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntSetLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntSetLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntSetLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntSetLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntSetLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntSetLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntSetLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntSetLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntSetLong_swiginit(self, _cstl.new_MapIntMapIntSetLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntSetLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapIntMapIntSetLong_size(self)

    def swap(self, v: "MapIntMapIntSetLong") -> "void":
        return _cstl.MapIntMapIntSetLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapIntMapIntSetLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapIntMapIntSetLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntSetLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::int64_t > > >::allocator_type":
        return _cstl.MapIntMapIntSetLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapIntMapIntSetLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntSetLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapIntMapIntSetLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntSetLong

# Register MapIntMapIntSetLong in _cstl:
_cstl.MapIntMapIntSetLong_swigregister(MapIntMapIntSetLong)

class MapIntMapIntMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntMapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapIntMapIntMapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,int > > >::mapped_type const &":
        return _cstl.MapIntMapIntMapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,int > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntMapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntMapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntMapIntInt_swiginit(self, _cstl.new_MapIntMapIntMapIntInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntMapIntInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapIntMapIntMapIntInt_size(self)

    def swap(self, v: "MapIntMapIntMapIntInt") -> "void":
        return _cstl.MapIntMapIntMapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapIntMapIntMapIntInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapIntMapIntMapIntInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntMapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,int > > >::allocator_type":
        return _cstl.MapIntMapIntMapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapIntMapIntMapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntMapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapIntMapIntMapIntInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntMapIntInt

# Register MapIntMapIntMapIntInt in _cstl:
_cstl.MapIntMapIntMapIntInt_swigregister(MapIntMapIntMapIntInt)

class MapIntMapIntMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntMapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapIntMapIntMapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::string > > >::mapped_type const &":
        return _cstl.MapIntMapIntMapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntMapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntMapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntMapIntStr_swiginit(self, _cstl.new_MapIntMapIntMapIntStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntMapIntStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapIntMapIntMapIntStr_size(self)

    def swap(self, v: "MapIntMapIntMapIntStr") -> "void":
        return _cstl.MapIntMapIntMapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapIntMapIntMapIntStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapIntMapIntMapIntStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntMapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::string > > >::allocator_type":
        return _cstl.MapIntMapIntMapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapIntMapIntMapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntMapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapIntMapIntMapIntStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntMapIntStr

# Register MapIntMapIntMapIntStr in _cstl:
_cstl.MapIntMapIntMapIntStr_swigregister(MapIntMapIntMapIntStr)

class MapIntMapIntMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntMapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapIntMapIntMapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,float > > >::mapped_type const &":
        return _cstl.MapIntMapIntMapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,float > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntMapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntMapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntMapIntFloat_swiginit(self, _cstl.new_MapIntMapIntMapIntFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntMapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapIntMapIntMapIntFloat_size(self)

    def swap(self, v: "MapIntMapIntMapIntFloat") -> "void":
        return _cstl.MapIntMapIntMapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapIntMapIntMapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapIntMapIntMapIntFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntMapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,float > > >::allocator_type":
        return _cstl.MapIntMapIntMapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapIntMapIntMapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntMapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapIntMapIntMapIntFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntMapIntFloat

# Register MapIntMapIntMapIntFloat in _cstl:
_cstl.MapIntMapIntMapIntFloat_swigregister(MapIntMapIntMapIntFloat)

class MapIntMapIntMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntMapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapIntMapIntMapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,double > > >::mapped_type const &":
        return _cstl.MapIntMapIntMapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,double > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntMapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntMapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntMapIntDouble_swiginit(self, _cstl.new_MapIntMapIntMapIntDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntMapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapIntMapIntMapIntDouble_size(self)

    def swap(self, v: "MapIntMapIntMapIntDouble") -> "void":
        return _cstl.MapIntMapIntMapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapIntMapIntMapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapIntMapIntMapIntDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntMapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,double > > >::allocator_type":
        return _cstl.MapIntMapIntMapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapIntMapIntMapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntMapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapIntMapIntMapIntDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntMapIntDouble

# Register MapIntMapIntMapIntDouble in _cstl:
_cstl.MapIntMapIntMapIntDouble_swigregister(MapIntMapIntMapIntDouble)

class MapIntMapIntMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntMapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapIntMapIntMapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,bool > > >::mapped_type const &":
        return _cstl.MapIntMapIntMapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,bool > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntMapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntMapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntMapIntBool_swiginit(self, _cstl.new_MapIntMapIntMapIntBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntMapIntBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapIntMapIntMapIntBool_size(self)

    def swap(self, v: "MapIntMapIntMapIntBool") -> "void":
        return _cstl.MapIntMapIntMapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapIntMapIntMapIntBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapIntMapIntMapIntBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntMapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,bool > > >::allocator_type":
        return _cstl.MapIntMapIntMapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapIntMapIntMapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntMapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapIntMapIntMapIntBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntMapIntBool

# Register MapIntMapIntMapIntBool in _cstl:
_cstl.MapIntMapIntMapIntBool_swigregister(MapIntMapIntMapIntBool)

class MapIntMapIntMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntMapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapIntMapIntMapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntMapIntMapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntMapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntMapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapIntLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntMapIntLong_swiginit(self, _cstl.new_MapIntMapIntMapIntLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntMapIntLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapIntMapIntMapIntLong_size(self)

    def swap(self, v: "MapIntMapIntMapIntLong") -> "void":
        return _cstl.MapIntMapIntMapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapIntMapIntMapIntLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapIntMapIntMapIntLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntMapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::allocator_type":
        return _cstl.MapIntMapIntMapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapIntMapIntMapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntMapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapIntMapIntMapIntLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntMapIntLong

# Register MapIntMapIntMapIntLong in _cstl:
_cstl.MapIntMapIntMapIntLong_swigregister(MapIntMapIntMapIntLong)

class MapIntMapIntMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntMapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapIntMapIntMapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,int > > >::mapped_type const &":
        return _cstl.MapIntMapIntMapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,int > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntMapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntMapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntMapStrInt_swiginit(self, _cstl.new_MapIntMapIntMapStrInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntMapStrInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapIntMapIntMapStrInt_size(self)

    def swap(self, v: "MapIntMapIntMapStrInt") -> "void":
        return _cstl.MapIntMapIntMapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapIntMapIntMapStrInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapIntMapIntMapStrInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntMapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,int > > >::allocator_type":
        return _cstl.MapIntMapIntMapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapIntMapIntMapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntMapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapIntMapIntMapStrInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntMapStrInt

# Register MapIntMapIntMapStrInt in _cstl:
_cstl.MapIntMapIntMapStrInt_swigregister(MapIntMapIntMapStrInt)

class MapIntMapIntMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntMapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapIntMapIntMapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::mapped_type const &":
        return _cstl.MapIntMapIntMapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntMapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntMapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntMapStrStr_swiginit(self, _cstl.new_MapIntMapIntMapStrStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntMapStrStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapIntMapIntMapStrStr_size(self)

    def swap(self, v: "MapIntMapIntMapStrStr") -> "void":
        return _cstl.MapIntMapIntMapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapIntMapIntMapStrStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapIntMapIntMapStrStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntMapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::allocator_type":
        return _cstl.MapIntMapIntMapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapIntMapIntMapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntMapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapIntMapIntMapStrStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntMapStrStr

# Register MapIntMapIntMapStrStr in _cstl:
_cstl.MapIntMapIntMapStrStr_swigregister(MapIntMapIntMapStrStr)

class MapIntMapIntMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntMapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapIntMapIntMapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,float > > >::mapped_type const &":
        return _cstl.MapIntMapIntMapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,float > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntMapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntMapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntMapStrFloat_swiginit(self, _cstl.new_MapIntMapIntMapStrFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntMapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapIntMapIntMapStrFloat_size(self)

    def swap(self, v: "MapIntMapIntMapStrFloat") -> "void":
        return _cstl.MapIntMapIntMapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapIntMapIntMapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapIntMapIntMapStrFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntMapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,float > > >::allocator_type":
        return _cstl.MapIntMapIntMapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapIntMapIntMapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntMapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapIntMapIntMapStrFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntMapStrFloat

# Register MapIntMapIntMapStrFloat in _cstl:
_cstl.MapIntMapIntMapStrFloat_swigregister(MapIntMapIntMapStrFloat)

class MapIntMapIntMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntMapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapIntMapIntMapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,double > > >::mapped_type const &":
        return _cstl.MapIntMapIntMapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,double > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntMapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntMapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntMapStrDouble_swiginit(self, _cstl.new_MapIntMapIntMapStrDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntMapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapIntMapIntMapStrDouble_size(self)

    def swap(self, v: "MapIntMapIntMapStrDouble") -> "void":
        return _cstl.MapIntMapIntMapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapIntMapIntMapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapIntMapIntMapStrDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntMapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,double > > >::allocator_type":
        return _cstl.MapIntMapIntMapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapIntMapIntMapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntMapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapIntMapIntMapStrDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntMapStrDouble

# Register MapIntMapIntMapStrDouble in _cstl:
_cstl.MapIntMapIntMapStrDouble_swigregister(MapIntMapIntMapStrDouble)

class MapIntMapIntMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntMapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapIntMapIntMapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,bool > > >::mapped_type const &":
        return _cstl.MapIntMapIntMapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,bool > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntMapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntMapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntMapStrBool_swiginit(self, _cstl.new_MapIntMapIntMapStrBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntMapStrBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapIntMapIntMapStrBool_size(self)

    def swap(self, v: "MapIntMapIntMapStrBool") -> "void":
        return _cstl.MapIntMapIntMapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapIntMapIntMapStrBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapIntMapIntMapStrBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntMapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,bool > > >::allocator_type":
        return _cstl.MapIntMapIntMapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapIntMapIntMapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntMapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapIntMapIntMapStrBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntMapStrBool

# Register MapIntMapIntMapStrBool in _cstl:
_cstl.MapIntMapIntMapStrBool_swigregister(MapIntMapIntMapStrBool)

class MapIntMapIntMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntMapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapIntMapIntMapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntMapIntMapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntMapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntMapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapStrLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntMapStrLong_swiginit(self, _cstl.new_MapIntMapIntMapStrLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntMapStrLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapIntMapIntMapStrLong_size(self)

    def swap(self, v: "MapIntMapIntMapStrLong") -> "void":
        return _cstl.MapIntMapIntMapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapIntMapIntMapStrLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapIntMapIntMapStrLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntMapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::allocator_type":
        return _cstl.MapIntMapIntMapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapIntMapIntMapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntMapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapIntMapIntMapStrLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntMapStrLong

# Register MapIntMapIntMapStrLong in _cstl:
_cstl.MapIntMapIntMapStrLong_swigregister(MapIntMapIntMapStrLong)

class MapIntMapIntMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntMapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapIntMapIntMapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::mapped_type const &":
        return _cstl.MapIntMapIntMapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntMapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntMapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntMapLongInt_swiginit(self, _cstl.new_MapIntMapIntMapLongInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntMapLongInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapIntMapIntMapLongInt_size(self)

    def swap(self, v: "MapIntMapIntMapLongInt") -> "void":
        return _cstl.MapIntMapIntMapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapIntMapIntMapLongInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapIntMapIntMapLongInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntMapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::allocator_type":
        return _cstl.MapIntMapIntMapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapIntMapIntMapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntMapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapIntMapIntMapLongInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntMapLongInt

# Register MapIntMapIntMapLongInt in _cstl:
_cstl.MapIntMapIntMapLongInt_swigregister(MapIntMapIntMapLongInt)

class MapIntMapIntMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntMapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapIntMapIntMapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::mapped_type const &":
        return _cstl.MapIntMapIntMapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntMapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntMapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntMapLongStr_swiginit(self, _cstl.new_MapIntMapIntMapLongStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntMapLongStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapIntMapIntMapLongStr_size(self)

    def swap(self, v: "MapIntMapIntMapLongStr") -> "void":
        return _cstl.MapIntMapIntMapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapIntMapIntMapLongStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapIntMapIntMapLongStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntMapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::allocator_type":
        return _cstl.MapIntMapIntMapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapIntMapIntMapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntMapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapIntMapIntMapLongStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntMapLongStr

# Register MapIntMapIntMapLongStr in _cstl:
_cstl.MapIntMapIntMapLongStr_swigregister(MapIntMapIntMapLongStr)

class MapIntMapIntMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntMapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapIntMapIntMapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::mapped_type const &":
        return _cstl.MapIntMapIntMapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntMapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntMapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntMapLongFloat_swiginit(self, _cstl.new_MapIntMapIntMapLongFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntMapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapIntMapIntMapLongFloat_size(self)

    def swap(self, v: "MapIntMapIntMapLongFloat") -> "void":
        return _cstl.MapIntMapIntMapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapIntMapIntMapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapIntMapIntMapLongFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntMapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::allocator_type":
        return _cstl.MapIntMapIntMapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapIntMapIntMapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntMapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapIntMapIntMapLongFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntMapLongFloat

# Register MapIntMapIntMapLongFloat in _cstl:
_cstl.MapIntMapIntMapLongFloat_swigregister(MapIntMapIntMapLongFloat)

class MapIntMapIntMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntMapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapIntMapIntMapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::mapped_type const &":
        return _cstl.MapIntMapIntMapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntMapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntMapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntMapLongDouble_swiginit(self, _cstl.new_MapIntMapIntMapLongDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntMapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapIntMapIntMapLongDouble_size(self)

    def swap(self, v: "MapIntMapIntMapLongDouble") -> "void":
        return _cstl.MapIntMapIntMapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapIntMapIntMapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapIntMapIntMapLongDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntMapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::allocator_type":
        return _cstl.MapIntMapIntMapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapIntMapIntMapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntMapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapIntMapIntMapLongDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntMapLongDouble

# Register MapIntMapIntMapLongDouble in _cstl:
_cstl.MapIntMapIntMapLongDouble_swigregister(MapIntMapIntMapLongDouble)

class MapIntMapIntMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntMapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapIntMapIntMapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::mapped_type const &":
        return _cstl.MapIntMapIntMapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntMapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntMapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntMapLongBool_swiginit(self, _cstl.new_MapIntMapIntMapLongBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntMapLongBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapIntMapIntMapLongBool_size(self)

    def swap(self, v: "MapIntMapIntMapLongBool") -> "void":
        return _cstl.MapIntMapIntMapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapIntMapIntMapLongBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapIntMapIntMapLongBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntMapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::allocator_type":
        return _cstl.MapIntMapIntMapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapIntMapIntMapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntMapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapIntMapIntMapLongBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntMapLongBool

# Register MapIntMapIntMapLongBool in _cstl:
_cstl.MapIntMapIntMapLongBool_swigregister(MapIntMapIntMapLongBool)

class MapIntMapIntMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapIntMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapIntMapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapIntMapIntMapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntMapIntMapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntMapIntMapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapIntMapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapIntMapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapIntMapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapIntMapLongLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapIntMapLongLong_swiginit(self, _cstl.new_MapIntMapIntMapLongLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapIntMapLongLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapIntMapIntMapLongLong_size(self)

    def swap(self, v: "MapIntMapIntMapLongLong") -> "void":
        return _cstl.MapIntMapIntMapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapIntMapIntMapLongLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapIntMapIntMapLongLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapIntMapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::allocator_type":
        return _cstl.MapIntMapIntMapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapIntMapIntMapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapIntMapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapIntMapIntMapLongLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapIntMapLongLong

# Register MapIntMapIntMapLongLong in _cstl:
_cstl.MapIntMapIntMapLongLong_swigregister(MapIntMapIntMapLongLong)

class MapIntMapStrVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrVecInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< int > > >::size_type":
        return _cstl.MapIntMapStrVecInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< int > > >::mapped_type const &":
        return _cstl.MapIntMapStrVecInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< int > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrVecInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrVecInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrVecInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrVecInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrVecInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrVecInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrVecInt_swiginit(self, _cstl.new_MapIntMapStrVecInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrVecInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< int > > >::size_type":
        return _cstl.MapIntMapStrVecInt_size(self)

    def swap(self, v: "MapIntMapStrVecInt") -> "void":
        return _cstl.MapIntMapStrVecInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< int > > >::iterator":
        return _cstl.MapIntMapStrVecInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< int > > >::iterator":
        return _cstl.MapIntMapStrVecInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrVecInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< int > > >::allocator_type":
        return _cstl.MapIntMapStrVecInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::vector< int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< int > > >::size_type":
        return _cstl.MapIntMapStrVecInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrVecInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::vector< int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< int > > >::iterator":
        return _cstl.MapIntMapStrVecInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrVecInt

# Register MapIntMapStrVecInt in _cstl:
_cstl.MapIntMapStrVecInt_swigregister(MapIntMapStrVecInt)

class MapIntMapStrVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrVecStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::string > > >::size_type":
        return _cstl.MapIntMapStrVecStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::string > > >::mapped_type const &":
        return _cstl.MapIntMapStrVecStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrVecStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrVecStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrVecStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrVecStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrVecStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrVecStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrVecStr_swiginit(self, _cstl.new_MapIntMapStrVecStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrVecStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::string > > >::size_type":
        return _cstl.MapIntMapStrVecStr_size(self)

    def swap(self, v: "MapIntMapStrVecStr") -> "void":
        return _cstl.MapIntMapStrVecStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::string > > >::iterator":
        return _cstl.MapIntMapStrVecStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::string > > >::iterator":
        return _cstl.MapIntMapStrVecStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrVecStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::string > > >::allocator_type":
        return _cstl.MapIntMapStrVecStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::string > > >::size_type":
        return _cstl.MapIntMapStrVecStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrVecStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::string > > >::iterator":
        return _cstl.MapIntMapStrVecStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrVecStr

# Register MapIntMapStrVecStr in _cstl:
_cstl.MapIntMapStrVecStr_swigregister(MapIntMapStrVecStr)

class MapIntMapStrVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrVecFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< float > > >::size_type":
        return _cstl.MapIntMapStrVecFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< float > > >::mapped_type const &":
        return _cstl.MapIntMapStrVecFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< float > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrVecFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrVecFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrVecFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrVecFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrVecFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrVecFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrVecFloat_swiginit(self, _cstl.new_MapIntMapStrVecFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrVecFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< float > > >::size_type":
        return _cstl.MapIntMapStrVecFloat_size(self)

    def swap(self, v: "MapIntMapStrVecFloat") -> "void":
        return _cstl.MapIntMapStrVecFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< float > > >::iterator":
        return _cstl.MapIntMapStrVecFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< float > > >::iterator":
        return _cstl.MapIntMapStrVecFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrVecFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< float > > >::allocator_type":
        return _cstl.MapIntMapStrVecFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::vector< float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< float > > >::size_type":
        return _cstl.MapIntMapStrVecFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrVecFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::vector< float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< float > > >::iterator":
        return _cstl.MapIntMapStrVecFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrVecFloat

# Register MapIntMapStrVecFloat in _cstl:
_cstl.MapIntMapStrVecFloat_swigregister(MapIntMapStrVecFloat)

class MapIntMapStrVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrVecDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< double > > >::size_type":
        return _cstl.MapIntMapStrVecDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< double > > >::mapped_type const &":
        return _cstl.MapIntMapStrVecDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< double > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrVecDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrVecDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrVecDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrVecDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrVecDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrVecDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrVecDouble_swiginit(self, _cstl.new_MapIntMapStrVecDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrVecDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< double > > >::size_type":
        return _cstl.MapIntMapStrVecDouble_size(self)

    def swap(self, v: "MapIntMapStrVecDouble") -> "void":
        return _cstl.MapIntMapStrVecDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< double > > >::iterator":
        return _cstl.MapIntMapStrVecDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< double > > >::iterator":
        return _cstl.MapIntMapStrVecDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrVecDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< double > > >::allocator_type":
        return _cstl.MapIntMapStrVecDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::vector< double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< double > > >::size_type":
        return _cstl.MapIntMapStrVecDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrVecDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::vector< double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< double > > >::iterator":
        return _cstl.MapIntMapStrVecDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrVecDouble

# Register MapIntMapStrVecDouble in _cstl:
_cstl.MapIntMapStrVecDouble_swigregister(MapIntMapStrVecDouble)

class MapIntMapStrVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrVecBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< bool > > >::size_type":
        return _cstl.MapIntMapStrVecBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< bool > > >::mapped_type const &":
        return _cstl.MapIntMapStrVecBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< bool > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrVecBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrVecBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrVecBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrVecBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrVecBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrVecBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrVecBool_swiginit(self, _cstl.new_MapIntMapStrVecBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrVecBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< bool > > >::size_type":
        return _cstl.MapIntMapStrVecBool_size(self)

    def swap(self, v: "MapIntMapStrVecBool") -> "void":
        return _cstl.MapIntMapStrVecBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< bool > > >::iterator":
        return _cstl.MapIntMapStrVecBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< bool > > >::iterator":
        return _cstl.MapIntMapStrVecBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrVecBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< bool > > >::allocator_type":
        return _cstl.MapIntMapStrVecBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::vector< bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< bool > > >::size_type":
        return _cstl.MapIntMapStrVecBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrVecBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::vector< bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< bool > > >::iterator":
        return _cstl.MapIntMapStrVecBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrVecBool

# Register MapIntMapStrVecBool in _cstl:
_cstl.MapIntMapStrVecBool_swigregister(MapIntMapStrVecBool)

class MapIntMapStrVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrVecLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapIntMapStrVecLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntMapStrVecLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrVecLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrVecLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrVecLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrVecLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrVecLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrVecLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrVecLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrVecLong_swiginit(self, _cstl.new_MapIntMapStrVecLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrVecLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapIntMapStrVecLong_size(self)

    def swap(self, v: "MapIntMapStrVecLong") -> "void":
        return _cstl.MapIntMapStrVecLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapIntMapStrVecLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapIntMapStrVecLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrVecLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::int64_t > > >::allocator_type":
        return _cstl.MapIntMapStrVecLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapIntMapStrVecLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrVecLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapIntMapStrVecLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrVecLong

# Register MapIntMapStrVecLong in _cstl:
_cstl.MapIntMapStrVecLong_swigregister(MapIntMapStrVecLong)

class MapIntMapStrSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrSetInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< int > > >::size_type":
        return _cstl.MapIntMapStrSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< int > > >::mapped_type const &":
        return _cstl.MapIntMapStrSetInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< int > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrSetInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrSetInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrSetInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrSetInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrSetInt_swiginit(self, _cstl.new_MapIntMapStrSetInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrSetInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< int > > >::size_type":
        return _cstl.MapIntMapStrSetInt_size(self)

    def swap(self, v: "MapIntMapStrSetInt") -> "void":
        return _cstl.MapIntMapStrSetInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< int > > >::iterator":
        return _cstl.MapIntMapStrSetInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< int > > >::iterator":
        return _cstl.MapIntMapStrSetInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrSetInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< int > > >::allocator_type":
        return _cstl.MapIntMapStrSetInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< int > > >::size_type":
        return _cstl.MapIntMapStrSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrSetInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< int > > >::iterator":
        return _cstl.MapIntMapStrSetInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrSetInt

# Register MapIntMapStrSetInt in _cstl:
_cstl.MapIntMapStrSetInt_swigregister(MapIntMapStrSetInt)

class MapIntMapStrSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrSetStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapIntMapStrSetStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::string > > >::mapped_type const &":
        return _cstl.MapIntMapStrSetStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrSetStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrSetStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrSetStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrSetStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrSetStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrSetStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrSetStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrSetStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrSetStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrSetStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrSetStr_swiginit(self, _cstl.new_MapIntMapStrSetStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrSetStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapIntMapStrSetStr_size(self)

    def swap(self, v: "MapIntMapStrSetStr") -> "void":
        return _cstl.MapIntMapStrSetStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapIntMapStrSetStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapIntMapStrSetStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrSetStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::string > > >::allocator_type":
        return _cstl.MapIntMapStrSetStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapIntMapStrSetStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrSetStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapIntMapStrSetStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrSetStr

# Register MapIntMapStrSetStr in _cstl:
_cstl.MapIntMapStrSetStr_swigregister(MapIntMapStrSetStr)

class MapIntMapStrSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrSetLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapIntMapStrSetLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntMapStrSetLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrSetLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrSetLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrSetLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrSetLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrSetLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrSetLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrSetLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrSetLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrSetLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrSetLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrSetLong_swiginit(self, _cstl.new_MapIntMapStrSetLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrSetLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapIntMapStrSetLong_size(self)

    def swap(self, v: "MapIntMapStrSetLong") -> "void":
        return _cstl.MapIntMapStrSetLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapIntMapStrSetLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapIntMapStrSetLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrSetLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::allocator_type":
        return _cstl.MapIntMapStrSetLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapIntMapStrSetLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrSetLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapIntMapStrSetLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrSetLong

# Register MapIntMapStrSetLong in _cstl:
_cstl.MapIntMapStrSetLong_swigregister(MapIntMapStrSetLong)

class MapIntMapStrMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrMapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapIntMapStrMapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,int > > >::mapped_type const &":
        return _cstl.MapIntMapStrMapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,int > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrMapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrMapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrMapIntInt_swiginit(self, _cstl.new_MapIntMapStrMapIntInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrMapIntInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapIntMapStrMapIntInt_size(self)

    def swap(self, v: "MapIntMapStrMapIntInt") -> "void":
        return _cstl.MapIntMapStrMapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapIntMapStrMapIntInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapIntMapStrMapIntInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrMapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,int > > >::allocator_type":
        return _cstl.MapIntMapStrMapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapIntMapStrMapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrMapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapIntMapStrMapIntInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrMapIntInt

# Register MapIntMapStrMapIntInt in _cstl:
_cstl.MapIntMapStrMapIntInt_swigregister(MapIntMapStrMapIntInt)

class MapIntMapStrMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrMapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapIntMapStrMapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::mapped_type const &":
        return _cstl.MapIntMapStrMapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrMapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrMapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrMapIntStr_swiginit(self, _cstl.new_MapIntMapStrMapIntStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrMapIntStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapIntMapStrMapIntStr_size(self)

    def swap(self, v: "MapIntMapStrMapIntStr") -> "void":
        return _cstl.MapIntMapStrMapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapIntMapStrMapIntStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapIntMapStrMapIntStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrMapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::allocator_type":
        return _cstl.MapIntMapStrMapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapIntMapStrMapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrMapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapIntMapStrMapIntStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrMapIntStr

# Register MapIntMapStrMapIntStr in _cstl:
_cstl.MapIntMapStrMapIntStr_swigregister(MapIntMapStrMapIntStr)

class MapIntMapStrMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrMapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapIntMapStrMapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,float > > >::mapped_type const &":
        return _cstl.MapIntMapStrMapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,float > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrMapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrMapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrMapIntFloat_swiginit(self, _cstl.new_MapIntMapStrMapIntFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrMapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapIntMapStrMapIntFloat_size(self)

    def swap(self, v: "MapIntMapStrMapIntFloat") -> "void":
        return _cstl.MapIntMapStrMapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapIntMapStrMapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapIntMapStrMapIntFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrMapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,float > > >::allocator_type":
        return _cstl.MapIntMapStrMapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapIntMapStrMapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrMapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapIntMapStrMapIntFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrMapIntFloat

# Register MapIntMapStrMapIntFloat in _cstl:
_cstl.MapIntMapStrMapIntFloat_swigregister(MapIntMapStrMapIntFloat)

class MapIntMapStrMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrMapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapIntMapStrMapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,double > > >::mapped_type const &":
        return _cstl.MapIntMapStrMapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,double > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrMapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrMapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrMapIntDouble_swiginit(self, _cstl.new_MapIntMapStrMapIntDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrMapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapIntMapStrMapIntDouble_size(self)

    def swap(self, v: "MapIntMapStrMapIntDouble") -> "void":
        return _cstl.MapIntMapStrMapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapIntMapStrMapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapIntMapStrMapIntDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrMapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,double > > >::allocator_type":
        return _cstl.MapIntMapStrMapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapIntMapStrMapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrMapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapIntMapStrMapIntDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrMapIntDouble

# Register MapIntMapStrMapIntDouble in _cstl:
_cstl.MapIntMapStrMapIntDouble_swigregister(MapIntMapStrMapIntDouble)

class MapIntMapStrMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrMapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapIntMapStrMapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,bool > > >::mapped_type const &":
        return _cstl.MapIntMapStrMapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,bool > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrMapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrMapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrMapIntBool_swiginit(self, _cstl.new_MapIntMapStrMapIntBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrMapIntBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapIntMapStrMapIntBool_size(self)

    def swap(self, v: "MapIntMapStrMapIntBool") -> "void":
        return _cstl.MapIntMapStrMapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapIntMapStrMapIntBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapIntMapStrMapIntBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrMapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,bool > > >::allocator_type":
        return _cstl.MapIntMapStrMapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapIntMapStrMapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrMapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapIntMapStrMapIntBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrMapIntBool

# Register MapIntMapStrMapIntBool in _cstl:
_cstl.MapIntMapStrMapIntBool_swigregister(MapIntMapStrMapIntBool)

class MapIntMapStrMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrMapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapIntMapStrMapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntMapStrMapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrMapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrMapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapIntLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrMapIntLong_swiginit(self, _cstl.new_MapIntMapStrMapIntLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrMapIntLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapIntMapStrMapIntLong_size(self)

    def swap(self, v: "MapIntMapStrMapIntLong") -> "void":
        return _cstl.MapIntMapStrMapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapIntMapStrMapIntLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapIntMapStrMapIntLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrMapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::allocator_type":
        return _cstl.MapIntMapStrMapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapIntMapStrMapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrMapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapIntMapStrMapIntLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrMapIntLong

# Register MapIntMapStrMapIntLong in _cstl:
_cstl.MapIntMapStrMapIntLong_swigregister(MapIntMapStrMapIntLong)

class MapIntMapStrMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrMapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapIntMapStrMapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::mapped_type const &":
        return _cstl.MapIntMapStrMapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrMapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrMapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrMapStrInt_swiginit(self, _cstl.new_MapIntMapStrMapStrInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrMapStrInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapIntMapStrMapStrInt_size(self)

    def swap(self, v: "MapIntMapStrMapStrInt") -> "void":
        return _cstl.MapIntMapStrMapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapIntMapStrMapStrInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapIntMapStrMapStrInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrMapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::allocator_type":
        return _cstl.MapIntMapStrMapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapIntMapStrMapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrMapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapIntMapStrMapStrInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrMapStrInt

# Register MapIntMapStrMapStrInt in _cstl:
_cstl.MapIntMapStrMapStrInt_swigregister(MapIntMapStrMapStrInt)

class MapIntMapStrMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrMapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapIntMapStrMapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::mapped_type const &":
        return _cstl.MapIntMapStrMapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrMapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrMapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrMapStrStr_swiginit(self, _cstl.new_MapIntMapStrMapStrStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrMapStrStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapIntMapStrMapStrStr_size(self)

    def swap(self, v: "MapIntMapStrMapStrStr") -> "void":
        return _cstl.MapIntMapStrMapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapIntMapStrMapStrStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapIntMapStrMapStrStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrMapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::allocator_type":
        return _cstl.MapIntMapStrMapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapIntMapStrMapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrMapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapIntMapStrMapStrStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrMapStrStr

# Register MapIntMapStrMapStrStr in _cstl:
_cstl.MapIntMapStrMapStrStr_swigregister(MapIntMapStrMapStrStr)

class MapIntMapStrMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrMapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapIntMapStrMapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::mapped_type const &":
        return _cstl.MapIntMapStrMapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrMapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrMapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrMapStrFloat_swiginit(self, _cstl.new_MapIntMapStrMapStrFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrMapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapIntMapStrMapStrFloat_size(self)

    def swap(self, v: "MapIntMapStrMapStrFloat") -> "void":
        return _cstl.MapIntMapStrMapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapIntMapStrMapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapIntMapStrMapStrFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrMapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::allocator_type":
        return _cstl.MapIntMapStrMapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapIntMapStrMapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrMapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapIntMapStrMapStrFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrMapStrFloat

# Register MapIntMapStrMapStrFloat in _cstl:
_cstl.MapIntMapStrMapStrFloat_swigregister(MapIntMapStrMapStrFloat)

class MapIntMapStrMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrMapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapIntMapStrMapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::mapped_type const &":
        return _cstl.MapIntMapStrMapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrMapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrMapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrMapStrDouble_swiginit(self, _cstl.new_MapIntMapStrMapStrDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrMapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapIntMapStrMapStrDouble_size(self)

    def swap(self, v: "MapIntMapStrMapStrDouble") -> "void":
        return _cstl.MapIntMapStrMapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapIntMapStrMapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapIntMapStrMapStrDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrMapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::allocator_type":
        return _cstl.MapIntMapStrMapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapIntMapStrMapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrMapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapIntMapStrMapStrDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrMapStrDouble

# Register MapIntMapStrMapStrDouble in _cstl:
_cstl.MapIntMapStrMapStrDouble_swigregister(MapIntMapStrMapStrDouble)

class MapIntMapStrMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrMapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapIntMapStrMapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::mapped_type const &":
        return _cstl.MapIntMapStrMapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrMapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrMapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrMapStrBool_swiginit(self, _cstl.new_MapIntMapStrMapStrBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrMapStrBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapIntMapStrMapStrBool_size(self)

    def swap(self, v: "MapIntMapStrMapStrBool") -> "void":
        return _cstl.MapIntMapStrMapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapIntMapStrMapStrBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapIntMapStrMapStrBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrMapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::allocator_type":
        return _cstl.MapIntMapStrMapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapIntMapStrMapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrMapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapIntMapStrMapStrBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrMapStrBool

# Register MapIntMapStrMapStrBool in _cstl:
_cstl.MapIntMapStrMapStrBool_swigregister(MapIntMapStrMapStrBool)

class MapIntMapStrMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrMapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapIntMapStrMapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntMapStrMapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrMapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrMapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapStrLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrMapStrLong_swiginit(self, _cstl.new_MapIntMapStrMapStrLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrMapStrLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapIntMapStrMapStrLong_size(self)

    def swap(self, v: "MapIntMapStrMapStrLong") -> "void":
        return _cstl.MapIntMapStrMapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapIntMapStrMapStrLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapIntMapStrMapStrLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrMapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::allocator_type":
        return _cstl.MapIntMapStrMapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapIntMapStrMapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrMapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapIntMapStrMapStrLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrMapStrLong

# Register MapIntMapStrMapStrLong in _cstl:
_cstl.MapIntMapStrMapStrLong_swigregister(MapIntMapStrMapStrLong)

class MapIntMapStrMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrMapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapIntMapStrMapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::mapped_type const &":
        return _cstl.MapIntMapStrMapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrMapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrMapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrMapLongInt_swiginit(self, _cstl.new_MapIntMapStrMapLongInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrMapLongInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapIntMapStrMapLongInt_size(self)

    def swap(self, v: "MapIntMapStrMapLongInt") -> "void":
        return _cstl.MapIntMapStrMapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapIntMapStrMapLongInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapIntMapStrMapLongInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrMapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::allocator_type":
        return _cstl.MapIntMapStrMapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapIntMapStrMapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrMapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapIntMapStrMapLongInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrMapLongInt

# Register MapIntMapStrMapLongInt in _cstl:
_cstl.MapIntMapStrMapLongInt_swigregister(MapIntMapStrMapLongInt)

class MapIntMapStrMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrMapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapIntMapStrMapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::mapped_type const &":
        return _cstl.MapIntMapStrMapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrMapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrMapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrMapLongStr_swiginit(self, _cstl.new_MapIntMapStrMapLongStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrMapLongStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapIntMapStrMapLongStr_size(self)

    def swap(self, v: "MapIntMapStrMapLongStr") -> "void":
        return _cstl.MapIntMapStrMapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapIntMapStrMapLongStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapIntMapStrMapLongStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrMapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::allocator_type":
        return _cstl.MapIntMapStrMapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapIntMapStrMapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrMapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapIntMapStrMapLongStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrMapLongStr

# Register MapIntMapStrMapLongStr in _cstl:
_cstl.MapIntMapStrMapLongStr_swigregister(MapIntMapStrMapLongStr)

class MapIntMapStrMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrMapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapIntMapStrMapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::mapped_type const &":
        return _cstl.MapIntMapStrMapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrMapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrMapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrMapLongFloat_swiginit(self, _cstl.new_MapIntMapStrMapLongFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrMapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapIntMapStrMapLongFloat_size(self)

    def swap(self, v: "MapIntMapStrMapLongFloat") -> "void":
        return _cstl.MapIntMapStrMapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapIntMapStrMapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapIntMapStrMapLongFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrMapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::allocator_type":
        return _cstl.MapIntMapStrMapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapIntMapStrMapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrMapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapIntMapStrMapLongFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrMapLongFloat

# Register MapIntMapStrMapLongFloat in _cstl:
_cstl.MapIntMapStrMapLongFloat_swigregister(MapIntMapStrMapLongFloat)

class MapIntMapStrMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrMapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapIntMapStrMapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::mapped_type const &":
        return _cstl.MapIntMapStrMapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrMapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrMapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrMapLongDouble_swiginit(self, _cstl.new_MapIntMapStrMapLongDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrMapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapIntMapStrMapLongDouble_size(self)

    def swap(self, v: "MapIntMapStrMapLongDouble") -> "void":
        return _cstl.MapIntMapStrMapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapIntMapStrMapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapIntMapStrMapLongDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrMapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::allocator_type":
        return _cstl.MapIntMapStrMapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapIntMapStrMapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrMapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapIntMapStrMapLongDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrMapLongDouble

# Register MapIntMapStrMapLongDouble in _cstl:
_cstl.MapIntMapStrMapLongDouble_swigregister(MapIntMapStrMapLongDouble)

class MapIntMapStrMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrMapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapIntMapStrMapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::mapped_type const &":
        return _cstl.MapIntMapStrMapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrMapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrMapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrMapLongBool_swiginit(self, _cstl.new_MapIntMapStrMapLongBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrMapLongBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapIntMapStrMapLongBool_size(self)

    def swap(self, v: "MapIntMapStrMapLongBool") -> "void":
        return _cstl.MapIntMapStrMapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapIntMapStrMapLongBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapIntMapStrMapLongBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrMapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::allocator_type":
        return _cstl.MapIntMapStrMapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapIntMapStrMapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrMapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapIntMapStrMapLongBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrMapLongBool

# Register MapIntMapStrMapLongBool in _cstl:
_cstl.MapIntMapStrMapLongBool_swigregister(MapIntMapStrMapLongBool)

class MapIntMapStrMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapStrMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapStrMapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapIntMapStrMapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntMapStrMapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntMapStrMapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapStrMapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapStrMapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapStrMapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapStrMapLongLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapStrMapLongLong_swiginit(self, _cstl.new_MapIntMapStrMapLongLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapStrMapLongLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapIntMapStrMapLongLong_size(self)

    def swap(self, v: "MapIntMapStrMapLongLong") -> "void":
        return _cstl.MapIntMapStrMapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapIntMapStrMapLongLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapIntMapStrMapLongLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapStrMapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::allocator_type":
        return _cstl.MapIntMapStrMapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapIntMapStrMapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapStrMapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapIntMapStrMapLongLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapStrMapLongLong

# Register MapIntMapStrMapLongLong in _cstl:
_cstl.MapIntMapStrMapLongLong_swigregister(MapIntMapStrMapLongLong)

class MapIntMapLongVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongVecInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< int > > >::size_type":
        return _cstl.MapIntMapLongVecInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< int > > >::mapped_type const &":
        return _cstl.MapIntMapLongVecInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< int > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongVecInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongVecInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongVecInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongVecInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongVecInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongVecInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongVecInt_swiginit(self, _cstl.new_MapIntMapLongVecInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongVecInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< int > > >::size_type":
        return _cstl.MapIntMapLongVecInt_size(self)

    def swap(self, v: "MapIntMapLongVecInt") -> "void":
        return _cstl.MapIntMapLongVecInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< int > > >::iterator":
        return _cstl.MapIntMapLongVecInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< int > > >::iterator":
        return _cstl.MapIntMapLongVecInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongVecInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< int > > >::allocator_type":
        return _cstl.MapIntMapLongVecInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< int > > >::size_type":
        return _cstl.MapIntMapLongVecInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongVecInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< int > > >::iterator":
        return _cstl.MapIntMapLongVecInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongVecInt

# Register MapIntMapLongVecInt in _cstl:
_cstl.MapIntMapLongVecInt_swigregister(MapIntMapLongVecInt)

class MapIntMapLongVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongVecStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::string > > >::size_type":
        return _cstl.MapIntMapLongVecStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::string > > >::mapped_type const &":
        return _cstl.MapIntMapLongVecStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongVecStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongVecStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongVecStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongVecStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongVecStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongVecStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongVecStr_swiginit(self, _cstl.new_MapIntMapLongVecStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongVecStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::string > > >::size_type":
        return _cstl.MapIntMapLongVecStr_size(self)

    def swap(self, v: "MapIntMapLongVecStr") -> "void":
        return _cstl.MapIntMapLongVecStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::string > > >::iterator":
        return _cstl.MapIntMapLongVecStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::string > > >::iterator":
        return _cstl.MapIntMapLongVecStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongVecStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::string > > >::allocator_type":
        return _cstl.MapIntMapLongVecStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::string > > >::size_type":
        return _cstl.MapIntMapLongVecStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongVecStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::string > > >::iterator":
        return _cstl.MapIntMapLongVecStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongVecStr

# Register MapIntMapLongVecStr in _cstl:
_cstl.MapIntMapLongVecStr_swigregister(MapIntMapLongVecStr)

class MapIntMapLongVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongVecFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< float > > >::size_type":
        return _cstl.MapIntMapLongVecFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< float > > >::mapped_type const &":
        return _cstl.MapIntMapLongVecFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< float > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongVecFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongVecFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongVecFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongVecFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongVecFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongVecFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongVecFloat_swiginit(self, _cstl.new_MapIntMapLongVecFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongVecFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< float > > >::size_type":
        return _cstl.MapIntMapLongVecFloat_size(self)

    def swap(self, v: "MapIntMapLongVecFloat") -> "void":
        return _cstl.MapIntMapLongVecFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< float > > >::iterator":
        return _cstl.MapIntMapLongVecFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< float > > >::iterator":
        return _cstl.MapIntMapLongVecFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongVecFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< float > > >::allocator_type":
        return _cstl.MapIntMapLongVecFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< float > > >::size_type":
        return _cstl.MapIntMapLongVecFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongVecFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< float > > >::iterator":
        return _cstl.MapIntMapLongVecFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongVecFloat

# Register MapIntMapLongVecFloat in _cstl:
_cstl.MapIntMapLongVecFloat_swigregister(MapIntMapLongVecFloat)

class MapIntMapLongVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongVecDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< double > > >::size_type":
        return _cstl.MapIntMapLongVecDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< double > > >::mapped_type const &":
        return _cstl.MapIntMapLongVecDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< double > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongVecDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongVecDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongVecDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongVecDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongVecDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongVecDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongVecDouble_swiginit(self, _cstl.new_MapIntMapLongVecDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongVecDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< double > > >::size_type":
        return _cstl.MapIntMapLongVecDouble_size(self)

    def swap(self, v: "MapIntMapLongVecDouble") -> "void":
        return _cstl.MapIntMapLongVecDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< double > > >::iterator":
        return _cstl.MapIntMapLongVecDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< double > > >::iterator":
        return _cstl.MapIntMapLongVecDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongVecDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< double > > >::allocator_type":
        return _cstl.MapIntMapLongVecDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< double > > >::size_type":
        return _cstl.MapIntMapLongVecDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongVecDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< double > > >::iterator":
        return _cstl.MapIntMapLongVecDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongVecDouble

# Register MapIntMapLongVecDouble in _cstl:
_cstl.MapIntMapLongVecDouble_swigregister(MapIntMapLongVecDouble)

class MapIntMapLongVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongVecBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< bool > > >::size_type":
        return _cstl.MapIntMapLongVecBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< bool > > >::mapped_type const &":
        return _cstl.MapIntMapLongVecBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< bool > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongVecBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongVecBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongVecBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongVecBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongVecBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongVecBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongVecBool_swiginit(self, _cstl.new_MapIntMapLongVecBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongVecBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< bool > > >::size_type":
        return _cstl.MapIntMapLongVecBool_size(self)

    def swap(self, v: "MapIntMapLongVecBool") -> "void":
        return _cstl.MapIntMapLongVecBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< bool > > >::iterator":
        return _cstl.MapIntMapLongVecBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< bool > > >::iterator":
        return _cstl.MapIntMapLongVecBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongVecBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< bool > > >::allocator_type":
        return _cstl.MapIntMapLongVecBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< bool > > >::size_type":
        return _cstl.MapIntMapLongVecBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongVecBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< bool > > >::iterator":
        return _cstl.MapIntMapLongVecBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongVecBool

# Register MapIntMapLongVecBool in _cstl:
_cstl.MapIntMapLongVecBool_swigregister(MapIntMapLongVecBool)

class MapIntMapLongVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongVecLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapIntMapLongVecLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntMapLongVecLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongVecLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongVecLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongVecLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongVecLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongVecLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongVecLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongVecLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongVecLong_swiginit(self, _cstl.new_MapIntMapLongVecLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongVecLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapIntMapLongVecLong_size(self)

    def swap(self, v: "MapIntMapLongVecLong") -> "void":
        return _cstl.MapIntMapLongVecLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapIntMapLongVecLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapIntMapLongVecLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongVecLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::allocator_type":
        return _cstl.MapIntMapLongVecLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapIntMapLongVecLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongVecLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapIntMapLongVecLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongVecLong

# Register MapIntMapLongVecLong in _cstl:
_cstl.MapIntMapLongVecLong_swigregister(MapIntMapLongVecLong)

class MapIntMapLongSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongSetInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< int > > >::size_type":
        return _cstl.MapIntMapLongSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< int > > >::mapped_type const &":
        return _cstl.MapIntMapLongSetInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< int > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongSetInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongSetInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongSetInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongSetInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongSetInt_swiginit(self, _cstl.new_MapIntMapLongSetInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongSetInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< int > > >::size_type":
        return _cstl.MapIntMapLongSetInt_size(self)

    def swap(self, v: "MapIntMapLongSetInt") -> "void":
        return _cstl.MapIntMapLongSetInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< int > > >::iterator":
        return _cstl.MapIntMapLongSetInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< int > > >::iterator":
        return _cstl.MapIntMapLongSetInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongSetInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< int > > >::allocator_type":
        return _cstl.MapIntMapLongSetInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< int > > >::size_type":
        return _cstl.MapIntMapLongSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongSetInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< int > > >::iterator":
        return _cstl.MapIntMapLongSetInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongSetInt

# Register MapIntMapLongSetInt in _cstl:
_cstl.MapIntMapLongSetInt_swigregister(MapIntMapLongSetInt)

class MapIntMapLongSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongSetStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapIntMapLongSetStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::mapped_type const &":
        return _cstl.MapIntMapLongSetStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongSetStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongSetStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongSetStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongSetStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongSetStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongSetStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongSetStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongSetStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongSetStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongSetStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongSetStr_swiginit(self, _cstl.new_MapIntMapLongSetStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongSetStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapIntMapLongSetStr_size(self)

    def swap(self, v: "MapIntMapLongSetStr") -> "void":
        return _cstl.MapIntMapLongSetStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapIntMapLongSetStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapIntMapLongSetStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongSetStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::allocator_type":
        return _cstl.MapIntMapLongSetStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapIntMapLongSetStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongSetStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapIntMapLongSetStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongSetStr

# Register MapIntMapLongSetStr in _cstl:
_cstl.MapIntMapLongSetStr_swigregister(MapIntMapLongSetStr)

class MapIntMapLongSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongSetLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapIntMapLongSetLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntMapLongSetLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongSetLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongSetLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongSetLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongSetLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongSetLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongSetLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongSetLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongSetLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongSetLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongSetLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongSetLong_swiginit(self, _cstl.new_MapIntMapLongSetLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongSetLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapIntMapLongSetLong_size(self)

    def swap(self, v: "MapIntMapLongSetLong") -> "void":
        return _cstl.MapIntMapLongSetLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapIntMapLongSetLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapIntMapLongSetLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongSetLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::allocator_type":
        return _cstl.MapIntMapLongSetLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapIntMapLongSetLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongSetLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapIntMapLongSetLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongSetLong

# Register MapIntMapLongSetLong in _cstl:
_cstl.MapIntMapLongSetLong_swigregister(MapIntMapLongSetLong)

class MapIntMapLongMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongMapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapIntMapLongMapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::mapped_type const &":
        return _cstl.MapIntMapLongMapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongMapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongMapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongMapIntInt_swiginit(self, _cstl.new_MapIntMapLongMapIntInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongMapIntInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapIntMapLongMapIntInt_size(self)

    def swap(self, v: "MapIntMapLongMapIntInt") -> "void":
        return _cstl.MapIntMapLongMapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapIntMapLongMapIntInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapIntMapLongMapIntInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongMapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::allocator_type":
        return _cstl.MapIntMapLongMapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapIntMapLongMapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongMapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapIntMapLongMapIntInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongMapIntInt

# Register MapIntMapLongMapIntInt in _cstl:
_cstl.MapIntMapLongMapIntInt_swigregister(MapIntMapLongMapIntInt)

class MapIntMapLongMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongMapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapIntMapLongMapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::mapped_type const &":
        return _cstl.MapIntMapLongMapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongMapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongMapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongMapIntStr_swiginit(self, _cstl.new_MapIntMapLongMapIntStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongMapIntStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapIntMapLongMapIntStr_size(self)

    def swap(self, v: "MapIntMapLongMapIntStr") -> "void":
        return _cstl.MapIntMapLongMapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapIntMapLongMapIntStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapIntMapLongMapIntStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongMapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::allocator_type":
        return _cstl.MapIntMapLongMapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapIntMapLongMapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongMapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapIntMapLongMapIntStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongMapIntStr

# Register MapIntMapLongMapIntStr in _cstl:
_cstl.MapIntMapLongMapIntStr_swigregister(MapIntMapLongMapIntStr)

class MapIntMapLongMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongMapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapIntMapLongMapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::mapped_type const &":
        return _cstl.MapIntMapLongMapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongMapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongMapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongMapIntFloat_swiginit(self, _cstl.new_MapIntMapLongMapIntFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongMapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapIntMapLongMapIntFloat_size(self)

    def swap(self, v: "MapIntMapLongMapIntFloat") -> "void":
        return _cstl.MapIntMapLongMapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapIntMapLongMapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapIntMapLongMapIntFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongMapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::allocator_type":
        return _cstl.MapIntMapLongMapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapIntMapLongMapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongMapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapIntMapLongMapIntFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongMapIntFloat

# Register MapIntMapLongMapIntFloat in _cstl:
_cstl.MapIntMapLongMapIntFloat_swigregister(MapIntMapLongMapIntFloat)

class MapIntMapLongMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongMapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapIntMapLongMapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::mapped_type const &":
        return _cstl.MapIntMapLongMapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongMapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongMapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongMapIntDouble_swiginit(self, _cstl.new_MapIntMapLongMapIntDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongMapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapIntMapLongMapIntDouble_size(self)

    def swap(self, v: "MapIntMapLongMapIntDouble") -> "void":
        return _cstl.MapIntMapLongMapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapIntMapLongMapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapIntMapLongMapIntDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongMapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::allocator_type":
        return _cstl.MapIntMapLongMapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapIntMapLongMapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongMapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapIntMapLongMapIntDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongMapIntDouble

# Register MapIntMapLongMapIntDouble in _cstl:
_cstl.MapIntMapLongMapIntDouble_swigregister(MapIntMapLongMapIntDouble)

class MapIntMapLongMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongMapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapIntMapLongMapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::mapped_type const &":
        return _cstl.MapIntMapLongMapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongMapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongMapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongMapIntBool_swiginit(self, _cstl.new_MapIntMapLongMapIntBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongMapIntBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapIntMapLongMapIntBool_size(self)

    def swap(self, v: "MapIntMapLongMapIntBool") -> "void":
        return _cstl.MapIntMapLongMapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapIntMapLongMapIntBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapIntMapLongMapIntBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongMapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::allocator_type":
        return _cstl.MapIntMapLongMapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapIntMapLongMapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongMapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapIntMapLongMapIntBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongMapIntBool

# Register MapIntMapLongMapIntBool in _cstl:
_cstl.MapIntMapLongMapIntBool_swigregister(MapIntMapLongMapIntBool)

class MapIntMapLongMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongMapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapIntMapLongMapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntMapLongMapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongMapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongMapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapIntLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongMapIntLong_swiginit(self, _cstl.new_MapIntMapLongMapIntLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongMapIntLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapIntMapLongMapIntLong_size(self)

    def swap(self, v: "MapIntMapLongMapIntLong") -> "void":
        return _cstl.MapIntMapLongMapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapIntMapLongMapIntLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapIntMapLongMapIntLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongMapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::allocator_type":
        return _cstl.MapIntMapLongMapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapIntMapLongMapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongMapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapIntMapLongMapIntLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongMapIntLong

# Register MapIntMapLongMapIntLong in _cstl:
_cstl.MapIntMapLongMapIntLong_swigregister(MapIntMapLongMapIntLong)

class MapIntMapLongMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongMapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapIntMapLongMapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::mapped_type const &":
        return _cstl.MapIntMapLongMapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongMapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongMapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongMapStrInt_swiginit(self, _cstl.new_MapIntMapLongMapStrInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongMapStrInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapIntMapLongMapStrInt_size(self)

    def swap(self, v: "MapIntMapLongMapStrInt") -> "void":
        return _cstl.MapIntMapLongMapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapIntMapLongMapStrInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapIntMapLongMapStrInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongMapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::allocator_type":
        return _cstl.MapIntMapLongMapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapIntMapLongMapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongMapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapIntMapLongMapStrInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongMapStrInt

# Register MapIntMapLongMapStrInt in _cstl:
_cstl.MapIntMapLongMapStrInt_swigregister(MapIntMapLongMapStrInt)

class MapIntMapLongMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongMapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapIntMapLongMapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::mapped_type const &":
        return _cstl.MapIntMapLongMapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongMapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongMapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongMapStrStr_swiginit(self, _cstl.new_MapIntMapLongMapStrStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongMapStrStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapIntMapLongMapStrStr_size(self)

    def swap(self, v: "MapIntMapLongMapStrStr") -> "void":
        return _cstl.MapIntMapLongMapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapIntMapLongMapStrStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapIntMapLongMapStrStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongMapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::allocator_type":
        return _cstl.MapIntMapLongMapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapIntMapLongMapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongMapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapIntMapLongMapStrStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongMapStrStr

# Register MapIntMapLongMapStrStr in _cstl:
_cstl.MapIntMapLongMapStrStr_swigregister(MapIntMapLongMapStrStr)

class MapIntMapLongMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongMapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapIntMapLongMapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::mapped_type const &":
        return _cstl.MapIntMapLongMapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongMapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongMapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongMapStrFloat_swiginit(self, _cstl.new_MapIntMapLongMapStrFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongMapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapIntMapLongMapStrFloat_size(self)

    def swap(self, v: "MapIntMapLongMapStrFloat") -> "void":
        return _cstl.MapIntMapLongMapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapIntMapLongMapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapIntMapLongMapStrFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongMapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::allocator_type":
        return _cstl.MapIntMapLongMapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapIntMapLongMapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongMapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapIntMapLongMapStrFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongMapStrFloat

# Register MapIntMapLongMapStrFloat in _cstl:
_cstl.MapIntMapLongMapStrFloat_swigregister(MapIntMapLongMapStrFloat)

class MapIntMapLongMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongMapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapIntMapLongMapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::mapped_type const &":
        return _cstl.MapIntMapLongMapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongMapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongMapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongMapStrDouble_swiginit(self, _cstl.new_MapIntMapLongMapStrDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongMapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapIntMapLongMapStrDouble_size(self)

    def swap(self, v: "MapIntMapLongMapStrDouble") -> "void":
        return _cstl.MapIntMapLongMapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapIntMapLongMapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapIntMapLongMapStrDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongMapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::allocator_type":
        return _cstl.MapIntMapLongMapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapIntMapLongMapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongMapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapIntMapLongMapStrDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongMapStrDouble

# Register MapIntMapLongMapStrDouble in _cstl:
_cstl.MapIntMapLongMapStrDouble_swigregister(MapIntMapLongMapStrDouble)

class MapIntMapLongMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongMapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapIntMapLongMapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::mapped_type const &":
        return _cstl.MapIntMapLongMapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongMapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongMapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongMapStrBool_swiginit(self, _cstl.new_MapIntMapLongMapStrBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongMapStrBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapIntMapLongMapStrBool_size(self)

    def swap(self, v: "MapIntMapLongMapStrBool") -> "void":
        return _cstl.MapIntMapLongMapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapIntMapLongMapStrBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapIntMapLongMapStrBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongMapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::allocator_type":
        return _cstl.MapIntMapLongMapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapIntMapLongMapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongMapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapIntMapLongMapStrBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongMapStrBool

# Register MapIntMapLongMapStrBool in _cstl:
_cstl.MapIntMapLongMapStrBool_swigregister(MapIntMapLongMapStrBool)

class MapIntMapLongMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongMapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapIntMapLongMapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntMapLongMapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongMapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongMapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapStrLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongMapStrLong_swiginit(self, _cstl.new_MapIntMapLongMapStrLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongMapStrLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapIntMapLongMapStrLong_size(self)

    def swap(self, v: "MapIntMapLongMapStrLong") -> "void":
        return _cstl.MapIntMapLongMapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapIntMapLongMapStrLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapIntMapLongMapStrLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongMapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::allocator_type":
        return _cstl.MapIntMapLongMapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapIntMapLongMapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongMapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapIntMapLongMapStrLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongMapStrLong

# Register MapIntMapLongMapStrLong in _cstl:
_cstl.MapIntMapLongMapStrLong_swigregister(MapIntMapLongMapStrLong)

class MapIntMapLongMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongMapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapIntMapLongMapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::mapped_type const &":
        return _cstl.MapIntMapLongMapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongMapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongMapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongMapLongInt_swiginit(self, _cstl.new_MapIntMapLongMapLongInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongMapLongInt_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapIntMapLongMapLongInt_size(self)

    def swap(self, v: "MapIntMapLongMapLongInt") -> "void":
        return _cstl.MapIntMapLongMapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapIntMapLongMapLongInt_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapIntMapLongMapLongInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongMapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::allocator_type":
        return _cstl.MapIntMapLongMapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapIntMapLongMapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongMapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapIntMapLongMapLongInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongMapLongInt

# Register MapIntMapLongMapLongInt in _cstl:
_cstl.MapIntMapLongMapLongInt_swigregister(MapIntMapLongMapLongInt)

class MapIntMapLongMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongMapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapIntMapLongMapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::mapped_type const &":
        return _cstl.MapIntMapLongMapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongMapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongMapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongMapLongStr_swiginit(self, _cstl.new_MapIntMapLongMapLongStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongMapLongStr_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapIntMapLongMapLongStr_size(self)

    def swap(self, v: "MapIntMapLongMapLongStr") -> "void":
        return _cstl.MapIntMapLongMapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapIntMapLongMapLongStr_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapIntMapLongMapLongStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongMapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::allocator_type":
        return _cstl.MapIntMapLongMapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapIntMapLongMapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongMapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapIntMapLongMapLongStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongMapLongStr

# Register MapIntMapLongMapLongStr in _cstl:
_cstl.MapIntMapLongMapLongStr_swigregister(MapIntMapLongMapLongStr)

class MapIntMapLongMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongMapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapIntMapLongMapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::mapped_type const &":
        return _cstl.MapIntMapLongMapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongMapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongMapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongMapLongFloat_swiginit(self, _cstl.new_MapIntMapLongMapLongFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongMapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapIntMapLongMapLongFloat_size(self)

    def swap(self, v: "MapIntMapLongMapLongFloat") -> "void":
        return _cstl.MapIntMapLongMapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapIntMapLongMapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapIntMapLongMapLongFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongMapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::allocator_type":
        return _cstl.MapIntMapLongMapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapIntMapLongMapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongMapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapIntMapLongMapLongFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongMapLongFloat

# Register MapIntMapLongMapLongFloat in _cstl:
_cstl.MapIntMapLongMapLongFloat_swigregister(MapIntMapLongMapLongFloat)

class MapIntMapLongMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongMapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapIntMapLongMapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::mapped_type const &":
        return _cstl.MapIntMapLongMapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongMapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongMapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongMapLongDouble_swiginit(self, _cstl.new_MapIntMapLongMapLongDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongMapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapIntMapLongMapLongDouble_size(self)

    def swap(self, v: "MapIntMapLongMapLongDouble") -> "void":
        return _cstl.MapIntMapLongMapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapIntMapLongMapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapIntMapLongMapLongDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongMapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::allocator_type":
        return _cstl.MapIntMapLongMapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapIntMapLongMapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongMapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapIntMapLongMapLongDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongMapLongDouble

# Register MapIntMapLongMapLongDouble in _cstl:
_cstl.MapIntMapLongMapLongDouble_swigregister(MapIntMapLongMapLongDouble)

class MapIntMapLongMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongMapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapIntMapLongMapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::mapped_type const &":
        return _cstl.MapIntMapLongMapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongMapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongMapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongMapLongBool_swiginit(self, _cstl.new_MapIntMapLongMapLongBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongMapLongBool_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapIntMapLongMapLongBool_size(self)

    def swap(self, v: "MapIntMapLongMapLongBool") -> "void":
        return _cstl.MapIntMapLongMapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapIntMapLongMapLongBool_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapIntMapLongMapLongBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongMapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::allocator_type":
        return _cstl.MapIntMapLongMapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapIntMapLongMapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongMapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapIntMapLongMapLongBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongMapLongBool

# Register MapIntMapLongMapLongBool in _cstl:
_cstl.MapIntMapLongMapLongBool_swigregister(MapIntMapLongMapLongBool)

class MapIntMapLongMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapIntMapLongMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapIntMapLongMapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapIntMapLongMapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::mapped_type const &":
        return _cstl.MapIntMapLongMapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapIntMapLongMapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapIntMapLongMapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapIntMapLongMapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapIntMapLongMapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapIntMapLongMapLongLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapIntMapLongMapLongLong_swiginit(self, _cstl.new_MapIntMapLongMapLongLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapIntMapLongMapLongLong_empty(self)

    def size(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapIntMapLongMapLongLong_size(self)

    def swap(self, v: "MapIntMapLongMapLongLong") -> "void":
        return _cstl.MapIntMapLongMapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapIntMapLongMapLongLong_begin(self)

    def end(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapIntMapLongMapLongLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapIntMapLongMapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::allocator_type":
        return _cstl.MapIntMapLongMapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapIntMapLongMapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapIntMapLongMapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< int,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapIntMapLongMapLongLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapIntMapLongMapLongLong

# Register MapIntMapLongMapLongLong in _cstl:
_cstl.MapIntMapLongMapLongLong_swigregister(MapIntMapLongMapLongLong)

class MapStrVecVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecVecInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::vector< int > > >::size_type":
        return _cstl.MapStrVecVecInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::vector< int > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::vector< int > > >::mapped_type const &":
        return _cstl.MapStrVecVecInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::vector< int > > >::key_type const &") -> "void":
        return _cstl.MapStrVecVecInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecVecInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecVecInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecVecInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecVecInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecVecInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecVecInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecVecInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecVecInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecVecInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecVecInt_swiginit(self, _cstl.new_MapStrVecVecInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecVecInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::vector< int > > >::size_type":
        return _cstl.MapStrVecVecInt_size(self)

    def swap(self, v: "MapStrVecVecInt") -> "void":
        return _cstl.MapStrVecVecInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::vector< int > > >::iterator":
        return _cstl.MapStrVecVecInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::vector< int > > >::iterator":
        return _cstl.MapStrVecVecInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecVecInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::vector< int > > >::allocator_type":
        return _cstl.MapStrVecVecInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::vector< int > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::vector< int > > >::size_type":
        return _cstl.MapStrVecVecInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecVecInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::vector< int > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::vector< int > > >::iterator":
        return _cstl.MapStrVecVecInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecVecInt

# Register MapStrVecVecInt in _cstl:
_cstl.MapStrVecVecInt_swigregister(MapStrVecVecInt)

class MapStrVecVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecVecStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::vector< std::string > > >::size_type":
        return _cstl.MapStrVecVecStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::vector< std::string > > >::mapped_type const &":
        return _cstl.MapStrVecVecStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::vector< std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrVecVecStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecVecStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecVecStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecVecStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecVecStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecVecStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecVecStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecVecStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecVecStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecVecStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecVecStr_swiginit(self, _cstl.new_MapStrVecVecStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecVecStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::vector< std::string > > >::size_type":
        return _cstl.MapStrVecVecStr_size(self)

    def swap(self, v: "MapStrVecVecStr") -> "void":
        return _cstl.MapStrVecVecStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::vector< std::string > > >::iterator":
        return _cstl.MapStrVecVecStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::vector< std::string > > >::iterator":
        return _cstl.MapStrVecVecStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecVecStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::vector< std::string > > >::allocator_type":
        return _cstl.MapStrVecVecStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::vector< std::string > > >::size_type":
        return _cstl.MapStrVecVecStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecVecStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::vector< std::string > > >::iterator":
        return _cstl.MapStrVecVecStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecVecStr

# Register MapStrVecVecStr in _cstl:
_cstl.MapStrVecVecStr_swigregister(MapStrVecVecStr)

class MapStrVecVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecVecFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::vector< float > > >::size_type":
        return _cstl.MapStrVecVecFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::vector< float > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::vector< float > > >::mapped_type const &":
        return _cstl.MapStrVecVecFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::vector< float > > >::key_type const &") -> "void":
        return _cstl.MapStrVecVecFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecVecFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecVecFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecVecFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecVecFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecVecFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecVecFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecVecFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecVecFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecVecFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecVecFloat_swiginit(self, _cstl.new_MapStrVecVecFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecVecFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::vector< float > > >::size_type":
        return _cstl.MapStrVecVecFloat_size(self)

    def swap(self, v: "MapStrVecVecFloat") -> "void":
        return _cstl.MapStrVecVecFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::vector< float > > >::iterator":
        return _cstl.MapStrVecVecFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::vector< float > > >::iterator":
        return _cstl.MapStrVecVecFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecVecFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::vector< float > > >::allocator_type":
        return _cstl.MapStrVecVecFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::vector< float > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::vector< float > > >::size_type":
        return _cstl.MapStrVecVecFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecVecFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::vector< float > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::vector< float > > >::iterator":
        return _cstl.MapStrVecVecFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecVecFloat

# Register MapStrVecVecFloat in _cstl:
_cstl.MapStrVecVecFloat_swigregister(MapStrVecVecFloat)

class MapStrVecVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecVecDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::vector< double > > >::size_type":
        return _cstl.MapStrVecVecDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::vector< double > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::vector< double > > >::mapped_type const &":
        return _cstl.MapStrVecVecDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::vector< double > > >::key_type const &") -> "void":
        return _cstl.MapStrVecVecDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecVecDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecVecDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecVecDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecVecDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecVecDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecVecDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecVecDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecVecDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecVecDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecVecDouble_swiginit(self, _cstl.new_MapStrVecVecDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecVecDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::vector< double > > >::size_type":
        return _cstl.MapStrVecVecDouble_size(self)

    def swap(self, v: "MapStrVecVecDouble") -> "void":
        return _cstl.MapStrVecVecDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::vector< double > > >::iterator":
        return _cstl.MapStrVecVecDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::vector< double > > >::iterator":
        return _cstl.MapStrVecVecDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecVecDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::vector< double > > >::allocator_type":
        return _cstl.MapStrVecVecDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::vector< double > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::vector< double > > >::size_type":
        return _cstl.MapStrVecVecDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecVecDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::vector< double > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::vector< double > > >::iterator":
        return _cstl.MapStrVecVecDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecVecDouble

# Register MapStrVecVecDouble in _cstl:
_cstl.MapStrVecVecDouble_swigregister(MapStrVecVecDouble)

class MapStrVecVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecVecBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::vector< bool > > >::size_type":
        return _cstl.MapStrVecVecBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::vector< bool > > >::mapped_type const &":
        return _cstl.MapStrVecVecBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::vector< bool > > >::key_type const &") -> "void":
        return _cstl.MapStrVecVecBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecVecBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecVecBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecVecBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecVecBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecVecBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecVecBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecVecBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecVecBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecVecBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecVecBool_swiginit(self, _cstl.new_MapStrVecVecBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecVecBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::vector< bool > > >::size_type":
        return _cstl.MapStrVecVecBool_size(self)

    def swap(self, v: "MapStrVecVecBool") -> "void":
        return _cstl.MapStrVecVecBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::vector< bool > > >::iterator":
        return _cstl.MapStrVecVecBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::vector< bool > > >::iterator":
        return _cstl.MapStrVecVecBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecVecBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::vector< bool > > >::allocator_type":
        return _cstl.MapStrVecVecBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::vector< bool > > >::size_type":
        return _cstl.MapStrVecVecBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecVecBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::vector< bool > > >::iterator":
        return _cstl.MapStrVecVecBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecVecBool

# Register MapStrVecVecBool in _cstl:
_cstl.MapStrVecVecBool_swigregister(MapStrVecVecBool)

class MapStrVecVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecVecLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::vector< std::int64_t > > >::size_type":
        return _cstl.MapStrVecVecLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::vector< std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrVecVecLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::vector< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrVecVecLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecVecLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecVecLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecVecLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecVecLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecVecLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecVecLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecVecLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecVecLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecVecLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecVecLong_swiginit(self, _cstl.new_MapStrVecVecLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecVecLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::vector< std::int64_t > > >::size_type":
        return _cstl.MapStrVecVecLong_size(self)

    def swap(self, v: "MapStrVecVecLong") -> "void":
        return _cstl.MapStrVecVecLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::vector< std::int64_t > > >::iterator":
        return _cstl.MapStrVecVecLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::vector< std::int64_t > > >::iterator":
        return _cstl.MapStrVecVecLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecVecLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::vector< std::int64_t > > >::allocator_type":
        return _cstl.MapStrVecVecLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::vector< std::int64_t > > >::size_type":
        return _cstl.MapStrVecVecLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecVecLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::vector< std::int64_t > > >::iterator":
        return _cstl.MapStrVecVecLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecVecLong

# Register MapStrVecVecLong in _cstl:
_cstl.MapStrVecVecLong_swigregister(MapStrVecVecLong)

class MapStrVecSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecSetInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_set< int > > >::size_type":
        return _cstl.MapStrVecSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_set< int > > >::mapped_type const &":
        return _cstl.MapStrVecSetInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_set< int > > >::key_type const &") -> "void":
        return _cstl.MapStrVecSetInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecSetInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecSetInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecSetInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecSetInt_swiginit(self, _cstl.new_MapStrVecSetInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecSetInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_set< int > > >::size_type":
        return _cstl.MapStrVecSetInt_size(self)

    def swap(self, v: "MapStrVecSetInt") -> "void":
        return _cstl.MapStrVecSetInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_set< int > > >::iterator":
        return _cstl.MapStrVecSetInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_set< int > > >::iterator":
        return _cstl.MapStrVecSetInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecSetInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_set< int > > >::allocator_type":
        return _cstl.MapStrVecSetInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_set< int > > >::size_type":
        return _cstl.MapStrVecSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecSetInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_set< int > > >::iterator":
        return _cstl.MapStrVecSetInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecSetInt

# Register MapStrVecSetInt in _cstl:
_cstl.MapStrVecSetInt_swigregister(MapStrVecSetInt)

class MapStrVecSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecSetStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_set< std::string > > >::size_type":
        return _cstl.MapStrVecSetStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_set< std::string > > >::mapped_type const &":
        return _cstl.MapStrVecSetStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_set< std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrVecSetStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecSetStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecSetStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecSetStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecSetStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecSetStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecSetStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecSetStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecSetStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecSetStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecSetStr_swiginit(self, _cstl.new_MapStrVecSetStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecSetStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_set< std::string > > >::size_type":
        return _cstl.MapStrVecSetStr_size(self)

    def swap(self, v: "MapStrVecSetStr") -> "void":
        return _cstl.MapStrVecSetStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_set< std::string > > >::iterator":
        return _cstl.MapStrVecSetStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_set< std::string > > >::iterator":
        return _cstl.MapStrVecSetStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecSetStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_set< std::string > > >::allocator_type":
        return _cstl.MapStrVecSetStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_set< std::string > > >::size_type":
        return _cstl.MapStrVecSetStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecSetStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_set< std::string > > >::iterator":
        return _cstl.MapStrVecSetStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecSetStr

# Register MapStrVecSetStr in _cstl:
_cstl.MapStrVecSetStr_swigregister(MapStrVecSetStr)

class MapStrVecSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecSetLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapStrVecSetLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_set< std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrVecSetLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_set< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrVecSetLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecSetLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecSetLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecSetLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecSetLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecSetLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecSetLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecSetLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecSetLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecSetLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecSetLong_swiginit(self, _cstl.new_MapStrVecSetLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecSetLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapStrVecSetLong_size(self)

    def swap(self, v: "MapStrVecSetLong") -> "void":
        return _cstl.MapStrVecSetLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapStrVecSetLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapStrVecSetLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecSetLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_set< std::int64_t > > >::allocator_type":
        return _cstl.MapStrVecSetLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapStrVecSetLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecSetLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapStrVecSetLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecSetLong

# Register MapStrVecSetLong in _cstl:
_cstl.MapStrVecSetLong_swigregister(MapStrVecSetLong)

class MapStrVecMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecMapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,int > > >::size_type":
        return _cstl.MapStrVecMapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,int > > >::mapped_type const &":
        return _cstl.MapStrVecMapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,int > > >::key_type const &") -> "void":
        return _cstl.MapStrVecMapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecMapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecMapIntInt_swiginit(self, _cstl.new_MapStrVecMapIntInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecMapIntInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,int > > >::size_type":
        return _cstl.MapStrVecMapIntInt_size(self)

    def swap(self, v: "MapStrVecMapIntInt") -> "void":
        return _cstl.MapStrVecMapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,int > > >::iterator":
        return _cstl.MapStrVecMapIntInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,int > > >::iterator":
        return _cstl.MapStrVecMapIntInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecMapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,int > > >::allocator_type":
        return _cstl.MapStrVecMapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,int > > >::size_type":
        return _cstl.MapStrVecMapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecMapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,int > > >::iterator":
        return _cstl.MapStrVecMapIntInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecMapIntInt

# Register MapStrVecMapIntInt in _cstl:
_cstl.MapStrVecMapIntInt_swigregister(MapStrVecMapIntInt)

class MapStrVecMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecMapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapStrVecMapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::string > > >::mapped_type const &":
        return _cstl.MapStrVecMapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrVecMapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecMapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecMapIntStr_swiginit(self, _cstl.new_MapStrVecMapIntStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecMapIntStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapStrVecMapIntStr_size(self)

    def swap(self, v: "MapStrVecMapIntStr") -> "void":
        return _cstl.MapStrVecMapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapStrVecMapIntStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapStrVecMapIntStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecMapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::string > > >::allocator_type":
        return _cstl.MapStrVecMapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapStrVecMapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecMapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapStrVecMapIntStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecMapIntStr

# Register MapStrVecMapIntStr in _cstl:
_cstl.MapStrVecMapIntStr_swigregister(MapStrVecMapIntStr)

class MapStrVecMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecMapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,float > > >::size_type":
        return _cstl.MapStrVecMapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,float > > >::mapped_type const &":
        return _cstl.MapStrVecMapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,float > > >::key_type const &") -> "void":
        return _cstl.MapStrVecMapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecMapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecMapIntFloat_swiginit(self, _cstl.new_MapStrVecMapIntFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecMapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,float > > >::size_type":
        return _cstl.MapStrVecMapIntFloat_size(self)

    def swap(self, v: "MapStrVecMapIntFloat") -> "void":
        return _cstl.MapStrVecMapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,float > > >::iterator":
        return _cstl.MapStrVecMapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,float > > >::iterator":
        return _cstl.MapStrVecMapIntFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecMapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,float > > >::allocator_type":
        return _cstl.MapStrVecMapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,float > > >::size_type":
        return _cstl.MapStrVecMapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecMapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,float > > >::iterator":
        return _cstl.MapStrVecMapIntFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecMapIntFloat

# Register MapStrVecMapIntFloat in _cstl:
_cstl.MapStrVecMapIntFloat_swigregister(MapStrVecMapIntFloat)

class MapStrVecMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecMapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,double > > >::size_type":
        return _cstl.MapStrVecMapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,double > > >::mapped_type const &":
        return _cstl.MapStrVecMapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,double > > >::key_type const &") -> "void":
        return _cstl.MapStrVecMapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecMapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecMapIntDouble_swiginit(self, _cstl.new_MapStrVecMapIntDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecMapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,double > > >::size_type":
        return _cstl.MapStrVecMapIntDouble_size(self)

    def swap(self, v: "MapStrVecMapIntDouble") -> "void":
        return _cstl.MapStrVecMapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,double > > >::iterator":
        return _cstl.MapStrVecMapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,double > > >::iterator":
        return _cstl.MapStrVecMapIntDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecMapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,double > > >::allocator_type":
        return _cstl.MapStrVecMapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,double > > >::size_type":
        return _cstl.MapStrVecMapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecMapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,double > > >::iterator":
        return _cstl.MapStrVecMapIntDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecMapIntDouble

# Register MapStrVecMapIntDouble in _cstl:
_cstl.MapStrVecMapIntDouble_swigregister(MapStrVecMapIntDouble)

class MapStrVecMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecMapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapStrVecMapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,bool > > >::mapped_type const &":
        return _cstl.MapStrVecMapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,bool > > >::key_type const &") -> "void":
        return _cstl.MapStrVecMapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecMapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecMapIntBool_swiginit(self, _cstl.new_MapStrVecMapIntBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecMapIntBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapStrVecMapIntBool_size(self)

    def swap(self, v: "MapStrVecMapIntBool") -> "void":
        return _cstl.MapStrVecMapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapStrVecMapIntBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapStrVecMapIntBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecMapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,bool > > >::allocator_type":
        return _cstl.MapStrVecMapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapStrVecMapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecMapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapStrVecMapIntBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecMapIntBool

# Register MapStrVecMapIntBool in _cstl:
_cstl.MapStrVecMapIntBool_swigregister(MapStrVecMapIntBool)

class MapStrVecMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecMapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapStrVecMapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrVecMapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrVecMapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecMapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecMapIntLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecMapIntLong_swiginit(self, _cstl.new_MapStrVecMapIntLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecMapIntLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapStrVecMapIntLong_size(self)

    def swap(self, v: "MapStrVecMapIntLong") -> "void":
        return _cstl.MapStrVecMapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapStrVecMapIntLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapStrVecMapIntLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecMapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::int64_t > > >::allocator_type":
        return _cstl.MapStrVecMapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapStrVecMapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecMapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapStrVecMapIntLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecMapIntLong

# Register MapStrVecMapIntLong in _cstl:
_cstl.MapStrVecMapIntLong_swigregister(MapStrVecMapIntLong)

class MapStrVecMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecMapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapStrVecMapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,int > > >::mapped_type const &":
        return _cstl.MapStrVecMapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,int > > >::key_type const &") -> "void":
        return _cstl.MapStrVecMapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecMapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecMapStrInt_swiginit(self, _cstl.new_MapStrVecMapStrInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecMapStrInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapStrVecMapStrInt_size(self)

    def swap(self, v: "MapStrVecMapStrInt") -> "void":
        return _cstl.MapStrVecMapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapStrVecMapStrInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapStrVecMapStrInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecMapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,int > > >::allocator_type":
        return _cstl.MapStrVecMapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapStrVecMapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecMapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapStrVecMapStrInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecMapStrInt

# Register MapStrVecMapStrInt in _cstl:
_cstl.MapStrVecMapStrInt_swigregister(MapStrVecMapStrInt)

class MapStrVecMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecMapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapStrVecMapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::string > > >::mapped_type const &":
        return _cstl.MapStrVecMapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrVecMapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecMapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecMapStrStr_swiginit(self, _cstl.new_MapStrVecMapStrStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecMapStrStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapStrVecMapStrStr_size(self)

    def swap(self, v: "MapStrVecMapStrStr") -> "void":
        return _cstl.MapStrVecMapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapStrVecMapStrStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapStrVecMapStrStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecMapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::string > > >::allocator_type":
        return _cstl.MapStrVecMapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapStrVecMapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecMapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapStrVecMapStrStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecMapStrStr

# Register MapStrVecMapStrStr in _cstl:
_cstl.MapStrVecMapStrStr_swigregister(MapStrVecMapStrStr)

class MapStrVecMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecMapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapStrVecMapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,float > > >::mapped_type const &":
        return _cstl.MapStrVecMapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,float > > >::key_type const &") -> "void":
        return _cstl.MapStrVecMapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecMapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecMapStrFloat_swiginit(self, _cstl.new_MapStrVecMapStrFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecMapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapStrVecMapStrFloat_size(self)

    def swap(self, v: "MapStrVecMapStrFloat") -> "void":
        return _cstl.MapStrVecMapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapStrVecMapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapStrVecMapStrFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecMapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,float > > >::allocator_type":
        return _cstl.MapStrVecMapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapStrVecMapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecMapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapStrVecMapStrFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecMapStrFloat

# Register MapStrVecMapStrFloat in _cstl:
_cstl.MapStrVecMapStrFloat_swigregister(MapStrVecMapStrFloat)

class MapStrVecMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecMapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapStrVecMapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,double > > >::mapped_type const &":
        return _cstl.MapStrVecMapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,double > > >::key_type const &") -> "void":
        return _cstl.MapStrVecMapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecMapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecMapStrDouble_swiginit(self, _cstl.new_MapStrVecMapStrDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecMapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapStrVecMapStrDouble_size(self)

    def swap(self, v: "MapStrVecMapStrDouble") -> "void":
        return _cstl.MapStrVecMapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapStrVecMapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapStrVecMapStrDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecMapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,double > > >::allocator_type":
        return _cstl.MapStrVecMapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapStrVecMapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecMapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapStrVecMapStrDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecMapStrDouble

# Register MapStrVecMapStrDouble in _cstl:
_cstl.MapStrVecMapStrDouble_swigregister(MapStrVecMapStrDouble)

class MapStrVecMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecMapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapStrVecMapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,bool > > >::mapped_type const &":
        return _cstl.MapStrVecMapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,bool > > >::key_type const &") -> "void":
        return _cstl.MapStrVecMapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecMapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecMapStrBool_swiginit(self, _cstl.new_MapStrVecMapStrBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecMapStrBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapStrVecMapStrBool_size(self)

    def swap(self, v: "MapStrVecMapStrBool") -> "void":
        return _cstl.MapStrVecMapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapStrVecMapStrBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapStrVecMapStrBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecMapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,bool > > >::allocator_type":
        return _cstl.MapStrVecMapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapStrVecMapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecMapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapStrVecMapStrBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecMapStrBool

# Register MapStrVecMapStrBool in _cstl:
_cstl.MapStrVecMapStrBool_swigregister(MapStrVecMapStrBool)

class MapStrVecMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecMapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapStrVecMapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrVecMapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrVecMapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecMapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecMapStrLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecMapStrLong_swiginit(self, _cstl.new_MapStrVecMapStrLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecMapStrLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapStrVecMapStrLong_size(self)

    def swap(self, v: "MapStrVecMapStrLong") -> "void":
        return _cstl.MapStrVecMapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapStrVecMapStrLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapStrVecMapStrLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecMapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::int64_t > > >::allocator_type":
        return _cstl.MapStrVecMapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapStrVecMapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecMapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapStrVecMapStrLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecMapStrLong

# Register MapStrVecMapStrLong in _cstl:
_cstl.MapStrVecMapStrLong_swigregister(MapStrVecMapStrLong)

class MapStrVecMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecMapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapStrVecMapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,int > > >::mapped_type const &":
        return _cstl.MapStrVecMapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,int > > >::key_type const &") -> "void":
        return _cstl.MapStrVecMapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecMapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecMapLongInt_swiginit(self, _cstl.new_MapStrVecMapLongInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecMapLongInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapStrVecMapLongInt_size(self)

    def swap(self, v: "MapStrVecMapLongInt") -> "void":
        return _cstl.MapStrVecMapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapStrVecMapLongInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapStrVecMapLongInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecMapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,int > > >::allocator_type":
        return _cstl.MapStrVecMapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapStrVecMapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecMapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapStrVecMapLongInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecMapLongInt

# Register MapStrVecMapLongInt in _cstl:
_cstl.MapStrVecMapLongInt_swigregister(MapStrVecMapLongInt)

class MapStrVecMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecMapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapStrVecMapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::string > > >::mapped_type const &":
        return _cstl.MapStrVecMapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrVecMapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecMapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecMapLongStr_swiginit(self, _cstl.new_MapStrVecMapLongStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecMapLongStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapStrVecMapLongStr_size(self)

    def swap(self, v: "MapStrVecMapLongStr") -> "void":
        return _cstl.MapStrVecMapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapStrVecMapLongStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapStrVecMapLongStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecMapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::string > > >::allocator_type":
        return _cstl.MapStrVecMapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapStrVecMapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecMapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapStrVecMapLongStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecMapLongStr

# Register MapStrVecMapLongStr in _cstl:
_cstl.MapStrVecMapLongStr_swigregister(MapStrVecMapLongStr)

class MapStrVecMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecMapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapStrVecMapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,float > > >::mapped_type const &":
        return _cstl.MapStrVecMapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,float > > >::key_type const &") -> "void":
        return _cstl.MapStrVecMapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecMapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecMapLongFloat_swiginit(self, _cstl.new_MapStrVecMapLongFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecMapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapStrVecMapLongFloat_size(self)

    def swap(self, v: "MapStrVecMapLongFloat") -> "void":
        return _cstl.MapStrVecMapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapStrVecMapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapStrVecMapLongFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecMapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,float > > >::allocator_type":
        return _cstl.MapStrVecMapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapStrVecMapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecMapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapStrVecMapLongFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecMapLongFloat

# Register MapStrVecMapLongFloat in _cstl:
_cstl.MapStrVecMapLongFloat_swigregister(MapStrVecMapLongFloat)

class MapStrVecMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecMapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapStrVecMapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,double > > >::mapped_type const &":
        return _cstl.MapStrVecMapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,double > > >::key_type const &") -> "void":
        return _cstl.MapStrVecMapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecMapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecMapLongDouble_swiginit(self, _cstl.new_MapStrVecMapLongDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecMapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapStrVecMapLongDouble_size(self)

    def swap(self, v: "MapStrVecMapLongDouble") -> "void":
        return _cstl.MapStrVecMapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapStrVecMapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapStrVecMapLongDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecMapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,double > > >::allocator_type":
        return _cstl.MapStrVecMapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapStrVecMapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecMapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapStrVecMapLongDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecMapLongDouble

# Register MapStrVecMapLongDouble in _cstl:
_cstl.MapStrVecMapLongDouble_swigregister(MapStrVecMapLongDouble)

class MapStrVecMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecMapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapStrVecMapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,bool > > >::mapped_type const &":
        return _cstl.MapStrVecMapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "void":
        return _cstl.MapStrVecMapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecMapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecMapLongBool_swiginit(self, _cstl.new_MapStrVecMapLongBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecMapLongBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapStrVecMapLongBool_size(self)

    def swap(self, v: "MapStrVecMapLongBool") -> "void":
        return _cstl.MapStrVecMapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapStrVecMapLongBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapStrVecMapLongBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecMapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,bool > > >::allocator_type":
        return _cstl.MapStrVecMapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapStrVecMapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecMapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapStrVecMapLongBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecMapLongBool

# Register MapStrVecMapLongBool in _cstl:
_cstl.MapStrVecMapLongBool_swigregister(MapStrVecMapLongBool)

class MapStrVecMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrVecMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrVecMapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapStrVecMapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrVecMapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrVecMapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrVecMapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrVecMapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrVecMapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrVecMapLongLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrVecMapLongLong_swiginit(self, _cstl.new_MapStrVecMapLongLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrVecMapLongLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapStrVecMapLongLong_size(self)

    def swap(self, v: "MapStrVecMapLongLong") -> "void":
        return _cstl.MapStrVecMapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapStrVecMapLongLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapStrVecMapLongLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrVecMapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::allocator_type":
        return _cstl.MapStrVecMapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapStrVecMapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrVecMapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapStrVecMapLongLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrVecMapLongLong

# Register MapStrVecMapLongLong in _cstl:
_cstl.MapStrVecMapLongLong_swigregister(MapStrVecMapLongLong)

class MapStrMapIntVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntVecInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< int > > >::size_type":
        return _cstl.MapStrMapIntVecInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< int > > >::mapped_type const &":
        return _cstl.MapStrMapIntVecInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< int > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntVecInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntVecInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntVecInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntVecInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntVecInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntVecInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntVecInt_swiginit(self, _cstl.new_MapStrMapIntVecInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntVecInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< int > > >::size_type":
        return _cstl.MapStrMapIntVecInt_size(self)

    def swap(self, v: "MapStrMapIntVecInt") -> "void":
        return _cstl.MapStrMapIntVecInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< int > > >::iterator":
        return _cstl.MapStrMapIntVecInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< int > > >::iterator":
        return _cstl.MapStrMapIntVecInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntVecInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< int > > >::allocator_type":
        return _cstl.MapStrMapIntVecInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::vector< int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< int > > >::size_type":
        return _cstl.MapStrMapIntVecInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntVecInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::vector< int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< int > > >::iterator":
        return _cstl.MapStrMapIntVecInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntVecInt

# Register MapStrMapIntVecInt in _cstl:
_cstl.MapStrMapIntVecInt_swigregister(MapStrMapIntVecInt)

class MapStrMapIntVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntVecStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::string > > >::size_type":
        return _cstl.MapStrMapIntVecStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::string > > >::mapped_type const &":
        return _cstl.MapStrMapIntVecStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntVecStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntVecStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntVecStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntVecStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntVecStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntVecStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntVecStr_swiginit(self, _cstl.new_MapStrMapIntVecStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntVecStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::string > > >::size_type":
        return _cstl.MapStrMapIntVecStr_size(self)

    def swap(self, v: "MapStrMapIntVecStr") -> "void":
        return _cstl.MapStrMapIntVecStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::string > > >::iterator":
        return _cstl.MapStrMapIntVecStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::string > > >::iterator":
        return _cstl.MapStrMapIntVecStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntVecStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::string > > >::allocator_type":
        return _cstl.MapStrMapIntVecStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::string > > >::size_type":
        return _cstl.MapStrMapIntVecStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntVecStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::string > > >::iterator":
        return _cstl.MapStrMapIntVecStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntVecStr

# Register MapStrMapIntVecStr in _cstl:
_cstl.MapStrMapIntVecStr_swigregister(MapStrMapIntVecStr)

class MapStrMapIntVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntVecFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< float > > >::size_type":
        return _cstl.MapStrMapIntVecFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< float > > >::mapped_type const &":
        return _cstl.MapStrMapIntVecFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< float > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntVecFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntVecFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntVecFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntVecFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntVecFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntVecFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntVecFloat_swiginit(self, _cstl.new_MapStrMapIntVecFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntVecFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< float > > >::size_type":
        return _cstl.MapStrMapIntVecFloat_size(self)

    def swap(self, v: "MapStrMapIntVecFloat") -> "void":
        return _cstl.MapStrMapIntVecFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< float > > >::iterator":
        return _cstl.MapStrMapIntVecFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< float > > >::iterator":
        return _cstl.MapStrMapIntVecFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntVecFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< float > > >::allocator_type":
        return _cstl.MapStrMapIntVecFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::vector< float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< float > > >::size_type":
        return _cstl.MapStrMapIntVecFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntVecFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::vector< float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< float > > >::iterator":
        return _cstl.MapStrMapIntVecFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntVecFloat

# Register MapStrMapIntVecFloat in _cstl:
_cstl.MapStrMapIntVecFloat_swigregister(MapStrMapIntVecFloat)

class MapStrMapIntVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntVecDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< double > > >::size_type":
        return _cstl.MapStrMapIntVecDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< double > > >::mapped_type const &":
        return _cstl.MapStrMapIntVecDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< double > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntVecDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntVecDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntVecDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntVecDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntVecDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntVecDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntVecDouble_swiginit(self, _cstl.new_MapStrMapIntVecDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntVecDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< double > > >::size_type":
        return _cstl.MapStrMapIntVecDouble_size(self)

    def swap(self, v: "MapStrMapIntVecDouble") -> "void":
        return _cstl.MapStrMapIntVecDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< double > > >::iterator":
        return _cstl.MapStrMapIntVecDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< double > > >::iterator":
        return _cstl.MapStrMapIntVecDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntVecDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< double > > >::allocator_type":
        return _cstl.MapStrMapIntVecDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::vector< double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< double > > >::size_type":
        return _cstl.MapStrMapIntVecDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntVecDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::vector< double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< double > > >::iterator":
        return _cstl.MapStrMapIntVecDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntVecDouble

# Register MapStrMapIntVecDouble in _cstl:
_cstl.MapStrMapIntVecDouble_swigregister(MapStrMapIntVecDouble)

class MapStrMapIntVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntVecBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< bool > > >::size_type":
        return _cstl.MapStrMapIntVecBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< bool > > >::mapped_type const &":
        return _cstl.MapStrMapIntVecBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< bool > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntVecBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntVecBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntVecBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntVecBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntVecBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntVecBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntVecBool_swiginit(self, _cstl.new_MapStrMapIntVecBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntVecBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< bool > > >::size_type":
        return _cstl.MapStrMapIntVecBool_size(self)

    def swap(self, v: "MapStrMapIntVecBool") -> "void":
        return _cstl.MapStrMapIntVecBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< bool > > >::iterator":
        return _cstl.MapStrMapIntVecBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< bool > > >::iterator":
        return _cstl.MapStrMapIntVecBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntVecBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< bool > > >::allocator_type":
        return _cstl.MapStrMapIntVecBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< bool > > >::size_type":
        return _cstl.MapStrMapIntVecBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntVecBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< bool > > >::iterator":
        return _cstl.MapStrMapIntVecBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntVecBool

# Register MapStrMapIntVecBool in _cstl:
_cstl.MapStrMapIntVecBool_swigregister(MapStrMapIntVecBool)

class MapStrMapIntVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntVecLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapStrMapIntVecLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrMapIntVecLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntVecLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntVecLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntVecLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntVecLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntVecLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntVecLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntVecLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntVecLong_swiginit(self, _cstl.new_MapStrMapIntVecLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntVecLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapStrMapIntVecLong_size(self)

    def swap(self, v: "MapStrMapIntVecLong") -> "void":
        return _cstl.MapStrMapIntVecLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapStrMapIntVecLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapStrMapIntVecLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntVecLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::int64_t > > >::allocator_type":
        return _cstl.MapStrMapIntVecLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapStrMapIntVecLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntVecLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapStrMapIntVecLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntVecLong

# Register MapStrMapIntVecLong in _cstl:
_cstl.MapStrMapIntVecLong_swigregister(MapStrMapIntVecLong)

class MapStrMapIntSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntSetInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< int > > >::size_type":
        return _cstl.MapStrMapIntSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< int > > >::mapped_type const &":
        return _cstl.MapStrMapIntSetInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< int > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntSetInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntSetInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntSetInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntSetInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntSetInt_swiginit(self, _cstl.new_MapStrMapIntSetInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntSetInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< int > > >::size_type":
        return _cstl.MapStrMapIntSetInt_size(self)

    def swap(self, v: "MapStrMapIntSetInt") -> "void":
        return _cstl.MapStrMapIntSetInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< int > > >::iterator":
        return _cstl.MapStrMapIntSetInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< int > > >::iterator":
        return _cstl.MapStrMapIntSetInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntSetInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< int > > >::allocator_type":
        return _cstl.MapStrMapIntSetInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< int > > >::size_type":
        return _cstl.MapStrMapIntSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntSetInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< int > > >::iterator":
        return _cstl.MapStrMapIntSetInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntSetInt

# Register MapStrMapIntSetInt in _cstl:
_cstl.MapStrMapIntSetInt_swigregister(MapStrMapIntSetInt)

class MapStrMapIntSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntSetStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapStrMapIntSetStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::string > > >::mapped_type const &":
        return _cstl.MapStrMapIntSetStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntSetStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntSetStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntSetStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntSetStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntSetStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntSetStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntSetStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntSetStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntSetStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntSetStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntSetStr_swiginit(self, _cstl.new_MapStrMapIntSetStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntSetStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapStrMapIntSetStr_size(self)

    def swap(self, v: "MapStrMapIntSetStr") -> "void":
        return _cstl.MapStrMapIntSetStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapStrMapIntSetStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapStrMapIntSetStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntSetStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::string > > >::allocator_type":
        return _cstl.MapStrMapIntSetStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapStrMapIntSetStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntSetStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapStrMapIntSetStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntSetStr

# Register MapStrMapIntSetStr in _cstl:
_cstl.MapStrMapIntSetStr_swigregister(MapStrMapIntSetStr)

class MapStrMapIntSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntSetLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapStrMapIntSetLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrMapIntSetLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntSetLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntSetLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntSetLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntSetLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntSetLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntSetLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntSetLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntSetLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntSetLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntSetLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntSetLong_swiginit(self, _cstl.new_MapStrMapIntSetLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntSetLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapStrMapIntSetLong_size(self)

    def swap(self, v: "MapStrMapIntSetLong") -> "void":
        return _cstl.MapStrMapIntSetLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapStrMapIntSetLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapStrMapIntSetLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntSetLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::int64_t > > >::allocator_type":
        return _cstl.MapStrMapIntSetLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapStrMapIntSetLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntSetLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapStrMapIntSetLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntSetLong

# Register MapStrMapIntSetLong in _cstl:
_cstl.MapStrMapIntSetLong_swigregister(MapStrMapIntSetLong)

class MapStrMapIntMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntMapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapStrMapIntMapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,int > > >::mapped_type const &":
        return _cstl.MapStrMapIntMapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,int > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntMapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntMapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntMapIntInt_swiginit(self, _cstl.new_MapStrMapIntMapIntInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntMapIntInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapStrMapIntMapIntInt_size(self)

    def swap(self, v: "MapStrMapIntMapIntInt") -> "void":
        return _cstl.MapStrMapIntMapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapStrMapIntMapIntInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapStrMapIntMapIntInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntMapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,int > > >::allocator_type":
        return _cstl.MapStrMapIntMapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapStrMapIntMapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntMapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapStrMapIntMapIntInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntMapIntInt

# Register MapStrMapIntMapIntInt in _cstl:
_cstl.MapStrMapIntMapIntInt_swigregister(MapStrMapIntMapIntInt)

class MapStrMapIntMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntMapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapStrMapIntMapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::string > > >::mapped_type const &":
        return _cstl.MapStrMapIntMapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntMapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntMapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntMapIntStr_swiginit(self, _cstl.new_MapStrMapIntMapIntStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntMapIntStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapStrMapIntMapIntStr_size(self)

    def swap(self, v: "MapStrMapIntMapIntStr") -> "void":
        return _cstl.MapStrMapIntMapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapStrMapIntMapIntStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapStrMapIntMapIntStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntMapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::string > > >::allocator_type":
        return _cstl.MapStrMapIntMapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapStrMapIntMapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntMapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapStrMapIntMapIntStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntMapIntStr

# Register MapStrMapIntMapIntStr in _cstl:
_cstl.MapStrMapIntMapIntStr_swigregister(MapStrMapIntMapIntStr)

class MapStrMapIntMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntMapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapStrMapIntMapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,float > > >::mapped_type const &":
        return _cstl.MapStrMapIntMapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,float > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntMapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntMapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntMapIntFloat_swiginit(self, _cstl.new_MapStrMapIntMapIntFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntMapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapStrMapIntMapIntFloat_size(self)

    def swap(self, v: "MapStrMapIntMapIntFloat") -> "void":
        return _cstl.MapStrMapIntMapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapStrMapIntMapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapStrMapIntMapIntFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntMapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,float > > >::allocator_type":
        return _cstl.MapStrMapIntMapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapStrMapIntMapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntMapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapStrMapIntMapIntFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntMapIntFloat

# Register MapStrMapIntMapIntFloat in _cstl:
_cstl.MapStrMapIntMapIntFloat_swigregister(MapStrMapIntMapIntFloat)

class MapStrMapIntMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntMapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapStrMapIntMapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,double > > >::mapped_type const &":
        return _cstl.MapStrMapIntMapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,double > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntMapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntMapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntMapIntDouble_swiginit(self, _cstl.new_MapStrMapIntMapIntDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntMapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapStrMapIntMapIntDouble_size(self)

    def swap(self, v: "MapStrMapIntMapIntDouble") -> "void":
        return _cstl.MapStrMapIntMapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapStrMapIntMapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapStrMapIntMapIntDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntMapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,double > > >::allocator_type":
        return _cstl.MapStrMapIntMapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapStrMapIntMapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntMapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapStrMapIntMapIntDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntMapIntDouble

# Register MapStrMapIntMapIntDouble in _cstl:
_cstl.MapStrMapIntMapIntDouble_swigregister(MapStrMapIntMapIntDouble)

class MapStrMapIntMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntMapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapStrMapIntMapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,bool > > >::mapped_type const &":
        return _cstl.MapStrMapIntMapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,bool > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntMapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntMapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntMapIntBool_swiginit(self, _cstl.new_MapStrMapIntMapIntBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntMapIntBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapStrMapIntMapIntBool_size(self)

    def swap(self, v: "MapStrMapIntMapIntBool") -> "void":
        return _cstl.MapStrMapIntMapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapStrMapIntMapIntBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapStrMapIntMapIntBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntMapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,bool > > >::allocator_type":
        return _cstl.MapStrMapIntMapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapStrMapIntMapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntMapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapStrMapIntMapIntBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntMapIntBool

# Register MapStrMapIntMapIntBool in _cstl:
_cstl.MapStrMapIntMapIntBool_swigregister(MapStrMapIntMapIntBool)

class MapStrMapIntMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntMapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapStrMapIntMapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrMapIntMapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntMapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntMapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapIntLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntMapIntLong_swiginit(self, _cstl.new_MapStrMapIntMapIntLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntMapIntLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapStrMapIntMapIntLong_size(self)

    def swap(self, v: "MapStrMapIntMapIntLong") -> "void":
        return _cstl.MapStrMapIntMapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapStrMapIntMapIntLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapStrMapIntMapIntLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntMapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::allocator_type":
        return _cstl.MapStrMapIntMapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapStrMapIntMapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntMapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapStrMapIntMapIntLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntMapIntLong

# Register MapStrMapIntMapIntLong in _cstl:
_cstl.MapStrMapIntMapIntLong_swigregister(MapStrMapIntMapIntLong)

class MapStrMapIntMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntMapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapStrMapIntMapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,int > > >::mapped_type const &":
        return _cstl.MapStrMapIntMapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,int > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntMapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntMapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntMapStrInt_swiginit(self, _cstl.new_MapStrMapIntMapStrInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntMapStrInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapStrMapIntMapStrInt_size(self)

    def swap(self, v: "MapStrMapIntMapStrInt") -> "void":
        return _cstl.MapStrMapIntMapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapStrMapIntMapStrInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapStrMapIntMapStrInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntMapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,int > > >::allocator_type":
        return _cstl.MapStrMapIntMapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapStrMapIntMapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntMapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapStrMapIntMapStrInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntMapStrInt

# Register MapStrMapIntMapStrInt in _cstl:
_cstl.MapStrMapIntMapStrInt_swigregister(MapStrMapIntMapStrInt)

class MapStrMapIntMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntMapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapStrMapIntMapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::mapped_type const &":
        return _cstl.MapStrMapIntMapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntMapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntMapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntMapStrStr_swiginit(self, _cstl.new_MapStrMapIntMapStrStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntMapStrStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapStrMapIntMapStrStr_size(self)

    def swap(self, v: "MapStrMapIntMapStrStr") -> "void":
        return _cstl.MapStrMapIntMapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapStrMapIntMapStrStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapStrMapIntMapStrStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntMapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::allocator_type":
        return _cstl.MapStrMapIntMapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapStrMapIntMapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntMapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapStrMapIntMapStrStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntMapStrStr

# Register MapStrMapIntMapStrStr in _cstl:
_cstl.MapStrMapIntMapStrStr_swigregister(MapStrMapIntMapStrStr)

class MapStrMapIntMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntMapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapStrMapIntMapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,float > > >::mapped_type const &":
        return _cstl.MapStrMapIntMapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,float > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntMapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntMapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntMapStrFloat_swiginit(self, _cstl.new_MapStrMapIntMapStrFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntMapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapStrMapIntMapStrFloat_size(self)

    def swap(self, v: "MapStrMapIntMapStrFloat") -> "void":
        return _cstl.MapStrMapIntMapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapStrMapIntMapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapStrMapIntMapStrFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntMapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,float > > >::allocator_type":
        return _cstl.MapStrMapIntMapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapStrMapIntMapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntMapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapStrMapIntMapStrFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntMapStrFloat

# Register MapStrMapIntMapStrFloat in _cstl:
_cstl.MapStrMapIntMapStrFloat_swigregister(MapStrMapIntMapStrFloat)

class MapStrMapIntMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntMapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapStrMapIntMapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,double > > >::mapped_type const &":
        return _cstl.MapStrMapIntMapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,double > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntMapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntMapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntMapStrDouble_swiginit(self, _cstl.new_MapStrMapIntMapStrDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntMapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapStrMapIntMapStrDouble_size(self)

    def swap(self, v: "MapStrMapIntMapStrDouble") -> "void":
        return _cstl.MapStrMapIntMapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapStrMapIntMapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapStrMapIntMapStrDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntMapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,double > > >::allocator_type":
        return _cstl.MapStrMapIntMapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapStrMapIntMapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntMapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapStrMapIntMapStrDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntMapStrDouble

# Register MapStrMapIntMapStrDouble in _cstl:
_cstl.MapStrMapIntMapStrDouble_swigregister(MapStrMapIntMapStrDouble)

class MapStrMapIntMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntMapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapStrMapIntMapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,bool > > >::mapped_type const &":
        return _cstl.MapStrMapIntMapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,bool > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntMapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntMapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntMapStrBool_swiginit(self, _cstl.new_MapStrMapIntMapStrBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntMapStrBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapStrMapIntMapStrBool_size(self)

    def swap(self, v: "MapStrMapIntMapStrBool") -> "void":
        return _cstl.MapStrMapIntMapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapStrMapIntMapStrBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapStrMapIntMapStrBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntMapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,bool > > >::allocator_type":
        return _cstl.MapStrMapIntMapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapStrMapIntMapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntMapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapStrMapIntMapStrBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntMapStrBool

# Register MapStrMapIntMapStrBool in _cstl:
_cstl.MapStrMapIntMapStrBool_swigregister(MapStrMapIntMapStrBool)

class MapStrMapIntMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntMapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapStrMapIntMapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrMapIntMapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntMapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntMapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapStrLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntMapStrLong_swiginit(self, _cstl.new_MapStrMapIntMapStrLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntMapStrLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapStrMapIntMapStrLong_size(self)

    def swap(self, v: "MapStrMapIntMapStrLong") -> "void":
        return _cstl.MapStrMapIntMapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapStrMapIntMapStrLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapStrMapIntMapStrLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntMapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::allocator_type":
        return _cstl.MapStrMapIntMapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapStrMapIntMapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntMapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapStrMapIntMapStrLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntMapStrLong

# Register MapStrMapIntMapStrLong in _cstl:
_cstl.MapStrMapIntMapStrLong_swigregister(MapStrMapIntMapStrLong)

class MapStrMapIntMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntMapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapStrMapIntMapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::mapped_type const &":
        return _cstl.MapStrMapIntMapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntMapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntMapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntMapLongInt_swiginit(self, _cstl.new_MapStrMapIntMapLongInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntMapLongInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapStrMapIntMapLongInt_size(self)

    def swap(self, v: "MapStrMapIntMapLongInt") -> "void":
        return _cstl.MapStrMapIntMapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapStrMapIntMapLongInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapStrMapIntMapLongInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntMapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::allocator_type":
        return _cstl.MapStrMapIntMapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapStrMapIntMapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntMapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapStrMapIntMapLongInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntMapLongInt

# Register MapStrMapIntMapLongInt in _cstl:
_cstl.MapStrMapIntMapLongInt_swigregister(MapStrMapIntMapLongInt)

class MapStrMapIntMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntMapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapStrMapIntMapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::mapped_type const &":
        return _cstl.MapStrMapIntMapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntMapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntMapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntMapLongStr_swiginit(self, _cstl.new_MapStrMapIntMapLongStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntMapLongStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapStrMapIntMapLongStr_size(self)

    def swap(self, v: "MapStrMapIntMapLongStr") -> "void":
        return _cstl.MapStrMapIntMapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapStrMapIntMapLongStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapStrMapIntMapLongStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntMapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::allocator_type":
        return _cstl.MapStrMapIntMapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapStrMapIntMapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntMapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapStrMapIntMapLongStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntMapLongStr

# Register MapStrMapIntMapLongStr in _cstl:
_cstl.MapStrMapIntMapLongStr_swigregister(MapStrMapIntMapLongStr)

class MapStrMapIntMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntMapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapStrMapIntMapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::mapped_type const &":
        return _cstl.MapStrMapIntMapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntMapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntMapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntMapLongFloat_swiginit(self, _cstl.new_MapStrMapIntMapLongFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntMapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapStrMapIntMapLongFloat_size(self)

    def swap(self, v: "MapStrMapIntMapLongFloat") -> "void":
        return _cstl.MapStrMapIntMapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapStrMapIntMapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapStrMapIntMapLongFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntMapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::allocator_type":
        return _cstl.MapStrMapIntMapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapStrMapIntMapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntMapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapStrMapIntMapLongFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntMapLongFloat

# Register MapStrMapIntMapLongFloat in _cstl:
_cstl.MapStrMapIntMapLongFloat_swigregister(MapStrMapIntMapLongFloat)

class MapStrMapIntMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntMapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapStrMapIntMapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::mapped_type const &":
        return _cstl.MapStrMapIntMapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntMapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntMapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntMapLongDouble_swiginit(self, _cstl.new_MapStrMapIntMapLongDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntMapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapStrMapIntMapLongDouble_size(self)

    def swap(self, v: "MapStrMapIntMapLongDouble") -> "void":
        return _cstl.MapStrMapIntMapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapStrMapIntMapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapStrMapIntMapLongDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntMapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::allocator_type":
        return _cstl.MapStrMapIntMapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapStrMapIntMapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntMapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapStrMapIntMapLongDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntMapLongDouble

# Register MapStrMapIntMapLongDouble in _cstl:
_cstl.MapStrMapIntMapLongDouble_swigregister(MapStrMapIntMapLongDouble)

class MapStrMapIntMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntMapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapStrMapIntMapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::mapped_type const &":
        return _cstl.MapStrMapIntMapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntMapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntMapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntMapLongBool_swiginit(self, _cstl.new_MapStrMapIntMapLongBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntMapLongBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapStrMapIntMapLongBool_size(self)

    def swap(self, v: "MapStrMapIntMapLongBool") -> "void":
        return _cstl.MapStrMapIntMapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapStrMapIntMapLongBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapStrMapIntMapLongBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntMapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::allocator_type":
        return _cstl.MapStrMapIntMapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapStrMapIntMapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntMapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapStrMapIntMapLongBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntMapLongBool

# Register MapStrMapIntMapLongBool in _cstl:
_cstl.MapStrMapIntMapLongBool_swigregister(MapStrMapIntMapLongBool)

class MapStrMapIntMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapIntMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapIntMapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapStrMapIntMapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrMapIntMapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrMapIntMapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapIntMapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapIntMapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapIntMapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapIntMapLongLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapIntMapLongLong_swiginit(self, _cstl.new_MapStrMapIntMapLongLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapIntMapLongLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapStrMapIntMapLongLong_size(self)

    def swap(self, v: "MapStrMapIntMapLongLong") -> "void":
        return _cstl.MapStrMapIntMapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapStrMapIntMapLongLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapStrMapIntMapLongLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapIntMapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::allocator_type":
        return _cstl.MapStrMapIntMapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapStrMapIntMapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapIntMapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapStrMapIntMapLongLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapIntMapLongLong

# Register MapStrMapIntMapLongLong in _cstl:
_cstl.MapStrMapIntMapLongLong_swigregister(MapStrMapIntMapLongLong)

class MapStrMapStrVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrVecInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< int > > >::size_type":
        return _cstl.MapStrMapStrVecInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< int > > >::mapped_type const &":
        return _cstl.MapStrMapStrVecInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< int > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrVecInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrVecInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrVecInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrVecInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrVecInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrVecInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrVecInt_swiginit(self, _cstl.new_MapStrMapStrVecInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrVecInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< int > > >::size_type":
        return _cstl.MapStrMapStrVecInt_size(self)

    def swap(self, v: "MapStrMapStrVecInt") -> "void":
        return _cstl.MapStrMapStrVecInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< int > > >::iterator":
        return _cstl.MapStrMapStrVecInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< int > > >::iterator":
        return _cstl.MapStrMapStrVecInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrVecInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< int > > >::allocator_type":
        return _cstl.MapStrMapStrVecInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< int > > >::size_type":
        return _cstl.MapStrMapStrVecInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrVecInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< int > > >::iterator":
        return _cstl.MapStrMapStrVecInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrVecInt

# Register MapStrMapStrVecInt in _cstl:
_cstl.MapStrMapStrVecInt_swigregister(MapStrMapStrVecInt)

class MapStrMapStrVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrVecStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::string > > >::size_type":
        return _cstl.MapStrMapStrVecStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::string > > >::mapped_type const &":
        return _cstl.MapStrMapStrVecStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrVecStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrVecStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrVecStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrVecStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrVecStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrVecStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrVecStr_swiginit(self, _cstl.new_MapStrMapStrVecStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrVecStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::string > > >::size_type":
        return _cstl.MapStrMapStrVecStr_size(self)

    def swap(self, v: "MapStrMapStrVecStr") -> "void":
        return _cstl.MapStrMapStrVecStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::string > > >::iterator":
        return _cstl.MapStrMapStrVecStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::string > > >::iterator":
        return _cstl.MapStrMapStrVecStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrVecStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::string > > >::allocator_type":
        return _cstl.MapStrMapStrVecStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::string > > >::size_type":
        return _cstl.MapStrMapStrVecStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrVecStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::string > > >::iterator":
        return _cstl.MapStrMapStrVecStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrVecStr

# Register MapStrMapStrVecStr in _cstl:
_cstl.MapStrMapStrVecStr_swigregister(MapStrMapStrVecStr)

class MapStrMapStrVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrVecFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< float > > >::size_type":
        return _cstl.MapStrMapStrVecFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< float > > >::mapped_type const &":
        return _cstl.MapStrMapStrVecFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< float > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrVecFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrVecFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrVecFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrVecFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrVecFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrVecFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrVecFloat_swiginit(self, _cstl.new_MapStrMapStrVecFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrVecFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< float > > >::size_type":
        return _cstl.MapStrMapStrVecFloat_size(self)

    def swap(self, v: "MapStrMapStrVecFloat") -> "void":
        return _cstl.MapStrMapStrVecFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< float > > >::iterator":
        return _cstl.MapStrMapStrVecFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< float > > >::iterator":
        return _cstl.MapStrMapStrVecFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrVecFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< float > > >::allocator_type":
        return _cstl.MapStrMapStrVecFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< float > > >::size_type":
        return _cstl.MapStrMapStrVecFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrVecFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< float > > >::iterator":
        return _cstl.MapStrMapStrVecFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrVecFloat

# Register MapStrMapStrVecFloat in _cstl:
_cstl.MapStrMapStrVecFloat_swigregister(MapStrMapStrVecFloat)

class MapStrMapStrVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrVecDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< double > > >::size_type":
        return _cstl.MapStrMapStrVecDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< double > > >::mapped_type const &":
        return _cstl.MapStrMapStrVecDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< double > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrVecDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrVecDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrVecDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrVecDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrVecDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrVecDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrVecDouble_swiginit(self, _cstl.new_MapStrMapStrVecDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrVecDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< double > > >::size_type":
        return _cstl.MapStrMapStrVecDouble_size(self)

    def swap(self, v: "MapStrMapStrVecDouble") -> "void":
        return _cstl.MapStrMapStrVecDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< double > > >::iterator":
        return _cstl.MapStrMapStrVecDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< double > > >::iterator":
        return _cstl.MapStrMapStrVecDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrVecDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< double > > >::allocator_type":
        return _cstl.MapStrMapStrVecDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< double > > >::size_type":
        return _cstl.MapStrMapStrVecDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrVecDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< double > > >::iterator":
        return _cstl.MapStrMapStrVecDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrVecDouble

# Register MapStrMapStrVecDouble in _cstl:
_cstl.MapStrMapStrVecDouble_swigregister(MapStrMapStrVecDouble)

class MapStrMapStrVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrVecBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< bool > > >::size_type":
        return _cstl.MapStrMapStrVecBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< bool > > >::mapped_type const &":
        return _cstl.MapStrMapStrVecBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< bool > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrVecBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrVecBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrVecBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrVecBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrVecBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrVecBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrVecBool_swiginit(self, _cstl.new_MapStrMapStrVecBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrVecBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< bool > > >::size_type":
        return _cstl.MapStrMapStrVecBool_size(self)

    def swap(self, v: "MapStrMapStrVecBool") -> "void":
        return _cstl.MapStrMapStrVecBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< bool > > >::iterator":
        return _cstl.MapStrMapStrVecBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< bool > > >::iterator":
        return _cstl.MapStrMapStrVecBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrVecBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< bool > > >::allocator_type":
        return _cstl.MapStrMapStrVecBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< bool > > >::size_type":
        return _cstl.MapStrMapStrVecBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrVecBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< bool > > >::iterator":
        return _cstl.MapStrMapStrVecBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrVecBool

# Register MapStrMapStrVecBool in _cstl:
_cstl.MapStrMapStrVecBool_swigregister(MapStrMapStrVecBool)

class MapStrMapStrVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrVecLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapStrMapStrVecLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrMapStrVecLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrVecLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrVecLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrVecLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrVecLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrVecLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrVecLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrVecLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrVecLong_swiginit(self, _cstl.new_MapStrMapStrVecLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrVecLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapStrMapStrVecLong_size(self)

    def swap(self, v: "MapStrMapStrVecLong") -> "void":
        return _cstl.MapStrMapStrVecLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapStrMapStrVecLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapStrMapStrVecLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrVecLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::int64_t > > >::allocator_type":
        return _cstl.MapStrMapStrVecLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapStrMapStrVecLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrVecLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapStrMapStrVecLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrVecLong

# Register MapStrMapStrVecLong in _cstl:
_cstl.MapStrMapStrVecLong_swigregister(MapStrMapStrVecLong)

class MapStrMapStrSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrSetInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< int > > >::size_type":
        return _cstl.MapStrMapStrSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< int > > >::mapped_type const &":
        return _cstl.MapStrMapStrSetInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< int > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrSetInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrSetInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrSetInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrSetInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrSetInt_swiginit(self, _cstl.new_MapStrMapStrSetInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrSetInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< int > > >::size_type":
        return _cstl.MapStrMapStrSetInt_size(self)

    def swap(self, v: "MapStrMapStrSetInt") -> "void":
        return _cstl.MapStrMapStrSetInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< int > > >::iterator":
        return _cstl.MapStrMapStrSetInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< int > > >::iterator":
        return _cstl.MapStrMapStrSetInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrSetInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< int > > >::allocator_type":
        return _cstl.MapStrMapStrSetInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< int > > >::size_type":
        return _cstl.MapStrMapStrSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrSetInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< int > > >::iterator":
        return _cstl.MapStrMapStrSetInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrSetInt

# Register MapStrMapStrSetInt in _cstl:
_cstl.MapStrMapStrSetInt_swigregister(MapStrMapStrSetInt)

class MapStrMapStrSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrSetStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapStrMapStrSetStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::string > > >::mapped_type const &":
        return _cstl.MapStrMapStrSetStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrSetStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrSetStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrSetStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrSetStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrSetStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrSetStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrSetStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrSetStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrSetStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrSetStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrSetStr_swiginit(self, _cstl.new_MapStrMapStrSetStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrSetStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapStrMapStrSetStr_size(self)

    def swap(self, v: "MapStrMapStrSetStr") -> "void":
        return _cstl.MapStrMapStrSetStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapStrMapStrSetStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapStrMapStrSetStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrSetStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::string > > >::allocator_type":
        return _cstl.MapStrMapStrSetStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapStrMapStrSetStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrSetStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapStrMapStrSetStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrSetStr

# Register MapStrMapStrSetStr in _cstl:
_cstl.MapStrMapStrSetStr_swigregister(MapStrMapStrSetStr)

class MapStrMapStrSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrSetLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapStrMapStrSetLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrMapStrSetLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrSetLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrSetLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrSetLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrSetLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrSetLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrSetLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrSetLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrSetLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrSetLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrSetLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrSetLong_swiginit(self, _cstl.new_MapStrMapStrSetLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrSetLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapStrMapStrSetLong_size(self)

    def swap(self, v: "MapStrMapStrSetLong") -> "void":
        return _cstl.MapStrMapStrSetLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapStrMapStrSetLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapStrMapStrSetLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrSetLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::allocator_type":
        return _cstl.MapStrMapStrSetLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapStrMapStrSetLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrSetLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapStrMapStrSetLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrSetLong

# Register MapStrMapStrSetLong in _cstl:
_cstl.MapStrMapStrSetLong_swigregister(MapStrMapStrSetLong)

class MapStrMapStrMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrMapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapStrMapStrMapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,int > > >::mapped_type const &":
        return _cstl.MapStrMapStrMapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,int > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrMapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrMapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrMapIntInt_swiginit(self, _cstl.new_MapStrMapStrMapIntInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrMapIntInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapStrMapStrMapIntInt_size(self)

    def swap(self, v: "MapStrMapStrMapIntInt") -> "void":
        return _cstl.MapStrMapStrMapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapStrMapStrMapIntInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapStrMapStrMapIntInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrMapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,int > > >::allocator_type":
        return _cstl.MapStrMapStrMapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapStrMapStrMapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrMapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapStrMapStrMapIntInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrMapIntInt

# Register MapStrMapStrMapIntInt in _cstl:
_cstl.MapStrMapStrMapIntInt_swigregister(MapStrMapStrMapIntInt)

class MapStrMapStrMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrMapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapStrMapStrMapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::mapped_type const &":
        return _cstl.MapStrMapStrMapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrMapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrMapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrMapIntStr_swiginit(self, _cstl.new_MapStrMapStrMapIntStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrMapIntStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapStrMapStrMapIntStr_size(self)

    def swap(self, v: "MapStrMapStrMapIntStr") -> "void":
        return _cstl.MapStrMapStrMapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapStrMapStrMapIntStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapStrMapStrMapIntStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrMapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::allocator_type":
        return _cstl.MapStrMapStrMapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapStrMapStrMapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrMapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapStrMapStrMapIntStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrMapIntStr

# Register MapStrMapStrMapIntStr in _cstl:
_cstl.MapStrMapStrMapIntStr_swigregister(MapStrMapStrMapIntStr)

class MapStrMapStrMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrMapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapStrMapStrMapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,float > > >::mapped_type const &":
        return _cstl.MapStrMapStrMapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,float > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrMapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrMapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrMapIntFloat_swiginit(self, _cstl.new_MapStrMapStrMapIntFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrMapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapStrMapStrMapIntFloat_size(self)

    def swap(self, v: "MapStrMapStrMapIntFloat") -> "void":
        return _cstl.MapStrMapStrMapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapStrMapStrMapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapStrMapStrMapIntFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrMapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,float > > >::allocator_type":
        return _cstl.MapStrMapStrMapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapStrMapStrMapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrMapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapStrMapStrMapIntFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrMapIntFloat

# Register MapStrMapStrMapIntFloat in _cstl:
_cstl.MapStrMapStrMapIntFloat_swigregister(MapStrMapStrMapIntFloat)

class MapStrMapStrMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrMapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapStrMapStrMapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,double > > >::mapped_type const &":
        return _cstl.MapStrMapStrMapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,double > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrMapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrMapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrMapIntDouble_swiginit(self, _cstl.new_MapStrMapStrMapIntDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrMapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapStrMapStrMapIntDouble_size(self)

    def swap(self, v: "MapStrMapStrMapIntDouble") -> "void":
        return _cstl.MapStrMapStrMapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapStrMapStrMapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapStrMapStrMapIntDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrMapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,double > > >::allocator_type":
        return _cstl.MapStrMapStrMapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapStrMapStrMapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrMapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapStrMapStrMapIntDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrMapIntDouble

# Register MapStrMapStrMapIntDouble in _cstl:
_cstl.MapStrMapStrMapIntDouble_swigregister(MapStrMapStrMapIntDouble)

class MapStrMapStrMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrMapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapStrMapStrMapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,bool > > >::mapped_type const &":
        return _cstl.MapStrMapStrMapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,bool > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrMapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrMapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrMapIntBool_swiginit(self, _cstl.new_MapStrMapStrMapIntBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrMapIntBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapStrMapStrMapIntBool_size(self)

    def swap(self, v: "MapStrMapStrMapIntBool") -> "void":
        return _cstl.MapStrMapStrMapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapStrMapStrMapIntBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapStrMapStrMapIntBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrMapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,bool > > >::allocator_type":
        return _cstl.MapStrMapStrMapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapStrMapStrMapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrMapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapStrMapStrMapIntBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrMapIntBool

# Register MapStrMapStrMapIntBool in _cstl:
_cstl.MapStrMapStrMapIntBool_swigregister(MapStrMapStrMapIntBool)

class MapStrMapStrMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrMapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapStrMapStrMapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrMapStrMapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrMapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrMapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapIntLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrMapIntLong_swiginit(self, _cstl.new_MapStrMapStrMapIntLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrMapIntLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapStrMapStrMapIntLong_size(self)

    def swap(self, v: "MapStrMapStrMapIntLong") -> "void":
        return _cstl.MapStrMapStrMapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapStrMapStrMapIntLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapStrMapStrMapIntLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrMapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::allocator_type":
        return _cstl.MapStrMapStrMapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapStrMapStrMapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrMapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapStrMapStrMapIntLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrMapIntLong

# Register MapStrMapStrMapIntLong in _cstl:
_cstl.MapStrMapStrMapIntLong_swigregister(MapStrMapStrMapIntLong)

class MapStrMapStrMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrMapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapStrMapStrMapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::mapped_type const &":
        return _cstl.MapStrMapStrMapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrMapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrMapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrMapStrInt_swiginit(self, _cstl.new_MapStrMapStrMapStrInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrMapStrInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapStrMapStrMapStrInt_size(self)

    def swap(self, v: "MapStrMapStrMapStrInt") -> "void":
        return _cstl.MapStrMapStrMapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapStrMapStrMapStrInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapStrMapStrMapStrInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrMapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::allocator_type":
        return _cstl.MapStrMapStrMapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapStrMapStrMapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrMapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapStrMapStrMapStrInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrMapStrInt

# Register MapStrMapStrMapStrInt in _cstl:
_cstl.MapStrMapStrMapStrInt_swigregister(MapStrMapStrMapStrInt)

class MapStrMapStrMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrMapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapStrMapStrMapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::mapped_type const &":
        return _cstl.MapStrMapStrMapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrMapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrMapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrMapStrStr_swiginit(self, _cstl.new_MapStrMapStrMapStrStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrMapStrStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapStrMapStrMapStrStr_size(self)

    def swap(self, v: "MapStrMapStrMapStrStr") -> "void":
        return _cstl.MapStrMapStrMapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapStrMapStrMapStrStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapStrMapStrMapStrStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrMapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::allocator_type":
        return _cstl.MapStrMapStrMapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapStrMapStrMapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrMapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapStrMapStrMapStrStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrMapStrStr

# Register MapStrMapStrMapStrStr in _cstl:
_cstl.MapStrMapStrMapStrStr_swigregister(MapStrMapStrMapStrStr)

class MapStrMapStrMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrMapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapStrMapStrMapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::mapped_type const &":
        return _cstl.MapStrMapStrMapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrMapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrMapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrMapStrFloat_swiginit(self, _cstl.new_MapStrMapStrMapStrFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrMapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapStrMapStrMapStrFloat_size(self)

    def swap(self, v: "MapStrMapStrMapStrFloat") -> "void":
        return _cstl.MapStrMapStrMapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapStrMapStrMapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapStrMapStrMapStrFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrMapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::allocator_type":
        return _cstl.MapStrMapStrMapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapStrMapStrMapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrMapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapStrMapStrMapStrFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrMapStrFloat

# Register MapStrMapStrMapStrFloat in _cstl:
_cstl.MapStrMapStrMapStrFloat_swigregister(MapStrMapStrMapStrFloat)

class MapStrMapStrMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrMapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapStrMapStrMapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::mapped_type const &":
        return _cstl.MapStrMapStrMapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrMapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrMapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrMapStrDouble_swiginit(self, _cstl.new_MapStrMapStrMapStrDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrMapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapStrMapStrMapStrDouble_size(self)

    def swap(self, v: "MapStrMapStrMapStrDouble") -> "void":
        return _cstl.MapStrMapStrMapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapStrMapStrMapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapStrMapStrMapStrDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrMapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::allocator_type":
        return _cstl.MapStrMapStrMapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapStrMapStrMapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrMapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapStrMapStrMapStrDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrMapStrDouble

# Register MapStrMapStrMapStrDouble in _cstl:
_cstl.MapStrMapStrMapStrDouble_swigregister(MapStrMapStrMapStrDouble)

class MapStrMapStrMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrMapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapStrMapStrMapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::mapped_type const &":
        return _cstl.MapStrMapStrMapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrMapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrMapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrMapStrBool_swiginit(self, _cstl.new_MapStrMapStrMapStrBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrMapStrBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapStrMapStrMapStrBool_size(self)

    def swap(self, v: "MapStrMapStrMapStrBool") -> "void":
        return _cstl.MapStrMapStrMapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapStrMapStrMapStrBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapStrMapStrMapStrBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrMapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::allocator_type":
        return _cstl.MapStrMapStrMapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapStrMapStrMapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrMapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapStrMapStrMapStrBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrMapStrBool

# Register MapStrMapStrMapStrBool in _cstl:
_cstl.MapStrMapStrMapStrBool_swigregister(MapStrMapStrMapStrBool)

class MapStrMapStrMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrMapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapStrMapStrMapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrMapStrMapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrMapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrMapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapStrLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrMapStrLong_swiginit(self, _cstl.new_MapStrMapStrMapStrLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrMapStrLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapStrMapStrMapStrLong_size(self)

    def swap(self, v: "MapStrMapStrMapStrLong") -> "void":
        return _cstl.MapStrMapStrMapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapStrMapStrMapStrLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapStrMapStrMapStrLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrMapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::allocator_type":
        return _cstl.MapStrMapStrMapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapStrMapStrMapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrMapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapStrMapStrMapStrLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrMapStrLong

# Register MapStrMapStrMapStrLong in _cstl:
_cstl.MapStrMapStrMapStrLong_swigregister(MapStrMapStrMapStrLong)

class MapStrMapStrMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrMapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapStrMapStrMapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::mapped_type const &":
        return _cstl.MapStrMapStrMapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrMapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrMapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrMapLongInt_swiginit(self, _cstl.new_MapStrMapStrMapLongInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrMapLongInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapStrMapStrMapLongInt_size(self)

    def swap(self, v: "MapStrMapStrMapLongInt") -> "void":
        return _cstl.MapStrMapStrMapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapStrMapStrMapLongInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapStrMapStrMapLongInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrMapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::allocator_type":
        return _cstl.MapStrMapStrMapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapStrMapStrMapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrMapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapStrMapStrMapLongInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrMapLongInt

# Register MapStrMapStrMapLongInt in _cstl:
_cstl.MapStrMapStrMapLongInt_swigregister(MapStrMapStrMapLongInt)

class MapStrMapStrMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrMapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapStrMapStrMapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::mapped_type const &":
        return _cstl.MapStrMapStrMapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrMapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrMapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrMapLongStr_swiginit(self, _cstl.new_MapStrMapStrMapLongStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrMapLongStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapStrMapStrMapLongStr_size(self)

    def swap(self, v: "MapStrMapStrMapLongStr") -> "void":
        return _cstl.MapStrMapStrMapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapStrMapStrMapLongStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapStrMapStrMapLongStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrMapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::allocator_type":
        return _cstl.MapStrMapStrMapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapStrMapStrMapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrMapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapStrMapStrMapLongStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrMapLongStr

# Register MapStrMapStrMapLongStr in _cstl:
_cstl.MapStrMapStrMapLongStr_swigregister(MapStrMapStrMapLongStr)

class MapStrMapStrMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrMapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapStrMapStrMapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::mapped_type const &":
        return _cstl.MapStrMapStrMapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrMapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrMapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrMapLongFloat_swiginit(self, _cstl.new_MapStrMapStrMapLongFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrMapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapStrMapStrMapLongFloat_size(self)

    def swap(self, v: "MapStrMapStrMapLongFloat") -> "void":
        return _cstl.MapStrMapStrMapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapStrMapStrMapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapStrMapStrMapLongFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrMapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::allocator_type":
        return _cstl.MapStrMapStrMapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapStrMapStrMapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrMapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapStrMapStrMapLongFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrMapLongFloat

# Register MapStrMapStrMapLongFloat in _cstl:
_cstl.MapStrMapStrMapLongFloat_swigregister(MapStrMapStrMapLongFloat)

class MapStrMapStrMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrMapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapStrMapStrMapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::mapped_type const &":
        return _cstl.MapStrMapStrMapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrMapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrMapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrMapLongDouble_swiginit(self, _cstl.new_MapStrMapStrMapLongDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrMapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapStrMapStrMapLongDouble_size(self)

    def swap(self, v: "MapStrMapStrMapLongDouble") -> "void":
        return _cstl.MapStrMapStrMapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapStrMapStrMapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapStrMapStrMapLongDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrMapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::allocator_type":
        return _cstl.MapStrMapStrMapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapStrMapStrMapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrMapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapStrMapStrMapLongDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrMapLongDouble

# Register MapStrMapStrMapLongDouble in _cstl:
_cstl.MapStrMapStrMapLongDouble_swigregister(MapStrMapStrMapLongDouble)

class MapStrMapStrMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrMapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapStrMapStrMapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::mapped_type const &":
        return _cstl.MapStrMapStrMapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrMapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrMapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrMapLongBool_swiginit(self, _cstl.new_MapStrMapStrMapLongBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrMapLongBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapStrMapStrMapLongBool_size(self)

    def swap(self, v: "MapStrMapStrMapLongBool") -> "void":
        return _cstl.MapStrMapStrMapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapStrMapStrMapLongBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapStrMapStrMapLongBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrMapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::allocator_type":
        return _cstl.MapStrMapStrMapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapStrMapStrMapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrMapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapStrMapStrMapLongBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrMapLongBool

# Register MapStrMapStrMapLongBool in _cstl:
_cstl.MapStrMapStrMapLongBool_swigregister(MapStrMapStrMapLongBool)

class MapStrMapStrMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapStrMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapStrMapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapStrMapStrMapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrMapStrMapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrMapStrMapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapStrMapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapStrMapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapStrMapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapStrMapLongLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapStrMapLongLong_swiginit(self, _cstl.new_MapStrMapStrMapLongLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapStrMapLongLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapStrMapStrMapLongLong_size(self)

    def swap(self, v: "MapStrMapStrMapLongLong") -> "void":
        return _cstl.MapStrMapStrMapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapStrMapStrMapLongLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapStrMapStrMapLongLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapStrMapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::allocator_type":
        return _cstl.MapStrMapStrMapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapStrMapStrMapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapStrMapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapStrMapStrMapLongLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapStrMapLongLong

# Register MapStrMapStrMapLongLong in _cstl:
_cstl.MapStrMapStrMapLongLong_swigregister(MapStrMapStrMapLongLong)

class MapStrMapLongVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongVecInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< int > > >::size_type":
        return _cstl.MapStrMapLongVecInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< int > > >::mapped_type const &":
        return _cstl.MapStrMapLongVecInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< int > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongVecInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongVecInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongVecInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongVecInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongVecInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongVecInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongVecInt_swiginit(self, _cstl.new_MapStrMapLongVecInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongVecInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< int > > >::size_type":
        return _cstl.MapStrMapLongVecInt_size(self)

    def swap(self, v: "MapStrMapLongVecInt") -> "void":
        return _cstl.MapStrMapLongVecInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< int > > >::iterator":
        return _cstl.MapStrMapLongVecInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< int > > >::iterator":
        return _cstl.MapStrMapLongVecInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongVecInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< int > > >::allocator_type":
        return _cstl.MapStrMapLongVecInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< int > > >::size_type":
        return _cstl.MapStrMapLongVecInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongVecInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< int > > >::iterator":
        return _cstl.MapStrMapLongVecInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongVecInt

# Register MapStrMapLongVecInt in _cstl:
_cstl.MapStrMapLongVecInt_swigregister(MapStrMapLongVecInt)

class MapStrMapLongVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongVecStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::string > > >::size_type":
        return _cstl.MapStrMapLongVecStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::string > > >::mapped_type const &":
        return _cstl.MapStrMapLongVecStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongVecStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongVecStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongVecStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongVecStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongVecStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongVecStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongVecStr_swiginit(self, _cstl.new_MapStrMapLongVecStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongVecStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::string > > >::size_type":
        return _cstl.MapStrMapLongVecStr_size(self)

    def swap(self, v: "MapStrMapLongVecStr") -> "void":
        return _cstl.MapStrMapLongVecStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::string > > >::iterator":
        return _cstl.MapStrMapLongVecStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::string > > >::iterator":
        return _cstl.MapStrMapLongVecStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongVecStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::string > > >::allocator_type":
        return _cstl.MapStrMapLongVecStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::string > > >::size_type":
        return _cstl.MapStrMapLongVecStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongVecStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::string > > >::iterator":
        return _cstl.MapStrMapLongVecStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongVecStr

# Register MapStrMapLongVecStr in _cstl:
_cstl.MapStrMapLongVecStr_swigregister(MapStrMapLongVecStr)

class MapStrMapLongVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongVecFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< float > > >::size_type":
        return _cstl.MapStrMapLongVecFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< float > > >::mapped_type const &":
        return _cstl.MapStrMapLongVecFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< float > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongVecFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongVecFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongVecFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongVecFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongVecFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongVecFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongVecFloat_swiginit(self, _cstl.new_MapStrMapLongVecFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongVecFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< float > > >::size_type":
        return _cstl.MapStrMapLongVecFloat_size(self)

    def swap(self, v: "MapStrMapLongVecFloat") -> "void":
        return _cstl.MapStrMapLongVecFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< float > > >::iterator":
        return _cstl.MapStrMapLongVecFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< float > > >::iterator":
        return _cstl.MapStrMapLongVecFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongVecFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< float > > >::allocator_type":
        return _cstl.MapStrMapLongVecFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< float > > >::size_type":
        return _cstl.MapStrMapLongVecFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongVecFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< float > > >::iterator":
        return _cstl.MapStrMapLongVecFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongVecFloat

# Register MapStrMapLongVecFloat in _cstl:
_cstl.MapStrMapLongVecFloat_swigregister(MapStrMapLongVecFloat)

class MapStrMapLongVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongVecDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< double > > >::size_type":
        return _cstl.MapStrMapLongVecDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< double > > >::mapped_type const &":
        return _cstl.MapStrMapLongVecDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< double > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongVecDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongVecDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongVecDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongVecDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongVecDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongVecDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongVecDouble_swiginit(self, _cstl.new_MapStrMapLongVecDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongVecDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< double > > >::size_type":
        return _cstl.MapStrMapLongVecDouble_size(self)

    def swap(self, v: "MapStrMapLongVecDouble") -> "void":
        return _cstl.MapStrMapLongVecDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< double > > >::iterator":
        return _cstl.MapStrMapLongVecDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< double > > >::iterator":
        return _cstl.MapStrMapLongVecDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongVecDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< double > > >::allocator_type":
        return _cstl.MapStrMapLongVecDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< double > > >::size_type":
        return _cstl.MapStrMapLongVecDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongVecDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< double > > >::iterator":
        return _cstl.MapStrMapLongVecDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongVecDouble

# Register MapStrMapLongVecDouble in _cstl:
_cstl.MapStrMapLongVecDouble_swigregister(MapStrMapLongVecDouble)

class MapStrMapLongVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongVecBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< bool > > >::size_type":
        return _cstl.MapStrMapLongVecBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< bool > > >::mapped_type const &":
        return _cstl.MapStrMapLongVecBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< bool > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongVecBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongVecBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongVecBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongVecBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongVecBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongVecBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongVecBool_swiginit(self, _cstl.new_MapStrMapLongVecBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongVecBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< bool > > >::size_type":
        return _cstl.MapStrMapLongVecBool_size(self)

    def swap(self, v: "MapStrMapLongVecBool") -> "void":
        return _cstl.MapStrMapLongVecBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< bool > > >::iterator":
        return _cstl.MapStrMapLongVecBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< bool > > >::iterator":
        return _cstl.MapStrMapLongVecBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongVecBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< bool > > >::allocator_type":
        return _cstl.MapStrMapLongVecBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< bool > > >::size_type":
        return _cstl.MapStrMapLongVecBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongVecBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< bool > > >::iterator":
        return _cstl.MapStrMapLongVecBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongVecBool

# Register MapStrMapLongVecBool in _cstl:
_cstl.MapStrMapLongVecBool_swigregister(MapStrMapLongVecBool)

class MapStrMapLongVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongVecLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapStrMapLongVecLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrMapLongVecLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongVecLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongVecLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongVecLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongVecLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongVecLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongVecLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongVecLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongVecLong_swiginit(self, _cstl.new_MapStrMapLongVecLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongVecLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapStrMapLongVecLong_size(self)

    def swap(self, v: "MapStrMapLongVecLong") -> "void":
        return _cstl.MapStrMapLongVecLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapStrMapLongVecLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapStrMapLongVecLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongVecLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::allocator_type":
        return _cstl.MapStrMapLongVecLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapStrMapLongVecLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongVecLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapStrMapLongVecLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongVecLong

# Register MapStrMapLongVecLong in _cstl:
_cstl.MapStrMapLongVecLong_swigregister(MapStrMapLongVecLong)

class MapStrMapLongSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongSetInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< int > > >::size_type":
        return _cstl.MapStrMapLongSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< int > > >::mapped_type const &":
        return _cstl.MapStrMapLongSetInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< int > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongSetInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongSetInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongSetInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongSetInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongSetInt_swiginit(self, _cstl.new_MapStrMapLongSetInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongSetInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< int > > >::size_type":
        return _cstl.MapStrMapLongSetInt_size(self)

    def swap(self, v: "MapStrMapLongSetInt") -> "void":
        return _cstl.MapStrMapLongSetInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< int > > >::iterator":
        return _cstl.MapStrMapLongSetInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< int > > >::iterator":
        return _cstl.MapStrMapLongSetInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongSetInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< int > > >::allocator_type":
        return _cstl.MapStrMapLongSetInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< int > > >::size_type":
        return _cstl.MapStrMapLongSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongSetInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< int > > >::iterator":
        return _cstl.MapStrMapLongSetInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongSetInt

# Register MapStrMapLongSetInt in _cstl:
_cstl.MapStrMapLongSetInt_swigregister(MapStrMapLongSetInt)

class MapStrMapLongSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongSetStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapStrMapLongSetStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::mapped_type const &":
        return _cstl.MapStrMapLongSetStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongSetStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongSetStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongSetStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongSetStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongSetStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongSetStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongSetStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongSetStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongSetStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongSetStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongSetStr_swiginit(self, _cstl.new_MapStrMapLongSetStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongSetStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapStrMapLongSetStr_size(self)

    def swap(self, v: "MapStrMapLongSetStr") -> "void":
        return _cstl.MapStrMapLongSetStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapStrMapLongSetStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapStrMapLongSetStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongSetStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::allocator_type":
        return _cstl.MapStrMapLongSetStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapStrMapLongSetStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongSetStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapStrMapLongSetStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongSetStr

# Register MapStrMapLongSetStr in _cstl:
_cstl.MapStrMapLongSetStr_swigregister(MapStrMapLongSetStr)

class MapStrMapLongSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongSetLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapStrMapLongSetLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrMapLongSetLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongSetLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongSetLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongSetLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongSetLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongSetLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongSetLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongSetLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongSetLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongSetLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongSetLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongSetLong_swiginit(self, _cstl.new_MapStrMapLongSetLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongSetLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapStrMapLongSetLong_size(self)

    def swap(self, v: "MapStrMapLongSetLong") -> "void":
        return _cstl.MapStrMapLongSetLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapStrMapLongSetLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapStrMapLongSetLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongSetLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::allocator_type":
        return _cstl.MapStrMapLongSetLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapStrMapLongSetLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongSetLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapStrMapLongSetLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongSetLong

# Register MapStrMapLongSetLong in _cstl:
_cstl.MapStrMapLongSetLong_swigregister(MapStrMapLongSetLong)

class MapStrMapLongMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongMapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapStrMapLongMapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::mapped_type const &":
        return _cstl.MapStrMapLongMapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongMapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongMapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongMapIntInt_swiginit(self, _cstl.new_MapStrMapLongMapIntInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongMapIntInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapStrMapLongMapIntInt_size(self)

    def swap(self, v: "MapStrMapLongMapIntInt") -> "void":
        return _cstl.MapStrMapLongMapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapStrMapLongMapIntInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapStrMapLongMapIntInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongMapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::allocator_type":
        return _cstl.MapStrMapLongMapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapStrMapLongMapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongMapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapStrMapLongMapIntInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongMapIntInt

# Register MapStrMapLongMapIntInt in _cstl:
_cstl.MapStrMapLongMapIntInt_swigregister(MapStrMapLongMapIntInt)

class MapStrMapLongMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongMapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapStrMapLongMapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::mapped_type const &":
        return _cstl.MapStrMapLongMapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongMapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongMapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongMapIntStr_swiginit(self, _cstl.new_MapStrMapLongMapIntStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongMapIntStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapStrMapLongMapIntStr_size(self)

    def swap(self, v: "MapStrMapLongMapIntStr") -> "void":
        return _cstl.MapStrMapLongMapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapStrMapLongMapIntStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapStrMapLongMapIntStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongMapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::allocator_type":
        return _cstl.MapStrMapLongMapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapStrMapLongMapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongMapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapStrMapLongMapIntStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongMapIntStr

# Register MapStrMapLongMapIntStr in _cstl:
_cstl.MapStrMapLongMapIntStr_swigregister(MapStrMapLongMapIntStr)

class MapStrMapLongMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongMapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapStrMapLongMapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::mapped_type const &":
        return _cstl.MapStrMapLongMapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongMapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongMapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongMapIntFloat_swiginit(self, _cstl.new_MapStrMapLongMapIntFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongMapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapStrMapLongMapIntFloat_size(self)

    def swap(self, v: "MapStrMapLongMapIntFloat") -> "void":
        return _cstl.MapStrMapLongMapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapStrMapLongMapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapStrMapLongMapIntFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongMapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::allocator_type":
        return _cstl.MapStrMapLongMapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapStrMapLongMapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongMapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapStrMapLongMapIntFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongMapIntFloat

# Register MapStrMapLongMapIntFloat in _cstl:
_cstl.MapStrMapLongMapIntFloat_swigregister(MapStrMapLongMapIntFloat)

class MapStrMapLongMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongMapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapStrMapLongMapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::mapped_type const &":
        return _cstl.MapStrMapLongMapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongMapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongMapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongMapIntDouble_swiginit(self, _cstl.new_MapStrMapLongMapIntDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongMapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapStrMapLongMapIntDouble_size(self)

    def swap(self, v: "MapStrMapLongMapIntDouble") -> "void":
        return _cstl.MapStrMapLongMapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapStrMapLongMapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapStrMapLongMapIntDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongMapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::allocator_type":
        return _cstl.MapStrMapLongMapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapStrMapLongMapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongMapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapStrMapLongMapIntDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongMapIntDouble

# Register MapStrMapLongMapIntDouble in _cstl:
_cstl.MapStrMapLongMapIntDouble_swigregister(MapStrMapLongMapIntDouble)

class MapStrMapLongMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongMapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapStrMapLongMapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::mapped_type const &":
        return _cstl.MapStrMapLongMapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongMapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongMapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongMapIntBool_swiginit(self, _cstl.new_MapStrMapLongMapIntBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongMapIntBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapStrMapLongMapIntBool_size(self)

    def swap(self, v: "MapStrMapLongMapIntBool") -> "void":
        return _cstl.MapStrMapLongMapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapStrMapLongMapIntBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapStrMapLongMapIntBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongMapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::allocator_type":
        return _cstl.MapStrMapLongMapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapStrMapLongMapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongMapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapStrMapLongMapIntBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongMapIntBool

# Register MapStrMapLongMapIntBool in _cstl:
_cstl.MapStrMapLongMapIntBool_swigregister(MapStrMapLongMapIntBool)

class MapStrMapLongMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongMapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapStrMapLongMapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrMapLongMapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongMapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongMapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapIntLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongMapIntLong_swiginit(self, _cstl.new_MapStrMapLongMapIntLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongMapIntLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapStrMapLongMapIntLong_size(self)

    def swap(self, v: "MapStrMapLongMapIntLong") -> "void":
        return _cstl.MapStrMapLongMapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapStrMapLongMapIntLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapStrMapLongMapIntLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongMapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::allocator_type":
        return _cstl.MapStrMapLongMapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapStrMapLongMapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongMapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapStrMapLongMapIntLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongMapIntLong

# Register MapStrMapLongMapIntLong in _cstl:
_cstl.MapStrMapLongMapIntLong_swigregister(MapStrMapLongMapIntLong)

class MapStrMapLongMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongMapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapStrMapLongMapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::mapped_type const &":
        return _cstl.MapStrMapLongMapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongMapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongMapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongMapStrInt_swiginit(self, _cstl.new_MapStrMapLongMapStrInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongMapStrInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapStrMapLongMapStrInt_size(self)

    def swap(self, v: "MapStrMapLongMapStrInt") -> "void":
        return _cstl.MapStrMapLongMapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapStrMapLongMapStrInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapStrMapLongMapStrInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongMapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::allocator_type":
        return _cstl.MapStrMapLongMapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapStrMapLongMapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongMapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapStrMapLongMapStrInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongMapStrInt

# Register MapStrMapLongMapStrInt in _cstl:
_cstl.MapStrMapLongMapStrInt_swigregister(MapStrMapLongMapStrInt)

class MapStrMapLongMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongMapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapStrMapLongMapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::mapped_type const &":
        return _cstl.MapStrMapLongMapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongMapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongMapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongMapStrStr_swiginit(self, _cstl.new_MapStrMapLongMapStrStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongMapStrStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapStrMapLongMapStrStr_size(self)

    def swap(self, v: "MapStrMapLongMapStrStr") -> "void":
        return _cstl.MapStrMapLongMapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapStrMapLongMapStrStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapStrMapLongMapStrStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongMapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::allocator_type":
        return _cstl.MapStrMapLongMapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapStrMapLongMapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongMapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapStrMapLongMapStrStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongMapStrStr

# Register MapStrMapLongMapStrStr in _cstl:
_cstl.MapStrMapLongMapStrStr_swigregister(MapStrMapLongMapStrStr)

class MapStrMapLongMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongMapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapStrMapLongMapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::mapped_type const &":
        return _cstl.MapStrMapLongMapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongMapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongMapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongMapStrFloat_swiginit(self, _cstl.new_MapStrMapLongMapStrFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongMapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapStrMapLongMapStrFloat_size(self)

    def swap(self, v: "MapStrMapLongMapStrFloat") -> "void":
        return _cstl.MapStrMapLongMapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapStrMapLongMapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapStrMapLongMapStrFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongMapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::allocator_type":
        return _cstl.MapStrMapLongMapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapStrMapLongMapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongMapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapStrMapLongMapStrFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongMapStrFloat

# Register MapStrMapLongMapStrFloat in _cstl:
_cstl.MapStrMapLongMapStrFloat_swigregister(MapStrMapLongMapStrFloat)

class MapStrMapLongMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongMapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapStrMapLongMapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::mapped_type const &":
        return _cstl.MapStrMapLongMapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongMapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongMapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongMapStrDouble_swiginit(self, _cstl.new_MapStrMapLongMapStrDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongMapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapStrMapLongMapStrDouble_size(self)

    def swap(self, v: "MapStrMapLongMapStrDouble") -> "void":
        return _cstl.MapStrMapLongMapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapStrMapLongMapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapStrMapLongMapStrDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongMapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::allocator_type":
        return _cstl.MapStrMapLongMapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapStrMapLongMapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongMapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapStrMapLongMapStrDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongMapStrDouble

# Register MapStrMapLongMapStrDouble in _cstl:
_cstl.MapStrMapLongMapStrDouble_swigregister(MapStrMapLongMapStrDouble)

class MapStrMapLongMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongMapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapStrMapLongMapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::mapped_type const &":
        return _cstl.MapStrMapLongMapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongMapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongMapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongMapStrBool_swiginit(self, _cstl.new_MapStrMapLongMapStrBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongMapStrBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapStrMapLongMapStrBool_size(self)

    def swap(self, v: "MapStrMapLongMapStrBool") -> "void":
        return _cstl.MapStrMapLongMapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapStrMapLongMapStrBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapStrMapLongMapStrBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongMapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::allocator_type":
        return _cstl.MapStrMapLongMapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapStrMapLongMapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongMapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapStrMapLongMapStrBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongMapStrBool

# Register MapStrMapLongMapStrBool in _cstl:
_cstl.MapStrMapLongMapStrBool_swigregister(MapStrMapLongMapStrBool)

class MapStrMapLongMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongMapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapStrMapLongMapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrMapLongMapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongMapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongMapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapStrLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongMapStrLong_swiginit(self, _cstl.new_MapStrMapLongMapStrLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongMapStrLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapStrMapLongMapStrLong_size(self)

    def swap(self, v: "MapStrMapLongMapStrLong") -> "void":
        return _cstl.MapStrMapLongMapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapStrMapLongMapStrLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapStrMapLongMapStrLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongMapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::allocator_type":
        return _cstl.MapStrMapLongMapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapStrMapLongMapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongMapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapStrMapLongMapStrLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongMapStrLong

# Register MapStrMapLongMapStrLong in _cstl:
_cstl.MapStrMapLongMapStrLong_swigregister(MapStrMapLongMapStrLong)

class MapStrMapLongMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongMapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapStrMapLongMapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::mapped_type const &":
        return _cstl.MapStrMapLongMapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongMapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongMapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongMapLongInt_swiginit(self, _cstl.new_MapStrMapLongMapLongInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongMapLongInt_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapStrMapLongMapLongInt_size(self)

    def swap(self, v: "MapStrMapLongMapLongInt") -> "void":
        return _cstl.MapStrMapLongMapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapStrMapLongMapLongInt_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapStrMapLongMapLongInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongMapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::allocator_type":
        return _cstl.MapStrMapLongMapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapStrMapLongMapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongMapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapStrMapLongMapLongInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongMapLongInt

# Register MapStrMapLongMapLongInt in _cstl:
_cstl.MapStrMapLongMapLongInt_swigregister(MapStrMapLongMapLongInt)

class MapStrMapLongMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongMapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapStrMapLongMapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::mapped_type const &":
        return _cstl.MapStrMapLongMapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongMapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongMapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongMapLongStr_swiginit(self, _cstl.new_MapStrMapLongMapLongStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongMapLongStr_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapStrMapLongMapLongStr_size(self)

    def swap(self, v: "MapStrMapLongMapLongStr") -> "void":
        return _cstl.MapStrMapLongMapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapStrMapLongMapLongStr_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapStrMapLongMapLongStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongMapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::allocator_type":
        return _cstl.MapStrMapLongMapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapStrMapLongMapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongMapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapStrMapLongMapLongStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongMapLongStr

# Register MapStrMapLongMapLongStr in _cstl:
_cstl.MapStrMapLongMapLongStr_swigregister(MapStrMapLongMapLongStr)

class MapStrMapLongMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongMapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapStrMapLongMapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::mapped_type const &":
        return _cstl.MapStrMapLongMapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongMapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongMapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongMapLongFloat_swiginit(self, _cstl.new_MapStrMapLongMapLongFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongMapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapStrMapLongMapLongFloat_size(self)

    def swap(self, v: "MapStrMapLongMapLongFloat") -> "void":
        return _cstl.MapStrMapLongMapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapStrMapLongMapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapStrMapLongMapLongFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongMapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::allocator_type":
        return _cstl.MapStrMapLongMapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapStrMapLongMapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongMapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapStrMapLongMapLongFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongMapLongFloat

# Register MapStrMapLongMapLongFloat in _cstl:
_cstl.MapStrMapLongMapLongFloat_swigregister(MapStrMapLongMapLongFloat)

class MapStrMapLongMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongMapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapStrMapLongMapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::mapped_type const &":
        return _cstl.MapStrMapLongMapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongMapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongMapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongMapLongDouble_swiginit(self, _cstl.new_MapStrMapLongMapLongDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongMapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapStrMapLongMapLongDouble_size(self)

    def swap(self, v: "MapStrMapLongMapLongDouble") -> "void":
        return _cstl.MapStrMapLongMapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapStrMapLongMapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapStrMapLongMapLongDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongMapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::allocator_type":
        return _cstl.MapStrMapLongMapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapStrMapLongMapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongMapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapStrMapLongMapLongDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongMapLongDouble

# Register MapStrMapLongMapLongDouble in _cstl:
_cstl.MapStrMapLongMapLongDouble_swigregister(MapStrMapLongMapLongDouble)

class MapStrMapLongMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongMapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapStrMapLongMapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::mapped_type const &":
        return _cstl.MapStrMapLongMapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongMapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongMapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongMapLongBool_swiginit(self, _cstl.new_MapStrMapLongMapLongBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongMapLongBool_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapStrMapLongMapLongBool_size(self)

    def swap(self, v: "MapStrMapLongMapLongBool") -> "void":
        return _cstl.MapStrMapLongMapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapStrMapLongMapLongBool_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapStrMapLongMapLongBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongMapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::allocator_type":
        return _cstl.MapStrMapLongMapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapStrMapLongMapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongMapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapStrMapLongMapLongBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongMapLongBool

# Register MapStrMapLongMapLongBool in _cstl:
_cstl.MapStrMapLongMapLongBool_swigregister(MapStrMapLongMapLongBool)

class MapStrMapLongMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapStrMapLongMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapStrMapLongMapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapStrMapLongMapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::mapped_type const &":
        return _cstl.MapStrMapLongMapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapStrMapLongMapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapStrMapLongMapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapStrMapLongMapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapStrMapLongMapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapStrMapLongMapLongLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapStrMapLongMapLongLong_swiginit(self, _cstl.new_MapStrMapLongMapLongLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapStrMapLongMapLongLong_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapStrMapLongMapLongLong_size(self)

    def swap(self, v: "MapStrMapLongMapLongLong") -> "void":
        return _cstl.MapStrMapLongMapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapStrMapLongMapLongLong_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapStrMapLongMapLongLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapStrMapLongMapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::allocator_type":
        return _cstl.MapStrMapLongMapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapStrMapLongMapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapStrMapLongMapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapStrMapLongMapLongLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapStrMapLongMapLongLong

# Register MapStrMapLongMapLongLong in _cstl:
_cstl.MapStrMapLongMapLongLong_swigregister(MapStrMapLongMapLongLong)

class MapLongVecVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecVecInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< int > > >::size_type":
        return _cstl.MapLongVecVecInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::vector< int > > >::mapped_type const &":
        return _cstl.MapLongVecVecInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< int > > >::key_type const &") -> "void":
        return _cstl.MapLongVecVecInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecVecInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecVecInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecVecInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecVecInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecVecInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecVecInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecVecInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecVecInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecVecInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecVecInt_swiginit(self, _cstl.new_MapLongVecVecInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecVecInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< int > > >::size_type":
        return _cstl.MapLongVecVecInt_size(self)

    def swap(self, v: "MapLongVecVecInt") -> "void":
        return _cstl.MapLongVecVecInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< int > > >::iterator":
        return _cstl.MapLongVecVecInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< int > > >::iterator":
        return _cstl.MapLongVecVecInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecVecInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< int > > >::allocator_type":
        return _cstl.MapLongVecVecInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::vector< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::vector< int > > >::size_type":
        return _cstl.MapLongVecVecInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecVecInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::vector< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::vector< int > > >::iterator":
        return _cstl.MapLongVecVecInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecVecInt

# Register MapLongVecVecInt in _cstl:
_cstl.MapLongVecVecInt_swigregister(MapLongVecVecInt)

class MapLongVecVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecVecStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< std::string > > >::size_type":
        return _cstl.MapLongVecVecStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::vector< std::string > > >::mapped_type const &":
        return _cstl.MapLongVecVecStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongVecVecStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecVecStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecVecStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecVecStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecVecStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecVecStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecVecStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecVecStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecVecStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecVecStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecVecStr_swiginit(self, _cstl.new_MapLongVecVecStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecVecStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< std::string > > >::size_type":
        return _cstl.MapLongVecVecStr_size(self)

    def swap(self, v: "MapLongVecVecStr") -> "void":
        return _cstl.MapLongVecVecStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< std::string > > >::iterator":
        return _cstl.MapLongVecVecStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< std::string > > >::iterator":
        return _cstl.MapLongVecVecStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecVecStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< std::string > > >::allocator_type":
        return _cstl.MapLongVecVecStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::vector< std::string > > >::size_type":
        return _cstl.MapLongVecVecStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecVecStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::vector< std::string > > >::iterator":
        return _cstl.MapLongVecVecStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecVecStr

# Register MapLongVecVecStr in _cstl:
_cstl.MapLongVecVecStr_swigregister(MapLongVecVecStr)

class MapLongVecVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecVecFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< float > > >::size_type":
        return _cstl.MapLongVecVecFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::vector< float > > >::mapped_type const &":
        return _cstl.MapLongVecVecFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< float > > >::key_type const &") -> "void":
        return _cstl.MapLongVecVecFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecVecFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecVecFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecVecFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecVecFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecVecFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecVecFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecVecFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecVecFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecVecFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecVecFloat_swiginit(self, _cstl.new_MapLongVecVecFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecVecFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< float > > >::size_type":
        return _cstl.MapLongVecVecFloat_size(self)

    def swap(self, v: "MapLongVecVecFloat") -> "void":
        return _cstl.MapLongVecVecFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< float > > >::iterator":
        return _cstl.MapLongVecVecFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< float > > >::iterator":
        return _cstl.MapLongVecVecFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecVecFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< float > > >::allocator_type":
        return _cstl.MapLongVecVecFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::vector< float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::vector< float > > >::size_type":
        return _cstl.MapLongVecVecFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecVecFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::vector< float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::vector< float > > >::iterator":
        return _cstl.MapLongVecVecFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecVecFloat

# Register MapLongVecVecFloat in _cstl:
_cstl.MapLongVecVecFloat_swigregister(MapLongVecVecFloat)

class MapLongVecVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecVecDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< double > > >::size_type":
        return _cstl.MapLongVecVecDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::vector< double > > >::mapped_type const &":
        return _cstl.MapLongVecVecDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< double > > >::key_type const &") -> "void":
        return _cstl.MapLongVecVecDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecVecDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecVecDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecVecDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecVecDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecVecDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecVecDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecVecDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecVecDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecVecDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecVecDouble_swiginit(self, _cstl.new_MapLongVecVecDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecVecDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< double > > >::size_type":
        return _cstl.MapLongVecVecDouble_size(self)

    def swap(self, v: "MapLongVecVecDouble") -> "void":
        return _cstl.MapLongVecVecDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< double > > >::iterator":
        return _cstl.MapLongVecVecDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< double > > >::iterator":
        return _cstl.MapLongVecVecDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecVecDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< double > > >::allocator_type":
        return _cstl.MapLongVecVecDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::vector< double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::vector< double > > >::size_type":
        return _cstl.MapLongVecVecDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecVecDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::vector< double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::vector< double > > >::iterator":
        return _cstl.MapLongVecVecDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecVecDouble

# Register MapLongVecVecDouble in _cstl:
_cstl.MapLongVecVecDouble_swigregister(MapLongVecVecDouble)

class MapLongVecVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecVecBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< bool > > >::size_type":
        return _cstl.MapLongVecVecBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::vector< bool > > >::mapped_type const &":
        return _cstl.MapLongVecVecBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< bool > > >::key_type const &") -> "void":
        return _cstl.MapLongVecVecBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecVecBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecVecBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecVecBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecVecBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecVecBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecVecBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecVecBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecVecBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecVecBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecVecBool_swiginit(self, _cstl.new_MapLongVecVecBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecVecBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< bool > > >::size_type":
        return _cstl.MapLongVecVecBool_size(self)

    def swap(self, v: "MapLongVecVecBool") -> "void":
        return _cstl.MapLongVecVecBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< bool > > >::iterator":
        return _cstl.MapLongVecVecBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< bool > > >::iterator":
        return _cstl.MapLongVecVecBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecVecBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< bool > > >::allocator_type":
        return _cstl.MapLongVecVecBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::vector< bool > > >::size_type":
        return _cstl.MapLongVecVecBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecVecBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::vector< bool > > >::iterator":
        return _cstl.MapLongVecVecBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecVecBool

# Register MapLongVecVecBool in _cstl:
_cstl.MapLongVecVecBool_swigregister(MapLongVecVecBool)

class MapLongVecVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecVecLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< std::int64_t > > >::size_type":
        return _cstl.MapLongVecVecLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::vector< std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongVecVecLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongVecVecLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecVecLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecVecLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecVecLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecVecLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecVecLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecVecLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecVecLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecVecLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecVecLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecVecLong_swiginit(self, _cstl.new_MapLongVecVecLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecVecLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< std::int64_t > > >::size_type":
        return _cstl.MapLongVecVecLong_size(self)

    def swap(self, v: "MapLongVecVecLong") -> "void":
        return _cstl.MapLongVecVecLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< std::int64_t > > >::iterator":
        return _cstl.MapLongVecVecLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< std::int64_t > > >::iterator":
        return _cstl.MapLongVecVecLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecVecLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::vector< std::int64_t > > >::allocator_type":
        return _cstl.MapLongVecVecLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::vector< std::int64_t > > >::size_type":
        return _cstl.MapLongVecVecLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecVecLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::vector< std::int64_t > > >::iterator":
        return _cstl.MapLongVecVecLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecVecLong

# Register MapLongVecVecLong in _cstl:
_cstl.MapLongVecVecLong_swigregister(MapLongVecVecLong)

class MapLongVecSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecSetInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< int > > >::size_type":
        return _cstl.MapLongVecSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< int > > >::mapped_type const &":
        return _cstl.MapLongVecSetInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_set< int > > >::key_type const &") -> "void":
        return _cstl.MapLongVecSetInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecSetInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecSetInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecSetInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecSetInt_swiginit(self, _cstl.new_MapLongVecSetInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecSetInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< int > > >::size_type":
        return _cstl.MapLongVecSetInt_size(self)

    def swap(self, v: "MapLongVecSetInt") -> "void":
        return _cstl.MapLongVecSetInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< int > > >::iterator":
        return _cstl.MapLongVecSetInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< int > > >::iterator":
        return _cstl.MapLongVecSetInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecSetInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< int > > >::allocator_type":
        return _cstl.MapLongVecSetInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< int > > >::size_type":
        return _cstl.MapLongVecSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecSetInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< int > > >::iterator":
        return _cstl.MapLongVecSetInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecSetInt

# Register MapLongVecSetInt in _cstl:
_cstl.MapLongVecSetInt_swigregister(MapLongVecSetInt)

class MapLongVecSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecSetStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::string > > >::size_type":
        return _cstl.MapLongVecSetStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::string > > >::mapped_type const &":
        return _cstl.MapLongVecSetStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongVecSetStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecSetStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecSetStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecSetStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecSetStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecSetStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecSetStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecSetStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecSetStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecSetStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecSetStr_swiginit(self, _cstl.new_MapLongVecSetStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecSetStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::string > > >::size_type":
        return _cstl.MapLongVecSetStr_size(self)

    def swap(self, v: "MapLongVecSetStr") -> "void":
        return _cstl.MapLongVecSetStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::string > > >::iterator":
        return _cstl.MapLongVecSetStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::string > > >::iterator":
        return _cstl.MapLongVecSetStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecSetStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::string > > >::allocator_type":
        return _cstl.MapLongVecSetStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::string > > >::size_type":
        return _cstl.MapLongVecSetStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecSetStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::string > > >::iterator":
        return _cstl.MapLongVecSetStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecSetStr

# Register MapLongVecSetStr in _cstl:
_cstl.MapLongVecSetStr_swigregister(MapLongVecSetStr)

class MapLongVecSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecSetLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapLongVecSetLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongVecSetLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongVecSetLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecSetLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecSetLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecSetLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecSetLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecSetLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecSetLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecSetLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecSetLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecSetLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecSetLong_swiginit(self, _cstl.new_MapLongVecSetLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecSetLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapLongVecSetLong_size(self)

    def swap(self, v: "MapLongVecSetLong") -> "void":
        return _cstl.MapLongVecSetLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapLongVecSetLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapLongVecSetLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecSetLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::int64_t > > >::allocator_type":
        return _cstl.MapLongVecSetLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapLongVecSetLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecSetLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapLongVecSetLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecSetLong

# Register MapLongVecSetLong in _cstl:
_cstl.MapLongVecSetLong_swigregister(MapLongVecSetLong)

class MapLongVecMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecMapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,int > > >::size_type":
        return _cstl.MapLongVecMapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,int > > >::mapped_type const &":
        return _cstl.MapLongVecMapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,int > > >::key_type const &") -> "void":
        return _cstl.MapLongVecMapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecMapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecMapIntInt_swiginit(self, _cstl.new_MapLongVecMapIntInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecMapIntInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,int > > >::size_type":
        return _cstl.MapLongVecMapIntInt_size(self)

    def swap(self, v: "MapLongVecMapIntInt") -> "void":
        return _cstl.MapLongVecMapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,int > > >::iterator":
        return _cstl.MapLongVecMapIntInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,int > > >::iterator":
        return _cstl.MapLongVecMapIntInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecMapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,int > > >::allocator_type":
        return _cstl.MapLongVecMapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,int > > >::size_type":
        return _cstl.MapLongVecMapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecMapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,int > > >::iterator":
        return _cstl.MapLongVecMapIntInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecMapIntInt

# Register MapLongVecMapIntInt in _cstl:
_cstl.MapLongVecMapIntInt_swigregister(MapLongVecMapIntInt)

class MapLongVecMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecMapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapLongVecMapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::string > > >::mapped_type const &":
        return _cstl.MapLongVecMapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongVecMapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecMapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecMapIntStr_swiginit(self, _cstl.new_MapLongVecMapIntStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecMapIntStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapLongVecMapIntStr_size(self)

    def swap(self, v: "MapLongVecMapIntStr") -> "void":
        return _cstl.MapLongVecMapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapLongVecMapIntStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapLongVecMapIntStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecMapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::string > > >::allocator_type":
        return _cstl.MapLongVecMapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapLongVecMapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecMapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapLongVecMapIntStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecMapIntStr

# Register MapLongVecMapIntStr in _cstl:
_cstl.MapLongVecMapIntStr_swigregister(MapLongVecMapIntStr)

class MapLongVecMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecMapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,float > > >::size_type":
        return _cstl.MapLongVecMapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,float > > >::mapped_type const &":
        return _cstl.MapLongVecMapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,float > > >::key_type const &") -> "void":
        return _cstl.MapLongVecMapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecMapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecMapIntFloat_swiginit(self, _cstl.new_MapLongVecMapIntFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecMapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,float > > >::size_type":
        return _cstl.MapLongVecMapIntFloat_size(self)

    def swap(self, v: "MapLongVecMapIntFloat") -> "void":
        return _cstl.MapLongVecMapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,float > > >::iterator":
        return _cstl.MapLongVecMapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,float > > >::iterator":
        return _cstl.MapLongVecMapIntFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecMapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,float > > >::allocator_type":
        return _cstl.MapLongVecMapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,float > > >::size_type":
        return _cstl.MapLongVecMapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecMapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,float > > >::iterator":
        return _cstl.MapLongVecMapIntFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecMapIntFloat

# Register MapLongVecMapIntFloat in _cstl:
_cstl.MapLongVecMapIntFloat_swigregister(MapLongVecMapIntFloat)

class MapLongVecMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecMapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,double > > >::size_type":
        return _cstl.MapLongVecMapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,double > > >::mapped_type const &":
        return _cstl.MapLongVecMapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,double > > >::key_type const &") -> "void":
        return _cstl.MapLongVecMapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecMapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecMapIntDouble_swiginit(self, _cstl.new_MapLongVecMapIntDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecMapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,double > > >::size_type":
        return _cstl.MapLongVecMapIntDouble_size(self)

    def swap(self, v: "MapLongVecMapIntDouble") -> "void":
        return _cstl.MapLongVecMapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,double > > >::iterator":
        return _cstl.MapLongVecMapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,double > > >::iterator":
        return _cstl.MapLongVecMapIntDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecMapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,double > > >::allocator_type":
        return _cstl.MapLongVecMapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,double > > >::size_type":
        return _cstl.MapLongVecMapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecMapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,double > > >::iterator":
        return _cstl.MapLongVecMapIntDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecMapIntDouble

# Register MapLongVecMapIntDouble in _cstl:
_cstl.MapLongVecMapIntDouble_swigregister(MapLongVecMapIntDouble)

class MapLongVecMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecMapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapLongVecMapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,bool > > >::mapped_type const &":
        return _cstl.MapLongVecMapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,bool > > >::key_type const &") -> "void":
        return _cstl.MapLongVecMapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecMapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecMapIntBool_swiginit(self, _cstl.new_MapLongVecMapIntBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecMapIntBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapLongVecMapIntBool_size(self)

    def swap(self, v: "MapLongVecMapIntBool") -> "void":
        return _cstl.MapLongVecMapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapLongVecMapIntBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapLongVecMapIntBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecMapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,bool > > >::allocator_type":
        return _cstl.MapLongVecMapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapLongVecMapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecMapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapLongVecMapIntBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecMapIntBool

# Register MapLongVecMapIntBool in _cstl:
_cstl.MapLongVecMapIntBool_swigregister(MapLongVecMapIntBool)

class MapLongVecMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecMapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapLongVecMapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongVecMapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongVecMapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecMapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecMapIntLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecMapIntLong_swiginit(self, _cstl.new_MapLongVecMapIntLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecMapIntLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapLongVecMapIntLong_size(self)

    def swap(self, v: "MapLongVecMapIntLong") -> "void":
        return _cstl.MapLongVecMapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapLongVecMapIntLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapLongVecMapIntLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecMapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::int64_t > > >::allocator_type":
        return _cstl.MapLongVecMapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapLongVecMapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecMapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapLongVecMapIntLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecMapIntLong

# Register MapLongVecMapIntLong in _cstl:
_cstl.MapLongVecMapIntLong_swigregister(MapLongVecMapIntLong)

class MapLongVecMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecMapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapLongVecMapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,int > > >::mapped_type const &":
        return _cstl.MapLongVecMapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,int > > >::key_type const &") -> "void":
        return _cstl.MapLongVecMapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecMapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecMapStrInt_swiginit(self, _cstl.new_MapLongVecMapStrInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecMapStrInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapLongVecMapStrInt_size(self)

    def swap(self, v: "MapLongVecMapStrInt") -> "void":
        return _cstl.MapLongVecMapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapLongVecMapStrInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapLongVecMapStrInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecMapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,int > > >::allocator_type":
        return _cstl.MapLongVecMapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapLongVecMapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecMapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapLongVecMapStrInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecMapStrInt

# Register MapLongVecMapStrInt in _cstl:
_cstl.MapLongVecMapStrInt_swigregister(MapLongVecMapStrInt)

class MapLongVecMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecMapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapLongVecMapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::string > > >::mapped_type const &":
        return _cstl.MapLongVecMapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongVecMapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecMapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecMapStrStr_swiginit(self, _cstl.new_MapLongVecMapStrStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecMapStrStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapLongVecMapStrStr_size(self)

    def swap(self, v: "MapLongVecMapStrStr") -> "void":
        return _cstl.MapLongVecMapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapLongVecMapStrStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapLongVecMapStrStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecMapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::string > > >::allocator_type":
        return _cstl.MapLongVecMapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapLongVecMapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecMapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapLongVecMapStrStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecMapStrStr

# Register MapLongVecMapStrStr in _cstl:
_cstl.MapLongVecMapStrStr_swigregister(MapLongVecMapStrStr)

class MapLongVecMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecMapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapLongVecMapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,float > > >::mapped_type const &":
        return _cstl.MapLongVecMapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,float > > >::key_type const &") -> "void":
        return _cstl.MapLongVecMapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecMapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecMapStrFloat_swiginit(self, _cstl.new_MapLongVecMapStrFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecMapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapLongVecMapStrFloat_size(self)

    def swap(self, v: "MapLongVecMapStrFloat") -> "void":
        return _cstl.MapLongVecMapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapLongVecMapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapLongVecMapStrFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecMapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,float > > >::allocator_type":
        return _cstl.MapLongVecMapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapLongVecMapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecMapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapLongVecMapStrFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecMapStrFloat

# Register MapLongVecMapStrFloat in _cstl:
_cstl.MapLongVecMapStrFloat_swigregister(MapLongVecMapStrFloat)

class MapLongVecMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecMapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapLongVecMapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,double > > >::mapped_type const &":
        return _cstl.MapLongVecMapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,double > > >::key_type const &") -> "void":
        return _cstl.MapLongVecMapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecMapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecMapStrDouble_swiginit(self, _cstl.new_MapLongVecMapStrDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecMapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapLongVecMapStrDouble_size(self)

    def swap(self, v: "MapLongVecMapStrDouble") -> "void":
        return _cstl.MapLongVecMapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapLongVecMapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapLongVecMapStrDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecMapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,double > > >::allocator_type":
        return _cstl.MapLongVecMapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapLongVecMapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecMapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapLongVecMapStrDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecMapStrDouble

# Register MapLongVecMapStrDouble in _cstl:
_cstl.MapLongVecMapStrDouble_swigregister(MapLongVecMapStrDouble)

class MapLongVecMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecMapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapLongVecMapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,bool > > >::mapped_type const &":
        return _cstl.MapLongVecMapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,bool > > >::key_type const &") -> "void":
        return _cstl.MapLongVecMapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecMapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecMapStrBool_swiginit(self, _cstl.new_MapLongVecMapStrBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecMapStrBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapLongVecMapStrBool_size(self)

    def swap(self, v: "MapLongVecMapStrBool") -> "void":
        return _cstl.MapLongVecMapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapLongVecMapStrBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapLongVecMapStrBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecMapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,bool > > >::allocator_type":
        return _cstl.MapLongVecMapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapLongVecMapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecMapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapLongVecMapStrBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecMapStrBool

# Register MapLongVecMapStrBool in _cstl:
_cstl.MapLongVecMapStrBool_swigregister(MapLongVecMapStrBool)

class MapLongVecMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecMapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapLongVecMapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongVecMapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongVecMapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecMapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecMapStrLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecMapStrLong_swiginit(self, _cstl.new_MapLongVecMapStrLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecMapStrLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapLongVecMapStrLong_size(self)

    def swap(self, v: "MapLongVecMapStrLong") -> "void":
        return _cstl.MapLongVecMapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapLongVecMapStrLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapLongVecMapStrLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecMapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::int64_t > > >::allocator_type":
        return _cstl.MapLongVecMapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapLongVecMapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecMapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapLongVecMapStrLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecMapStrLong

# Register MapLongVecMapStrLong in _cstl:
_cstl.MapLongVecMapStrLong_swigregister(MapLongVecMapStrLong)

class MapLongVecMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecMapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapLongVecMapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,int > > >::mapped_type const &":
        return _cstl.MapLongVecMapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,int > > >::key_type const &") -> "void":
        return _cstl.MapLongVecMapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecMapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecMapLongInt_swiginit(self, _cstl.new_MapLongVecMapLongInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecMapLongInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapLongVecMapLongInt_size(self)

    def swap(self, v: "MapLongVecMapLongInt") -> "void":
        return _cstl.MapLongVecMapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapLongVecMapLongInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapLongVecMapLongInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecMapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,int > > >::allocator_type":
        return _cstl.MapLongVecMapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapLongVecMapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecMapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapLongVecMapLongInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecMapLongInt

# Register MapLongVecMapLongInt in _cstl:
_cstl.MapLongVecMapLongInt_swigregister(MapLongVecMapLongInt)

class MapLongVecMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecMapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapLongVecMapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::string > > >::mapped_type const &":
        return _cstl.MapLongVecMapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongVecMapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecMapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecMapLongStr_swiginit(self, _cstl.new_MapLongVecMapLongStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecMapLongStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapLongVecMapLongStr_size(self)

    def swap(self, v: "MapLongVecMapLongStr") -> "void":
        return _cstl.MapLongVecMapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapLongVecMapLongStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapLongVecMapLongStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecMapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::string > > >::allocator_type":
        return _cstl.MapLongVecMapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapLongVecMapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecMapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapLongVecMapLongStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecMapLongStr

# Register MapLongVecMapLongStr in _cstl:
_cstl.MapLongVecMapLongStr_swigregister(MapLongVecMapLongStr)

class MapLongVecMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecMapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapLongVecMapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,float > > >::mapped_type const &":
        return _cstl.MapLongVecMapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,float > > >::key_type const &") -> "void":
        return _cstl.MapLongVecMapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecMapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecMapLongFloat_swiginit(self, _cstl.new_MapLongVecMapLongFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecMapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapLongVecMapLongFloat_size(self)

    def swap(self, v: "MapLongVecMapLongFloat") -> "void":
        return _cstl.MapLongVecMapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapLongVecMapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapLongVecMapLongFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecMapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,float > > >::allocator_type":
        return _cstl.MapLongVecMapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapLongVecMapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecMapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapLongVecMapLongFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecMapLongFloat

# Register MapLongVecMapLongFloat in _cstl:
_cstl.MapLongVecMapLongFloat_swigregister(MapLongVecMapLongFloat)

class MapLongVecMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecMapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapLongVecMapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,double > > >::mapped_type const &":
        return _cstl.MapLongVecMapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,double > > >::key_type const &") -> "void":
        return _cstl.MapLongVecMapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecMapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecMapLongDouble_swiginit(self, _cstl.new_MapLongVecMapLongDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecMapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapLongVecMapLongDouble_size(self)

    def swap(self, v: "MapLongVecMapLongDouble") -> "void":
        return _cstl.MapLongVecMapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapLongVecMapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapLongVecMapLongDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecMapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,double > > >::allocator_type":
        return _cstl.MapLongVecMapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapLongVecMapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecMapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapLongVecMapLongDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecMapLongDouble

# Register MapLongVecMapLongDouble in _cstl:
_cstl.MapLongVecMapLongDouble_swigregister(MapLongVecMapLongDouble)

class MapLongVecMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecMapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapLongVecMapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,bool > > >::mapped_type const &":
        return _cstl.MapLongVecMapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "void":
        return _cstl.MapLongVecMapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecMapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecMapLongBool_swiginit(self, _cstl.new_MapLongVecMapLongBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecMapLongBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapLongVecMapLongBool_size(self)

    def swap(self, v: "MapLongVecMapLongBool") -> "void":
        return _cstl.MapLongVecMapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapLongVecMapLongBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapLongVecMapLongBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecMapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,bool > > >::allocator_type":
        return _cstl.MapLongVecMapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapLongVecMapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecMapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapLongVecMapLongBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecMapLongBool

# Register MapLongVecMapLongBool in _cstl:
_cstl.MapLongVecMapLongBool_swigregister(MapLongVecMapLongBool)

class MapLongVecMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongVecMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongVecMapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapLongVecMapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongVecMapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongVecMapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongVecMapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongVecMapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongVecMapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongVecMapLongLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongVecMapLongLong_swiginit(self, _cstl.new_MapLongVecMapLongLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongVecMapLongLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapLongVecMapLongLong_size(self)

    def swap(self, v: "MapLongVecMapLongLong") -> "void":
        return _cstl.MapLongVecMapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapLongVecMapLongLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapLongVecMapLongLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongVecMapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::allocator_type":
        return _cstl.MapLongVecMapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapLongVecMapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongVecMapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::vector< std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapLongVecMapLongLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongVecMapLongLong

# Register MapLongVecMapLongLong in _cstl:
_cstl.MapLongVecMapLongLong_swigregister(MapLongVecMapLongLong)

class MapLongMapIntVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntVecInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< int > > >::size_type":
        return _cstl.MapLongMapIntVecInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< int > > >::mapped_type const &":
        return _cstl.MapLongMapIntVecInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< int > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntVecInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntVecInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntVecInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntVecInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntVecInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntVecInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntVecInt_swiginit(self, _cstl.new_MapLongMapIntVecInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntVecInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< int > > >::size_type":
        return _cstl.MapLongMapIntVecInt_size(self)

    def swap(self, v: "MapLongMapIntVecInt") -> "void":
        return _cstl.MapLongMapIntVecInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< int > > >::iterator":
        return _cstl.MapLongMapIntVecInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< int > > >::iterator":
        return _cstl.MapLongMapIntVecInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntVecInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< int > > >::allocator_type":
        return _cstl.MapLongMapIntVecInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< int > > >::size_type":
        return _cstl.MapLongMapIntVecInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntVecInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< int > > >::iterator":
        return _cstl.MapLongMapIntVecInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntVecInt

# Register MapLongMapIntVecInt in _cstl:
_cstl.MapLongMapIntVecInt_swigregister(MapLongMapIntVecInt)

class MapLongMapIntVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntVecStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::string > > >::size_type":
        return _cstl.MapLongMapIntVecStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::string > > >::mapped_type const &":
        return _cstl.MapLongMapIntVecStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntVecStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntVecStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntVecStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntVecStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntVecStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntVecStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntVecStr_swiginit(self, _cstl.new_MapLongMapIntVecStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntVecStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::string > > >::size_type":
        return _cstl.MapLongMapIntVecStr_size(self)

    def swap(self, v: "MapLongMapIntVecStr") -> "void":
        return _cstl.MapLongMapIntVecStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::string > > >::iterator":
        return _cstl.MapLongMapIntVecStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::string > > >::iterator":
        return _cstl.MapLongMapIntVecStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntVecStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::string > > >::allocator_type":
        return _cstl.MapLongMapIntVecStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::string > > >::size_type":
        return _cstl.MapLongMapIntVecStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntVecStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::string > > >::iterator":
        return _cstl.MapLongMapIntVecStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntVecStr

# Register MapLongMapIntVecStr in _cstl:
_cstl.MapLongMapIntVecStr_swigregister(MapLongMapIntVecStr)

class MapLongMapIntVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntVecFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< float > > >::size_type":
        return _cstl.MapLongMapIntVecFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< float > > >::mapped_type const &":
        return _cstl.MapLongMapIntVecFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< float > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntVecFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntVecFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntVecFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntVecFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntVecFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntVecFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntVecFloat_swiginit(self, _cstl.new_MapLongMapIntVecFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntVecFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< float > > >::size_type":
        return _cstl.MapLongMapIntVecFloat_size(self)

    def swap(self, v: "MapLongMapIntVecFloat") -> "void":
        return _cstl.MapLongMapIntVecFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< float > > >::iterator":
        return _cstl.MapLongMapIntVecFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< float > > >::iterator":
        return _cstl.MapLongMapIntVecFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntVecFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< float > > >::allocator_type":
        return _cstl.MapLongMapIntVecFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< float > > >::size_type":
        return _cstl.MapLongMapIntVecFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntVecFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< float > > >::iterator":
        return _cstl.MapLongMapIntVecFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntVecFloat

# Register MapLongMapIntVecFloat in _cstl:
_cstl.MapLongMapIntVecFloat_swigregister(MapLongMapIntVecFloat)

class MapLongMapIntVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntVecDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< double > > >::size_type":
        return _cstl.MapLongMapIntVecDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< double > > >::mapped_type const &":
        return _cstl.MapLongMapIntVecDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< double > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntVecDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntVecDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntVecDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntVecDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntVecDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntVecDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntVecDouble_swiginit(self, _cstl.new_MapLongMapIntVecDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntVecDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< double > > >::size_type":
        return _cstl.MapLongMapIntVecDouble_size(self)

    def swap(self, v: "MapLongMapIntVecDouble") -> "void":
        return _cstl.MapLongMapIntVecDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< double > > >::iterator":
        return _cstl.MapLongMapIntVecDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< double > > >::iterator":
        return _cstl.MapLongMapIntVecDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntVecDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< double > > >::allocator_type":
        return _cstl.MapLongMapIntVecDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< double > > >::size_type":
        return _cstl.MapLongMapIntVecDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntVecDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< double > > >::iterator":
        return _cstl.MapLongMapIntVecDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntVecDouble

# Register MapLongMapIntVecDouble in _cstl:
_cstl.MapLongMapIntVecDouble_swigregister(MapLongMapIntVecDouble)

class MapLongMapIntVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntVecBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< bool > > >::size_type":
        return _cstl.MapLongMapIntVecBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< bool > > >::mapped_type const &":
        return _cstl.MapLongMapIntVecBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< bool > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntVecBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntVecBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntVecBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntVecBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntVecBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntVecBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntVecBool_swiginit(self, _cstl.new_MapLongMapIntVecBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntVecBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< bool > > >::size_type":
        return _cstl.MapLongMapIntVecBool_size(self)

    def swap(self, v: "MapLongMapIntVecBool") -> "void":
        return _cstl.MapLongMapIntVecBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< bool > > >::iterator":
        return _cstl.MapLongMapIntVecBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< bool > > >::iterator":
        return _cstl.MapLongMapIntVecBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntVecBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< bool > > >::allocator_type":
        return _cstl.MapLongMapIntVecBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< bool > > >::size_type":
        return _cstl.MapLongMapIntVecBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntVecBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< bool > > >::iterator":
        return _cstl.MapLongMapIntVecBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntVecBool

# Register MapLongMapIntVecBool in _cstl:
_cstl.MapLongMapIntVecBool_swigregister(MapLongMapIntVecBool)

class MapLongMapIntVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntVecLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapLongMapIntVecLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongMapIntVecLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntVecLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntVecLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntVecLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntVecLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntVecLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntVecLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntVecLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntVecLong_swiginit(self, _cstl.new_MapLongMapIntVecLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntVecLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapLongMapIntVecLong_size(self)

    def swap(self, v: "MapLongMapIntVecLong") -> "void":
        return _cstl.MapLongMapIntVecLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapLongMapIntVecLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapLongMapIntVecLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntVecLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::int64_t > > >::allocator_type":
        return _cstl.MapLongMapIntVecLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapLongMapIntVecLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntVecLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapLongMapIntVecLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntVecLong

# Register MapLongMapIntVecLong in _cstl:
_cstl.MapLongMapIntVecLong_swigregister(MapLongMapIntVecLong)

class MapLongMapIntSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntSetInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< int > > >::size_type":
        return _cstl.MapLongMapIntSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< int > > >::mapped_type const &":
        return _cstl.MapLongMapIntSetInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< int > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntSetInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntSetInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntSetInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntSetInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntSetInt_swiginit(self, _cstl.new_MapLongMapIntSetInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntSetInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< int > > >::size_type":
        return _cstl.MapLongMapIntSetInt_size(self)

    def swap(self, v: "MapLongMapIntSetInt") -> "void":
        return _cstl.MapLongMapIntSetInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< int > > >::iterator":
        return _cstl.MapLongMapIntSetInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< int > > >::iterator":
        return _cstl.MapLongMapIntSetInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntSetInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< int > > >::allocator_type":
        return _cstl.MapLongMapIntSetInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< int > > >::size_type":
        return _cstl.MapLongMapIntSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntSetInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< int > > >::iterator":
        return _cstl.MapLongMapIntSetInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntSetInt

# Register MapLongMapIntSetInt in _cstl:
_cstl.MapLongMapIntSetInt_swigregister(MapLongMapIntSetInt)

class MapLongMapIntSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntSetStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapLongMapIntSetStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::string > > >::mapped_type const &":
        return _cstl.MapLongMapIntSetStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntSetStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntSetStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntSetStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntSetStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntSetStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntSetStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntSetStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntSetStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntSetStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntSetStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntSetStr_swiginit(self, _cstl.new_MapLongMapIntSetStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntSetStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapLongMapIntSetStr_size(self)

    def swap(self, v: "MapLongMapIntSetStr") -> "void":
        return _cstl.MapLongMapIntSetStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapLongMapIntSetStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapLongMapIntSetStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntSetStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::string > > >::allocator_type":
        return _cstl.MapLongMapIntSetStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapLongMapIntSetStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntSetStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapLongMapIntSetStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntSetStr

# Register MapLongMapIntSetStr in _cstl:
_cstl.MapLongMapIntSetStr_swigregister(MapLongMapIntSetStr)

class MapLongMapIntSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntSetLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapLongMapIntSetLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongMapIntSetLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntSetLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntSetLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntSetLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntSetLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntSetLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntSetLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntSetLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntSetLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntSetLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntSetLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntSetLong_swiginit(self, _cstl.new_MapLongMapIntSetLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntSetLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapLongMapIntSetLong_size(self)

    def swap(self, v: "MapLongMapIntSetLong") -> "void":
        return _cstl.MapLongMapIntSetLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapLongMapIntSetLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapLongMapIntSetLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntSetLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::int64_t > > >::allocator_type":
        return _cstl.MapLongMapIntSetLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapLongMapIntSetLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntSetLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapLongMapIntSetLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntSetLong

# Register MapLongMapIntSetLong in _cstl:
_cstl.MapLongMapIntSetLong_swigregister(MapLongMapIntSetLong)

class MapLongMapIntMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntMapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapLongMapIntMapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,int > > >::mapped_type const &":
        return _cstl.MapLongMapIntMapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,int > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntMapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntMapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntMapIntInt_swiginit(self, _cstl.new_MapLongMapIntMapIntInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntMapIntInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapLongMapIntMapIntInt_size(self)

    def swap(self, v: "MapLongMapIntMapIntInt") -> "void":
        return _cstl.MapLongMapIntMapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapLongMapIntMapIntInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapLongMapIntMapIntInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntMapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,int > > >::allocator_type":
        return _cstl.MapLongMapIntMapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapLongMapIntMapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntMapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapLongMapIntMapIntInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntMapIntInt

# Register MapLongMapIntMapIntInt in _cstl:
_cstl.MapLongMapIntMapIntInt_swigregister(MapLongMapIntMapIntInt)

class MapLongMapIntMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntMapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapLongMapIntMapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::string > > >::mapped_type const &":
        return _cstl.MapLongMapIntMapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntMapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntMapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntMapIntStr_swiginit(self, _cstl.new_MapLongMapIntMapIntStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntMapIntStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapLongMapIntMapIntStr_size(self)

    def swap(self, v: "MapLongMapIntMapIntStr") -> "void":
        return _cstl.MapLongMapIntMapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapLongMapIntMapIntStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapLongMapIntMapIntStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntMapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::string > > >::allocator_type":
        return _cstl.MapLongMapIntMapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapLongMapIntMapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntMapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapLongMapIntMapIntStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntMapIntStr

# Register MapLongMapIntMapIntStr in _cstl:
_cstl.MapLongMapIntMapIntStr_swigregister(MapLongMapIntMapIntStr)

class MapLongMapIntMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntMapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapLongMapIntMapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,float > > >::mapped_type const &":
        return _cstl.MapLongMapIntMapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,float > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntMapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntMapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntMapIntFloat_swiginit(self, _cstl.new_MapLongMapIntMapIntFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntMapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapLongMapIntMapIntFloat_size(self)

    def swap(self, v: "MapLongMapIntMapIntFloat") -> "void":
        return _cstl.MapLongMapIntMapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapLongMapIntMapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapLongMapIntMapIntFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntMapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,float > > >::allocator_type":
        return _cstl.MapLongMapIntMapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapLongMapIntMapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntMapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapLongMapIntMapIntFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntMapIntFloat

# Register MapLongMapIntMapIntFloat in _cstl:
_cstl.MapLongMapIntMapIntFloat_swigregister(MapLongMapIntMapIntFloat)

class MapLongMapIntMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntMapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapLongMapIntMapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,double > > >::mapped_type const &":
        return _cstl.MapLongMapIntMapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,double > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntMapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntMapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntMapIntDouble_swiginit(self, _cstl.new_MapLongMapIntMapIntDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntMapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapLongMapIntMapIntDouble_size(self)

    def swap(self, v: "MapLongMapIntMapIntDouble") -> "void":
        return _cstl.MapLongMapIntMapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapLongMapIntMapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapLongMapIntMapIntDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntMapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,double > > >::allocator_type":
        return _cstl.MapLongMapIntMapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapLongMapIntMapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntMapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapLongMapIntMapIntDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntMapIntDouble

# Register MapLongMapIntMapIntDouble in _cstl:
_cstl.MapLongMapIntMapIntDouble_swigregister(MapLongMapIntMapIntDouble)

class MapLongMapIntMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntMapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapLongMapIntMapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,bool > > >::mapped_type const &":
        return _cstl.MapLongMapIntMapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,bool > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntMapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntMapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntMapIntBool_swiginit(self, _cstl.new_MapLongMapIntMapIntBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntMapIntBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapLongMapIntMapIntBool_size(self)

    def swap(self, v: "MapLongMapIntMapIntBool") -> "void":
        return _cstl.MapLongMapIntMapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapLongMapIntMapIntBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapLongMapIntMapIntBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntMapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,bool > > >::allocator_type":
        return _cstl.MapLongMapIntMapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapLongMapIntMapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntMapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapLongMapIntMapIntBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntMapIntBool

# Register MapLongMapIntMapIntBool in _cstl:
_cstl.MapLongMapIntMapIntBool_swigregister(MapLongMapIntMapIntBool)

class MapLongMapIntMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntMapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapLongMapIntMapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongMapIntMapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntMapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntMapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapIntLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntMapIntLong_swiginit(self, _cstl.new_MapLongMapIntMapIntLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntMapIntLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapLongMapIntMapIntLong_size(self)

    def swap(self, v: "MapLongMapIntMapIntLong") -> "void":
        return _cstl.MapLongMapIntMapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapLongMapIntMapIntLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapLongMapIntMapIntLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntMapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::allocator_type":
        return _cstl.MapLongMapIntMapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapLongMapIntMapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntMapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapLongMapIntMapIntLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntMapIntLong

# Register MapLongMapIntMapIntLong in _cstl:
_cstl.MapLongMapIntMapIntLong_swigregister(MapLongMapIntMapIntLong)

class MapLongMapIntMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntMapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapLongMapIntMapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,int > > >::mapped_type const &":
        return _cstl.MapLongMapIntMapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,int > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntMapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntMapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntMapStrInt_swiginit(self, _cstl.new_MapLongMapIntMapStrInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntMapStrInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapLongMapIntMapStrInt_size(self)

    def swap(self, v: "MapLongMapIntMapStrInt") -> "void":
        return _cstl.MapLongMapIntMapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapLongMapIntMapStrInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapLongMapIntMapStrInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntMapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,int > > >::allocator_type":
        return _cstl.MapLongMapIntMapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapLongMapIntMapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntMapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapLongMapIntMapStrInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntMapStrInt

# Register MapLongMapIntMapStrInt in _cstl:
_cstl.MapLongMapIntMapStrInt_swigregister(MapLongMapIntMapStrInt)

class MapLongMapIntMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntMapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapLongMapIntMapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::mapped_type const &":
        return _cstl.MapLongMapIntMapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntMapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntMapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntMapStrStr_swiginit(self, _cstl.new_MapLongMapIntMapStrStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntMapStrStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapLongMapIntMapStrStr_size(self)

    def swap(self, v: "MapLongMapIntMapStrStr") -> "void":
        return _cstl.MapLongMapIntMapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapLongMapIntMapStrStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapLongMapIntMapStrStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntMapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::allocator_type":
        return _cstl.MapLongMapIntMapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapLongMapIntMapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntMapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapLongMapIntMapStrStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntMapStrStr

# Register MapLongMapIntMapStrStr in _cstl:
_cstl.MapLongMapIntMapStrStr_swigregister(MapLongMapIntMapStrStr)

class MapLongMapIntMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntMapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapLongMapIntMapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,float > > >::mapped_type const &":
        return _cstl.MapLongMapIntMapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,float > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntMapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntMapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntMapStrFloat_swiginit(self, _cstl.new_MapLongMapIntMapStrFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntMapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapLongMapIntMapStrFloat_size(self)

    def swap(self, v: "MapLongMapIntMapStrFloat") -> "void":
        return _cstl.MapLongMapIntMapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapLongMapIntMapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapLongMapIntMapStrFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntMapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,float > > >::allocator_type":
        return _cstl.MapLongMapIntMapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapLongMapIntMapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntMapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapLongMapIntMapStrFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntMapStrFloat

# Register MapLongMapIntMapStrFloat in _cstl:
_cstl.MapLongMapIntMapStrFloat_swigregister(MapLongMapIntMapStrFloat)

class MapLongMapIntMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntMapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapLongMapIntMapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,double > > >::mapped_type const &":
        return _cstl.MapLongMapIntMapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,double > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntMapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntMapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntMapStrDouble_swiginit(self, _cstl.new_MapLongMapIntMapStrDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntMapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapLongMapIntMapStrDouble_size(self)

    def swap(self, v: "MapLongMapIntMapStrDouble") -> "void":
        return _cstl.MapLongMapIntMapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapLongMapIntMapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapLongMapIntMapStrDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntMapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,double > > >::allocator_type":
        return _cstl.MapLongMapIntMapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapLongMapIntMapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntMapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapLongMapIntMapStrDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntMapStrDouble

# Register MapLongMapIntMapStrDouble in _cstl:
_cstl.MapLongMapIntMapStrDouble_swigregister(MapLongMapIntMapStrDouble)

class MapLongMapIntMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntMapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapLongMapIntMapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,bool > > >::mapped_type const &":
        return _cstl.MapLongMapIntMapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,bool > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntMapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntMapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntMapStrBool_swiginit(self, _cstl.new_MapLongMapIntMapStrBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntMapStrBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapLongMapIntMapStrBool_size(self)

    def swap(self, v: "MapLongMapIntMapStrBool") -> "void":
        return _cstl.MapLongMapIntMapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapLongMapIntMapStrBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapLongMapIntMapStrBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntMapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,bool > > >::allocator_type":
        return _cstl.MapLongMapIntMapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapLongMapIntMapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntMapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapLongMapIntMapStrBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntMapStrBool

# Register MapLongMapIntMapStrBool in _cstl:
_cstl.MapLongMapIntMapStrBool_swigregister(MapLongMapIntMapStrBool)

class MapLongMapIntMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntMapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapLongMapIntMapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongMapIntMapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntMapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntMapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapStrLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntMapStrLong_swiginit(self, _cstl.new_MapLongMapIntMapStrLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntMapStrLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapLongMapIntMapStrLong_size(self)

    def swap(self, v: "MapLongMapIntMapStrLong") -> "void":
        return _cstl.MapLongMapIntMapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapLongMapIntMapStrLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapLongMapIntMapStrLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntMapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::allocator_type":
        return _cstl.MapLongMapIntMapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapLongMapIntMapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntMapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapLongMapIntMapStrLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntMapStrLong

# Register MapLongMapIntMapStrLong in _cstl:
_cstl.MapLongMapIntMapStrLong_swigregister(MapLongMapIntMapStrLong)

class MapLongMapIntMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntMapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapLongMapIntMapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::mapped_type const &":
        return _cstl.MapLongMapIntMapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntMapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntMapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntMapLongInt_swiginit(self, _cstl.new_MapLongMapIntMapLongInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntMapLongInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapLongMapIntMapLongInt_size(self)

    def swap(self, v: "MapLongMapIntMapLongInt") -> "void":
        return _cstl.MapLongMapIntMapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapLongMapIntMapLongInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapLongMapIntMapLongInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntMapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::allocator_type":
        return _cstl.MapLongMapIntMapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapLongMapIntMapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntMapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapLongMapIntMapLongInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntMapLongInt

# Register MapLongMapIntMapLongInt in _cstl:
_cstl.MapLongMapIntMapLongInt_swigregister(MapLongMapIntMapLongInt)

class MapLongMapIntMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntMapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapLongMapIntMapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::mapped_type const &":
        return _cstl.MapLongMapIntMapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntMapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntMapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntMapLongStr_swiginit(self, _cstl.new_MapLongMapIntMapLongStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntMapLongStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapLongMapIntMapLongStr_size(self)

    def swap(self, v: "MapLongMapIntMapLongStr") -> "void":
        return _cstl.MapLongMapIntMapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapLongMapIntMapLongStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapLongMapIntMapLongStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntMapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::allocator_type":
        return _cstl.MapLongMapIntMapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapLongMapIntMapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntMapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapLongMapIntMapLongStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntMapLongStr

# Register MapLongMapIntMapLongStr in _cstl:
_cstl.MapLongMapIntMapLongStr_swigregister(MapLongMapIntMapLongStr)

class MapLongMapIntMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntMapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapLongMapIntMapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::mapped_type const &":
        return _cstl.MapLongMapIntMapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntMapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntMapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntMapLongFloat_swiginit(self, _cstl.new_MapLongMapIntMapLongFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntMapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapLongMapIntMapLongFloat_size(self)

    def swap(self, v: "MapLongMapIntMapLongFloat") -> "void":
        return _cstl.MapLongMapIntMapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapLongMapIntMapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapLongMapIntMapLongFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntMapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::allocator_type":
        return _cstl.MapLongMapIntMapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapLongMapIntMapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntMapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapLongMapIntMapLongFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntMapLongFloat

# Register MapLongMapIntMapLongFloat in _cstl:
_cstl.MapLongMapIntMapLongFloat_swigregister(MapLongMapIntMapLongFloat)

class MapLongMapIntMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntMapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapLongMapIntMapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::mapped_type const &":
        return _cstl.MapLongMapIntMapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntMapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntMapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntMapLongDouble_swiginit(self, _cstl.new_MapLongMapIntMapLongDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntMapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapLongMapIntMapLongDouble_size(self)

    def swap(self, v: "MapLongMapIntMapLongDouble") -> "void":
        return _cstl.MapLongMapIntMapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapLongMapIntMapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapLongMapIntMapLongDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntMapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::allocator_type":
        return _cstl.MapLongMapIntMapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapLongMapIntMapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntMapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapLongMapIntMapLongDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntMapLongDouble

# Register MapLongMapIntMapLongDouble in _cstl:
_cstl.MapLongMapIntMapLongDouble_swigregister(MapLongMapIntMapLongDouble)

class MapLongMapIntMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntMapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapLongMapIntMapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::mapped_type const &":
        return _cstl.MapLongMapIntMapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntMapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntMapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntMapLongBool_swiginit(self, _cstl.new_MapLongMapIntMapLongBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntMapLongBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapLongMapIntMapLongBool_size(self)

    def swap(self, v: "MapLongMapIntMapLongBool") -> "void":
        return _cstl.MapLongMapIntMapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapLongMapIntMapLongBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapLongMapIntMapLongBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntMapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::allocator_type":
        return _cstl.MapLongMapIntMapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapLongMapIntMapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntMapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapLongMapIntMapLongBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntMapLongBool

# Register MapLongMapIntMapLongBool in _cstl:
_cstl.MapLongMapIntMapLongBool_swigregister(MapLongMapIntMapLongBool)

class MapLongMapIntMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapIntMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapIntMapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapLongMapIntMapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongMapIntMapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongMapIntMapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapIntMapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapIntMapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapIntMapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapIntMapLongLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapIntMapLongLong_swiginit(self, _cstl.new_MapLongMapIntMapLongLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapIntMapLongLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapLongMapIntMapLongLong_size(self)

    def swap(self, v: "MapLongMapIntMapLongLong") -> "void":
        return _cstl.MapLongMapIntMapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapLongMapIntMapLongLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapLongMapIntMapLongLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapIntMapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::allocator_type":
        return _cstl.MapLongMapIntMapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapLongMapIntMapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapIntMapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< int,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapLongMapIntMapLongLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapIntMapLongLong

# Register MapLongMapIntMapLongLong in _cstl:
_cstl.MapLongMapIntMapLongLong_swigregister(MapLongMapIntMapLongLong)

class MapLongMapStrVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrVecInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< int > > >::size_type":
        return _cstl.MapLongMapStrVecInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< int > > >::mapped_type const &":
        return _cstl.MapLongMapStrVecInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< int > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrVecInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrVecInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrVecInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrVecInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrVecInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrVecInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrVecInt_swiginit(self, _cstl.new_MapLongMapStrVecInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrVecInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< int > > >::size_type":
        return _cstl.MapLongMapStrVecInt_size(self)

    def swap(self, v: "MapLongMapStrVecInt") -> "void":
        return _cstl.MapLongMapStrVecInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< int > > >::iterator":
        return _cstl.MapLongMapStrVecInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< int > > >::iterator":
        return _cstl.MapLongMapStrVecInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrVecInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< int > > >::allocator_type":
        return _cstl.MapLongMapStrVecInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< int > > >::size_type":
        return _cstl.MapLongMapStrVecInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrVecInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< int > > >::iterator":
        return _cstl.MapLongMapStrVecInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrVecInt

# Register MapLongMapStrVecInt in _cstl:
_cstl.MapLongMapStrVecInt_swigregister(MapLongMapStrVecInt)

class MapLongMapStrVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrVecStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::string > > >::size_type":
        return _cstl.MapLongMapStrVecStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::string > > >::mapped_type const &":
        return _cstl.MapLongMapStrVecStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrVecStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrVecStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrVecStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrVecStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrVecStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrVecStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrVecStr_swiginit(self, _cstl.new_MapLongMapStrVecStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrVecStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::string > > >::size_type":
        return _cstl.MapLongMapStrVecStr_size(self)

    def swap(self, v: "MapLongMapStrVecStr") -> "void":
        return _cstl.MapLongMapStrVecStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::string > > >::iterator":
        return _cstl.MapLongMapStrVecStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::string > > >::iterator":
        return _cstl.MapLongMapStrVecStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrVecStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::string > > >::allocator_type":
        return _cstl.MapLongMapStrVecStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::string > > >::size_type":
        return _cstl.MapLongMapStrVecStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrVecStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::string > > >::iterator":
        return _cstl.MapLongMapStrVecStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrVecStr

# Register MapLongMapStrVecStr in _cstl:
_cstl.MapLongMapStrVecStr_swigregister(MapLongMapStrVecStr)

class MapLongMapStrVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrVecFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< float > > >::size_type":
        return _cstl.MapLongMapStrVecFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< float > > >::mapped_type const &":
        return _cstl.MapLongMapStrVecFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< float > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrVecFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrVecFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrVecFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrVecFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrVecFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrVecFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrVecFloat_swiginit(self, _cstl.new_MapLongMapStrVecFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrVecFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< float > > >::size_type":
        return _cstl.MapLongMapStrVecFloat_size(self)

    def swap(self, v: "MapLongMapStrVecFloat") -> "void":
        return _cstl.MapLongMapStrVecFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< float > > >::iterator":
        return _cstl.MapLongMapStrVecFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< float > > >::iterator":
        return _cstl.MapLongMapStrVecFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrVecFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< float > > >::allocator_type":
        return _cstl.MapLongMapStrVecFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< float > > >::size_type":
        return _cstl.MapLongMapStrVecFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrVecFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< float > > >::iterator":
        return _cstl.MapLongMapStrVecFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrVecFloat

# Register MapLongMapStrVecFloat in _cstl:
_cstl.MapLongMapStrVecFloat_swigregister(MapLongMapStrVecFloat)

class MapLongMapStrVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrVecDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< double > > >::size_type":
        return _cstl.MapLongMapStrVecDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< double > > >::mapped_type const &":
        return _cstl.MapLongMapStrVecDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< double > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrVecDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrVecDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrVecDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrVecDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrVecDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrVecDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrVecDouble_swiginit(self, _cstl.new_MapLongMapStrVecDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrVecDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< double > > >::size_type":
        return _cstl.MapLongMapStrVecDouble_size(self)

    def swap(self, v: "MapLongMapStrVecDouble") -> "void":
        return _cstl.MapLongMapStrVecDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< double > > >::iterator":
        return _cstl.MapLongMapStrVecDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< double > > >::iterator":
        return _cstl.MapLongMapStrVecDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrVecDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< double > > >::allocator_type":
        return _cstl.MapLongMapStrVecDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< double > > >::size_type":
        return _cstl.MapLongMapStrVecDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrVecDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< double > > >::iterator":
        return _cstl.MapLongMapStrVecDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrVecDouble

# Register MapLongMapStrVecDouble in _cstl:
_cstl.MapLongMapStrVecDouble_swigregister(MapLongMapStrVecDouble)

class MapLongMapStrVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrVecBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< bool > > >::size_type":
        return _cstl.MapLongMapStrVecBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< bool > > >::mapped_type const &":
        return _cstl.MapLongMapStrVecBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< bool > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrVecBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrVecBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrVecBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrVecBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrVecBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrVecBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrVecBool_swiginit(self, _cstl.new_MapLongMapStrVecBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrVecBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< bool > > >::size_type":
        return _cstl.MapLongMapStrVecBool_size(self)

    def swap(self, v: "MapLongMapStrVecBool") -> "void":
        return _cstl.MapLongMapStrVecBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< bool > > >::iterator":
        return _cstl.MapLongMapStrVecBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< bool > > >::iterator":
        return _cstl.MapLongMapStrVecBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrVecBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< bool > > >::allocator_type":
        return _cstl.MapLongMapStrVecBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< bool > > >::size_type":
        return _cstl.MapLongMapStrVecBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrVecBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< bool > > >::iterator":
        return _cstl.MapLongMapStrVecBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrVecBool

# Register MapLongMapStrVecBool in _cstl:
_cstl.MapLongMapStrVecBool_swigregister(MapLongMapStrVecBool)

class MapLongMapStrVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrVecLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapLongMapStrVecLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongMapStrVecLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrVecLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrVecLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrVecLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrVecLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrVecLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrVecLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrVecLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrVecLong_swiginit(self, _cstl.new_MapLongMapStrVecLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrVecLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapLongMapStrVecLong_size(self)

    def swap(self, v: "MapLongMapStrVecLong") -> "void":
        return _cstl.MapLongMapStrVecLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapLongMapStrVecLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapLongMapStrVecLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrVecLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::int64_t > > >::allocator_type":
        return _cstl.MapLongMapStrVecLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapLongMapStrVecLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrVecLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapLongMapStrVecLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrVecLong

# Register MapLongMapStrVecLong in _cstl:
_cstl.MapLongMapStrVecLong_swigregister(MapLongMapStrVecLong)

class MapLongMapStrSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrSetInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< int > > >::size_type":
        return _cstl.MapLongMapStrSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< int > > >::mapped_type const &":
        return _cstl.MapLongMapStrSetInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< int > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrSetInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrSetInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrSetInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrSetInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrSetInt_swiginit(self, _cstl.new_MapLongMapStrSetInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrSetInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< int > > >::size_type":
        return _cstl.MapLongMapStrSetInt_size(self)

    def swap(self, v: "MapLongMapStrSetInt") -> "void":
        return _cstl.MapLongMapStrSetInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< int > > >::iterator":
        return _cstl.MapLongMapStrSetInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< int > > >::iterator":
        return _cstl.MapLongMapStrSetInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrSetInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< int > > >::allocator_type":
        return _cstl.MapLongMapStrSetInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< int > > >::size_type":
        return _cstl.MapLongMapStrSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrSetInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< int > > >::iterator":
        return _cstl.MapLongMapStrSetInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrSetInt

# Register MapLongMapStrSetInt in _cstl:
_cstl.MapLongMapStrSetInt_swigregister(MapLongMapStrSetInt)

class MapLongMapStrSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrSetStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapLongMapStrSetStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::string > > >::mapped_type const &":
        return _cstl.MapLongMapStrSetStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrSetStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrSetStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrSetStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrSetStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrSetStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrSetStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrSetStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrSetStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrSetStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrSetStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrSetStr_swiginit(self, _cstl.new_MapLongMapStrSetStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrSetStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapLongMapStrSetStr_size(self)

    def swap(self, v: "MapLongMapStrSetStr") -> "void":
        return _cstl.MapLongMapStrSetStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapLongMapStrSetStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapLongMapStrSetStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrSetStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::string > > >::allocator_type":
        return _cstl.MapLongMapStrSetStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapLongMapStrSetStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrSetStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapLongMapStrSetStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrSetStr

# Register MapLongMapStrSetStr in _cstl:
_cstl.MapLongMapStrSetStr_swigregister(MapLongMapStrSetStr)

class MapLongMapStrSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrSetLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapLongMapStrSetLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongMapStrSetLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrSetLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrSetLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrSetLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrSetLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrSetLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrSetLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrSetLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrSetLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrSetLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrSetLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrSetLong_swiginit(self, _cstl.new_MapLongMapStrSetLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrSetLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapLongMapStrSetLong_size(self)

    def swap(self, v: "MapLongMapStrSetLong") -> "void":
        return _cstl.MapLongMapStrSetLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapLongMapStrSetLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapLongMapStrSetLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrSetLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::allocator_type":
        return _cstl.MapLongMapStrSetLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapLongMapStrSetLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrSetLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapLongMapStrSetLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrSetLong

# Register MapLongMapStrSetLong in _cstl:
_cstl.MapLongMapStrSetLong_swigregister(MapLongMapStrSetLong)

class MapLongMapStrMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrMapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapLongMapStrMapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,int > > >::mapped_type const &":
        return _cstl.MapLongMapStrMapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,int > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrMapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrMapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrMapIntInt_swiginit(self, _cstl.new_MapLongMapStrMapIntInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrMapIntInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapLongMapStrMapIntInt_size(self)

    def swap(self, v: "MapLongMapStrMapIntInt") -> "void":
        return _cstl.MapLongMapStrMapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapLongMapStrMapIntInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapLongMapStrMapIntInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrMapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,int > > >::allocator_type":
        return _cstl.MapLongMapStrMapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapLongMapStrMapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrMapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapLongMapStrMapIntInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrMapIntInt

# Register MapLongMapStrMapIntInt in _cstl:
_cstl.MapLongMapStrMapIntInt_swigregister(MapLongMapStrMapIntInt)

class MapLongMapStrMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrMapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapLongMapStrMapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::mapped_type const &":
        return _cstl.MapLongMapStrMapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrMapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrMapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrMapIntStr_swiginit(self, _cstl.new_MapLongMapStrMapIntStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrMapIntStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapLongMapStrMapIntStr_size(self)

    def swap(self, v: "MapLongMapStrMapIntStr") -> "void":
        return _cstl.MapLongMapStrMapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapLongMapStrMapIntStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapLongMapStrMapIntStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrMapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::allocator_type":
        return _cstl.MapLongMapStrMapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapLongMapStrMapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrMapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapLongMapStrMapIntStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrMapIntStr

# Register MapLongMapStrMapIntStr in _cstl:
_cstl.MapLongMapStrMapIntStr_swigregister(MapLongMapStrMapIntStr)

class MapLongMapStrMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrMapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapLongMapStrMapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,float > > >::mapped_type const &":
        return _cstl.MapLongMapStrMapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,float > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrMapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrMapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrMapIntFloat_swiginit(self, _cstl.new_MapLongMapStrMapIntFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrMapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapLongMapStrMapIntFloat_size(self)

    def swap(self, v: "MapLongMapStrMapIntFloat") -> "void":
        return _cstl.MapLongMapStrMapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapLongMapStrMapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapLongMapStrMapIntFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrMapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,float > > >::allocator_type":
        return _cstl.MapLongMapStrMapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapLongMapStrMapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrMapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapLongMapStrMapIntFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrMapIntFloat

# Register MapLongMapStrMapIntFloat in _cstl:
_cstl.MapLongMapStrMapIntFloat_swigregister(MapLongMapStrMapIntFloat)

class MapLongMapStrMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrMapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapLongMapStrMapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,double > > >::mapped_type const &":
        return _cstl.MapLongMapStrMapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,double > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrMapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrMapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrMapIntDouble_swiginit(self, _cstl.new_MapLongMapStrMapIntDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrMapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapLongMapStrMapIntDouble_size(self)

    def swap(self, v: "MapLongMapStrMapIntDouble") -> "void":
        return _cstl.MapLongMapStrMapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapLongMapStrMapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapLongMapStrMapIntDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrMapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,double > > >::allocator_type":
        return _cstl.MapLongMapStrMapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapLongMapStrMapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrMapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapLongMapStrMapIntDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrMapIntDouble

# Register MapLongMapStrMapIntDouble in _cstl:
_cstl.MapLongMapStrMapIntDouble_swigregister(MapLongMapStrMapIntDouble)

class MapLongMapStrMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrMapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapLongMapStrMapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,bool > > >::mapped_type const &":
        return _cstl.MapLongMapStrMapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,bool > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrMapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrMapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrMapIntBool_swiginit(self, _cstl.new_MapLongMapStrMapIntBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrMapIntBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapLongMapStrMapIntBool_size(self)

    def swap(self, v: "MapLongMapStrMapIntBool") -> "void":
        return _cstl.MapLongMapStrMapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapLongMapStrMapIntBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapLongMapStrMapIntBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrMapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,bool > > >::allocator_type":
        return _cstl.MapLongMapStrMapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapLongMapStrMapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrMapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapLongMapStrMapIntBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrMapIntBool

# Register MapLongMapStrMapIntBool in _cstl:
_cstl.MapLongMapStrMapIntBool_swigregister(MapLongMapStrMapIntBool)

class MapLongMapStrMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrMapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapLongMapStrMapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongMapStrMapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrMapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrMapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapIntLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrMapIntLong_swiginit(self, _cstl.new_MapLongMapStrMapIntLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrMapIntLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapLongMapStrMapIntLong_size(self)

    def swap(self, v: "MapLongMapStrMapIntLong") -> "void":
        return _cstl.MapLongMapStrMapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapLongMapStrMapIntLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapLongMapStrMapIntLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrMapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::allocator_type":
        return _cstl.MapLongMapStrMapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapLongMapStrMapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrMapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapLongMapStrMapIntLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrMapIntLong

# Register MapLongMapStrMapIntLong in _cstl:
_cstl.MapLongMapStrMapIntLong_swigregister(MapLongMapStrMapIntLong)

class MapLongMapStrMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrMapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapLongMapStrMapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::mapped_type const &":
        return _cstl.MapLongMapStrMapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrMapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrMapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrMapStrInt_swiginit(self, _cstl.new_MapLongMapStrMapStrInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrMapStrInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapLongMapStrMapStrInt_size(self)

    def swap(self, v: "MapLongMapStrMapStrInt") -> "void":
        return _cstl.MapLongMapStrMapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapLongMapStrMapStrInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapLongMapStrMapStrInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrMapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::allocator_type":
        return _cstl.MapLongMapStrMapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapLongMapStrMapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrMapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapLongMapStrMapStrInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrMapStrInt

# Register MapLongMapStrMapStrInt in _cstl:
_cstl.MapLongMapStrMapStrInt_swigregister(MapLongMapStrMapStrInt)

class MapLongMapStrMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrMapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapLongMapStrMapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::mapped_type const &":
        return _cstl.MapLongMapStrMapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrMapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrMapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrMapStrStr_swiginit(self, _cstl.new_MapLongMapStrMapStrStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrMapStrStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapLongMapStrMapStrStr_size(self)

    def swap(self, v: "MapLongMapStrMapStrStr") -> "void":
        return _cstl.MapLongMapStrMapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapLongMapStrMapStrStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapLongMapStrMapStrStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrMapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::allocator_type":
        return _cstl.MapLongMapStrMapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapLongMapStrMapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrMapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapLongMapStrMapStrStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrMapStrStr

# Register MapLongMapStrMapStrStr in _cstl:
_cstl.MapLongMapStrMapStrStr_swigregister(MapLongMapStrMapStrStr)

class MapLongMapStrMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrMapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapLongMapStrMapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::mapped_type const &":
        return _cstl.MapLongMapStrMapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrMapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrMapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrMapStrFloat_swiginit(self, _cstl.new_MapLongMapStrMapStrFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrMapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapLongMapStrMapStrFloat_size(self)

    def swap(self, v: "MapLongMapStrMapStrFloat") -> "void":
        return _cstl.MapLongMapStrMapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapLongMapStrMapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapLongMapStrMapStrFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrMapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::allocator_type":
        return _cstl.MapLongMapStrMapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapLongMapStrMapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrMapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapLongMapStrMapStrFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrMapStrFloat

# Register MapLongMapStrMapStrFloat in _cstl:
_cstl.MapLongMapStrMapStrFloat_swigregister(MapLongMapStrMapStrFloat)

class MapLongMapStrMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrMapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapLongMapStrMapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::mapped_type const &":
        return _cstl.MapLongMapStrMapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrMapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrMapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrMapStrDouble_swiginit(self, _cstl.new_MapLongMapStrMapStrDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrMapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapLongMapStrMapStrDouble_size(self)

    def swap(self, v: "MapLongMapStrMapStrDouble") -> "void":
        return _cstl.MapLongMapStrMapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapLongMapStrMapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapLongMapStrMapStrDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrMapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::allocator_type":
        return _cstl.MapLongMapStrMapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapLongMapStrMapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrMapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapLongMapStrMapStrDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrMapStrDouble

# Register MapLongMapStrMapStrDouble in _cstl:
_cstl.MapLongMapStrMapStrDouble_swigregister(MapLongMapStrMapStrDouble)

class MapLongMapStrMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrMapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapLongMapStrMapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::mapped_type const &":
        return _cstl.MapLongMapStrMapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrMapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrMapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrMapStrBool_swiginit(self, _cstl.new_MapLongMapStrMapStrBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrMapStrBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapLongMapStrMapStrBool_size(self)

    def swap(self, v: "MapLongMapStrMapStrBool") -> "void":
        return _cstl.MapLongMapStrMapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapLongMapStrMapStrBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapLongMapStrMapStrBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrMapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::allocator_type":
        return _cstl.MapLongMapStrMapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapLongMapStrMapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrMapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapLongMapStrMapStrBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrMapStrBool

# Register MapLongMapStrMapStrBool in _cstl:
_cstl.MapLongMapStrMapStrBool_swigregister(MapLongMapStrMapStrBool)

class MapLongMapStrMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrMapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapLongMapStrMapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongMapStrMapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrMapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrMapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapStrLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrMapStrLong_swiginit(self, _cstl.new_MapLongMapStrMapStrLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrMapStrLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapLongMapStrMapStrLong_size(self)

    def swap(self, v: "MapLongMapStrMapStrLong") -> "void":
        return _cstl.MapLongMapStrMapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapLongMapStrMapStrLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapLongMapStrMapStrLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrMapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::allocator_type":
        return _cstl.MapLongMapStrMapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapLongMapStrMapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrMapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapLongMapStrMapStrLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrMapStrLong

# Register MapLongMapStrMapStrLong in _cstl:
_cstl.MapLongMapStrMapStrLong_swigregister(MapLongMapStrMapStrLong)

class MapLongMapStrMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrMapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapLongMapStrMapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::mapped_type const &":
        return _cstl.MapLongMapStrMapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrMapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrMapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrMapLongInt_swiginit(self, _cstl.new_MapLongMapStrMapLongInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrMapLongInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapLongMapStrMapLongInt_size(self)

    def swap(self, v: "MapLongMapStrMapLongInt") -> "void":
        return _cstl.MapLongMapStrMapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapLongMapStrMapLongInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapLongMapStrMapLongInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrMapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::allocator_type":
        return _cstl.MapLongMapStrMapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapLongMapStrMapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrMapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapLongMapStrMapLongInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrMapLongInt

# Register MapLongMapStrMapLongInt in _cstl:
_cstl.MapLongMapStrMapLongInt_swigregister(MapLongMapStrMapLongInt)

class MapLongMapStrMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrMapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapLongMapStrMapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::mapped_type const &":
        return _cstl.MapLongMapStrMapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrMapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrMapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrMapLongStr_swiginit(self, _cstl.new_MapLongMapStrMapLongStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrMapLongStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapLongMapStrMapLongStr_size(self)

    def swap(self, v: "MapLongMapStrMapLongStr") -> "void":
        return _cstl.MapLongMapStrMapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapLongMapStrMapLongStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapLongMapStrMapLongStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrMapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::allocator_type":
        return _cstl.MapLongMapStrMapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapLongMapStrMapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrMapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapLongMapStrMapLongStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrMapLongStr

# Register MapLongMapStrMapLongStr in _cstl:
_cstl.MapLongMapStrMapLongStr_swigregister(MapLongMapStrMapLongStr)

class MapLongMapStrMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrMapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapLongMapStrMapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::mapped_type const &":
        return _cstl.MapLongMapStrMapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrMapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrMapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrMapLongFloat_swiginit(self, _cstl.new_MapLongMapStrMapLongFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrMapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapLongMapStrMapLongFloat_size(self)

    def swap(self, v: "MapLongMapStrMapLongFloat") -> "void":
        return _cstl.MapLongMapStrMapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapLongMapStrMapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapLongMapStrMapLongFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrMapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::allocator_type":
        return _cstl.MapLongMapStrMapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapLongMapStrMapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrMapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapLongMapStrMapLongFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrMapLongFloat

# Register MapLongMapStrMapLongFloat in _cstl:
_cstl.MapLongMapStrMapLongFloat_swigregister(MapLongMapStrMapLongFloat)

class MapLongMapStrMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrMapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapLongMapStrMapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::mapped_type const &":
        return _cstl.MapLongMapStrMapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrMapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrMapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrMapLongDouble_swiginit(self, _cstl.new_MapLongMapStrMapLongDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrMapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapLongMapStrMapLongDouble_size(self)

    def swap(self, v: "MapLongMapStrMapLongDouble") -> "void":
        return _cstl.MapLongMapStrMapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapLongMapStrMapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapLongMapStrMapLongDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrMapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::allocator_type":
        return _cstl.MapLongMapStrMapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapLongMapStrMapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrMapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapLongMapStrMapLongDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrMapLongDouble

# Register MapLongMapStrMapLongDouble in _cstl:
_cstl.MapLongMapStrMapLongDouble_swigregister(MapLongMapStrMapLongDouble)

class MapLongMapStrMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrMapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapLongMapStrMapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::mapped_type const &":
        return _cstl.MapLongMapStrMapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrMapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrMapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrMapLongBool_swiginit(self, _cstl.new_MapLongMapStrMapLongBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrMapLongBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapLongMapStrMapLongBool_size(self)

    def swap(self, v: "MapLongMapStrMapLongBool") -> "void":
        return _cstl.MapLongMapStrMapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapLongMapStrMapLongBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapLongMapStrMapLongBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrMapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::allocator_type":
        return _cstl.MapLongMapStrMapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapLongMapStrMapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrMapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapLongMapStrMapLongBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrMapLongBool

# Register MapLongMapStrMapLongBool in _cstl:
_cstl.MapLongMapStrMapLongBool_swigregister(MapLongMapStrMapLongBool)

class MapLongMapStrMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapStrMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapStrMapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapLongMapStrMapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongMapStrMapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongMapStrMapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapStrMapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapStrMapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapStrMapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapStrMapLongLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapStrMapLongLong_swiginit(self, _cstl.new_MapLongMapStrMapLongLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapStrMapLongLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapLongMapStrMapLongLong_size(self)

    def swap(self, v: "MapLongMapStrMapLongLong") -> "void":
        return _cstl.MapLongMapStrMapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapLongMapStrMapLongLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapLongMapStrMapLongLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapStrMapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::allocator_type":
        return _cstl.MapLongMapStrMapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapLongMapStrMapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapStrMapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::string,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapLongMapStrMapLongLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapStrMapLongLong

# Register MapLongMapStrMapLongLong in _cstl:
_cstl.MapLongMapStrMapLongLong_swigregister(MapLongMapStrMapLongLong)

class MapLongMapLongVecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongVecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongVecInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongVecInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< int > > >::size_type":
        return _cstl.MapLongMapLongVecInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< int > > >::mapped_type const &":
        return _cstl.MapLongMapLongVecInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< int > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongVecInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongVecInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongVecInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongVecInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongVecInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongVecInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongVecInt_swiginit(self, _cstl.new_MapLongMapLongVecInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongVecInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< int > > >::size_type":
        return _cstl.MapLongMapLongVecInt_size(self)

    def swap(self, v: "MapLongMapLongVecInt") -> "void":
        return _cstl.MapLongMapLongVecInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< int > > >::iterator":
        return _cstl.MapLongMapLongVecInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< int > > >::iterator":
        return _cstl.MapLongMapLongVecInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongVecInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< int > > >::allocator_type":
        return _cstl.MapLongMapLongVecInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< int > > >::size_type":
        return _cstl.MapLongMapLongVecInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongVecInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< int > > >::iterator":
        return _cstl.MapLongMapLongVecInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongVecInt

# Register MapLongMapLongVecInt in _cstl:
_cstl.MapLongMapLongVecInt_swigregister(MapLongMapLongVecInt)

class MapLongMapLongVecStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongVecStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongVecStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongVecStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::string > > >::size_type":
        return _cstl.MapLongMapLongVecStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::string > > >::mapped_type const &":
        return _cstl.MapLongMapLongVecStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongVecStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongVecStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongVecStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongVecStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongVecStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongVecStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongVecStr_swiginit(self, _cstl.new_MapLongMapLongVecStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongVecStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::string > > >::size_type":
        return _cstl.MapLongMapLongVecStr_size(self)

    def swap(self, v: "MapLongMapLongVecStr") -> "void":
        return _cstl.MapLongMapLongVecStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::string > > >::iterator":
        return _cstl.MapLongMapLongVecStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::string > > >::iterator":
        return _cstl.MapLongMapLongVecStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongVecStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::string > > >::allocator_type":
        return _cstl.MapLongMapLongVecStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::string > > >::size_type":
        return _cstl.MapLongMapLongVecStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongVecStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::string > > >::iterator":
        return _cstl.MapLongMapLongVecStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongVecStr

# Register MapLongMapLongVecStr in _cstl:
_cstl.MapLongMapLongVecStr_swigregister(MapLongMapLongVecStr)

class MapLongMapLongVecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongVecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongVecFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongVecFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< float > > >::size_type":
        return _cstl.MapLongMapLongVecFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< float > > >::mapped_type const &":
        return _cstl.MapLongMapLongVecFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< float > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongVecFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongVecFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongVecFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongVecFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongVecFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongVecFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongVecFloat_swiginit(self, _cstl.new_MapLongMapLongVecFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongVecFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< float > > >::size_type":
        return _cstl.MapLongMapLongVecFloat_size(self)

    def swap(self, v: "MapLongMapLongVecFloat") -> "void":
        return _cstl.MapLongMapLongVecFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< float > > >::iterator":
        return _cstl.MapLongMapLongVecFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< float > > >::iterator":
        return _cstl.MapLongMapLongVecFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongVecFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< float > > >::allocator_type":
        return _cstl.MapLongMapLongVecFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< float > > >::size_type":
        return _cstl.MapLongMapLongVecFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongVecFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< float > > >::iterator":
        return _cstl.MapLongMapLongVecFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongVecFloat

# Register MapLongMapLongVecFloat in _cstl:
_cstl.MapLongMapLongVecFloat_swigregister(MapLongMapLongVecFloat)

class MapLongMapLongVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongVecDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongVecDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< double > > >::size_type":
        return _cstl.MapLongMapLongVecDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< double > > >::mapped_type const &":
        return _cstl.MapLongMapLongVecDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< double > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongVecDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongVecDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongVecDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongVecDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongVecDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongVecDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongVecDouble_swiginit(self, _cstl.new_MapLongMapLongVecDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongVecDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< double > > >::size_type":
        return _cstl.MapLongMapLongVecDouble_size(self)

    def swap(self, v: "MapLongMapLongVecDouble") -> "void":
        return _cstl.MapLongMapLongVecDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< double > > >::iterator":
        return _cstl.MapLongMapLongVecDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< double > > >::iterator":
        return _cstl.MapLongMapLongVecDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongVecDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< double > > >::allocator_type":
        return _cstl.MapLongMapLongVecDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< double > > >::size_type":
        return _cstl.MapLongMapLongVecDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongVecDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< double > > >::iterator":
        return _cstl.MapLongMapLongVecDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongVecDouble

# Register MapLongMapLongVecDouble in _cstl:
_cstl.MapLongMapLongVecDouble_swigregister(MapLongMapLongVecDouble)

class MapLongMapLongVecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongVecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongVecBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongVecBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< bool > > >::size_type":
        return _cstl.MapLongMapLongVecBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< bool > > >::mapped_type const &":
        return _cstl.MapLongMapLongVecBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< bool > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongVecBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongVecBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongVecBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongVecBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongVecBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongVecBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongVecBool_swiginit(self, _cstl.new_MapLongMapLongVecBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongVecBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< bool > > >::size_type":
        return _cstl.MapLongMapLongVecBool_size(self)

    def swap(self, v: "MapLongMapLongVecBool") -> "void":
        return _cstl.MapLongMapLongVecBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< bool > > >::iterator":
        return _cstl.MapLongMapLongVecBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< bool > > >::iterator":
        return _cstl.MapLongMapLongVecBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongVecBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< bool > > >::allocator_type":
        return _cstl.MapLongMapLongVecBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< bool > > >::size_type":
        return _cstl.MapLongMapLongVecBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongVecBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< bool > > >::iterator":
        return _cstl.MapLongMapLongVecBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongVecBool

# Register MapLongMapLongVecBool in _cstl:
_cstl.MapLongMapLongVecBool_swigregister(MapLongMapLongVecBool)

class MapLongMapLongVecLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongVecLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongVecLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongVecLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapLongMapLongVecLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongMapLongVecLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongVecLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongVecLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongVecLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongVecLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongVecLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongVecLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongVecLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongVecLong_swiginit(self, _cstl.new_MapLongMapLongVecLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongVecLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapLongMapLongVecLong_size(self)

    def swap(self, v: "MapLongMapLongVecLong") -> "void":
        return _cstl.MapLongMapLongVecLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapLongMapLongVecLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapLongMapLongVecLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongVecLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::allocator_type":
        return _cstl.MapLongMapLongVecLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::size_type":
        return _cstl.MapLongMapLongVecLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongVecLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::vector< std::int64_t > > >::iterator":
        return _cstl.MapLongMapLongVecLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongVecLong

# Register MapLongMapLongVecLong in _cstl:
_cstl.MapLongMapLongVecLong_swigregister(MapLongMapLongVecLong)

class MapLongMapLongSetInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongSetInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongSetInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongSetInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< int > > >::size_type":
        return _cstl.MapLongMapLongSetInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< int > > >::mapped_type const &":
        return _cstl.MapLongMapLongSetInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< int > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongSetInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongSetInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongSetInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongSetInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongSetInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongSetInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongSetInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongSetInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongSetInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongSetInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongSetInt_swiginit(self, _cstl.new_MapLongMapLongSetInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongSetInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< int > > >::size_type":
        return _cstl.MapLongMapLongSetInt_size(self)

    def swap(self, v: "MapLongMapLongSetInt") -> "void":
        return _cstl.MapLongMapLongSetInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< int > > >::iterator":
        return _cstl.MapLongMapLongSetInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< int > > >::iterator":
        return _cstl.MapLongMapLongSetInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongSetInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< int > > >::allocator_type":
        return _cstl.MapLongMapLongSetInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< int > > >::size_type":
        return _cstl.MapLongMapLongSetInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongSetInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< int > > >::iterator":
        return _cstl.MapLongMapLongSetInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongSetInt

# Register MapLongMapLongSetInt in _cstl:
_cstl.MapLongMapLongSetInt_swigregister(MapLongMapLongSetInt)

class MapLongMapLongSetStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongSetStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongSetStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongSetStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapLongMapLongSetStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::mapped_type const &":
        return _cstl.MapLongMapLongSetStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongSetStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongSetStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongSetStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongSetStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongSetStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongSetStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongSetStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongSetStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongSetStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongSetStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongSetStr_swiginit(self, _cstl.new_MapLongMapLongSetStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongSetStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapLongMapLongSetStr_size(self)

    def swap(self, v: "MapLongMapLongSetStr") -> "void":
        return _cstl.MapLongMapLongSetStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapLongMapLongSetStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapLongMapLongSetStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongSetStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::allocator_type":
        return _cstl.MapLongMapLongSetStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::size_type":
        return _cstl.MapLongMapLongSetStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongSetStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::string > > >::iterator":
        return _cstl.MapLongMapLongSetStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongSetStr

# Register MapLongMapLongSetStr in _cstl:
_cstl.MapLongMapLongSetStr_swigregister(MapLongMapLongSetStr)

class MapLongMapLongSetLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongSetLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongSetLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongSetLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapLongMapLongSetLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongMapLongSetLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongSetLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongSetLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongSetLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongSetLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongSetLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongSetLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongSetLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongSetLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongSetLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongSetLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongSetLong_swiginit(self, _cstl.new_MapLongMapLongSetLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongSetLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapLongMapLongSetLong_size(self)

    def swap(self, v: "MapLongMapLongSetLong") -> "void":
        return _cstl.MapLongMapLongSetLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapLongMapLongSetLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapLongMapLongSetLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongSetLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::allocator_type":
        return _cstl.MapLongMapLongSetLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::size_type":
        return _cstl.MapLongMapLongSetLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongSetLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_set< std::int64_t > > >::iterator":
        return _cstl.MapLongMapLongSetLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongSetLong

# Register MapLongMapLongSetLong in _cstl:
_cstl.MapLongMapLongSetLong_swigregister(MapLongMapLongSetLong)

class MapLongMapLongMapIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongMapIntInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongMapIntInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapLongMapLongMapIntInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::mapped_type const &":
        return _cstl.MapLongMapLongMapIntInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongMapIntInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapIntInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapIntInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapIntInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapIntInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongMapIntInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongMapIntInt_swiginit(self, _cstl.new_MapLongMapLongMapIntInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongMapIntInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapLongMapLongMapIntInt_size(self)

    def swap(self, v: "MapLongMapLongMapIntInt") -> "void":
        return _cstl.MapLongMapLongMapIntInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapLongMapLongMapIntInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapLongMapLongMapIntInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongMapIntInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::allocator_type":
        return _cstl.MapLongMapLongMapIntInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::size_type":
        return _cstl.MapLongMapLongMapIntInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongMapIntInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,int > > >::iterator":
        return _cstl.MapLongMapLongMapIntInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongMapIntInt

# Register MapLongMapLongMapIntInt in _cstl:
_cstl.MapLongMapLongMapIntInt_swigregister(MapLongMapLongMapIntInt)

class MapLongMapLongMapIntStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapIntStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongMapIntStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongMapIntStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapLongMapLongMapIntStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::mapped_type const &":
        return _cstl.MapLongMapLongMapIntStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongMapIntStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapIntStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapIntStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapIntStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapIntStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongMapIntStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongMapIntStr_swiginit(self, _cstl.new_MapLongMapLongMapIntStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongMapIntStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapLongMapLongMapIntStr_size(self)

    def swap(self, v: "MapLongMapLongMapIntStr") -> "void":
        return _cstl.MapLongMapLongMapIntStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapLongMapLongMapIntStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapLongMapLongMapIntStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongMapIntStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::allocator_type":
        return _cstl.MapLongMapLongMapIntStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::size_type":
        return _cstl.MapLongMapLongMapIntStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongMapIntStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::string > > >::iterator":
        return _cstl.MapLongMapLongMapIntStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongMapIntStr

# Register MapLongMapLongMapIntStr in _cstl:
_cstl.MapLongMapLongMapIntStr_swigregister(MapLongMapLongMapIntStr)

class MapLongMapLongMapIntFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapIntFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongMapIntFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongMapIntFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapLongMapLongMapIntFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::mapped_type const &":
        return _cstl.MapLongMapLongMapIntFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongMapIntFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapIntFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapIntFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapIntFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapIntFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongMapIntFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongMapIntFloat_swiginit(self, _cstl.new_MapLongMapLongMapIntFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongMapIntFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapLongMapLongMapIntFloat_size(self)

    def swap(self, v: "MapLongMapLongMapIntFloat") -> "void":
        return _cstl.MapLongMapLongMapIntFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapLongMapLongMapIntFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapLongMapLongMapIntFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongMapIntFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::allocator_type":
        return _cstl.MapLongMapLongMapIntFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::size_type":
        return _cstl.MapLongMapLongMapIntFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongMapIntFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,float > > >::iterator":
        return _cstl.MapLongMapLongMapIntFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongMapIntFloat

# Register MapLongMapLongMapIntFloat in _cstl:
_cstl.MapLongMapLongMapIntFloat_swigregister(MapLongMapLongMapIntFloat)

class MapLongMapLongMapIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapIntDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongMapIntDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongMapIntDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapLongMapLongMapIntDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::mapped_type const &":
        return _cstl.MapLongMapLongMapIntDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongMapIntDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapIntDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapIntDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapIntDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapIntDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongMapIntDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongMapIntDouble_swiginit(self, _cstl.new_MapLongMapLongMapIntDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongMapIntDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapLongMapLongMapIntDouble_size(self)

    def swap(self, v: "MapLongMapLongMapIntDouble") -> "void":
        return _cstl.MapLongMapLongMapIntDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapLongMapLongMapIntDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapLongMapLongMapIntDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongMapIntDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::allocator_type":
        return _cstl.MapLongMapLongMapIntDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::size_type":
        return _cstl.MapLongMapLongMapIntDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongMapIntDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,double > > >::iterator":
        return _cstl.MapLongMapLongMapIntDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongMapIntDouble

# Register MapLongMapLongMapIntDouble in _cstl:
_cstl.MapLongMapLongMapIntDouble_swigregister(MapLongMapLongMapIntDouble)

class MapLongMapLongMapIntBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapIntBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongMapIntBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongMapIntBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapLongMapLongMapIntBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::mapped_type const &":
        return _cstl.MapLongMapLongMapIntBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongMapIntBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapIntBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapIntBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapIntBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapIntBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongMapIntBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongMapIntBool_swiginit(self, _cstl.new_MapLongMapLongMapIntBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongMapIntBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapLongMapLongMapIntBool_size(self)

    def swap(self, v: "MapLongMapLongMapIntBool") -> "void":
        return _cstl.MapLongMapLongMapIntBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapLongMapLongMapIntBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapLongMapLongMapIntBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongMapIntBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::allocator_type":
        return _cstl.MapLongMapLongMapIntBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::size_type":
        return _cstl.MapLongMapLongMapIntBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongMapIntBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,bool > > >::iterator":
        return _cstl.MapLongMapLongMapIntBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongMapIntBool

# Register MapLongMapLongMapIntBool in _cstl:
_cstl.MapLongMapLongMapIntBool_swigregister(MapLongMapLongMapIntBool)

class MapLongMapLongMapIntLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapIntLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongMapIntLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongMapIntLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapLongMapLongMapIntLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongMapLongMapIntLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongMapIntLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapIntLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapIntLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapIntLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapIntLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongMapIntLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapIntLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongMapIntLong_swiginit(self, _cstl.new_MapLongMapLongMapIntLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongMapIntLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapLongMapLongMapIntLong_size(self)

    def swap(self, v: "MapLongMapLongMapIntLong") -> "void":
        return _cstl.MapLongMapLongMapIntLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapLongMapLongMapIntLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapLongMapLongMapIntLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongMapIntLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::allocator_type":
        return _cstl.MapLongMapLongMapIntLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::size_type":
        return _cstl.MapLongMapLongMapIntLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongMapIntLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< int,std::int64_t > > >::iterator":
        return _cstl.MapLongMapLongMapIntLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongMapIntLong

# Register MapLongMapLongMapIntLong in _cstl:
_cstl.MapLongMapLongMapIntLong_swigregister(MapLongMapLongMapIntLong)

class MapLongMapLongMapStrInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapStrInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongMapStrInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongMapStrInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapLongMapLongMapStrInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::mapped_type const &":
        return _cstl.MapLongMapLongMapStrInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongMapStrInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapStrInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapStrInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapStrInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapStrInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongMapStrInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongMapStrInt_swiginit(self, _cstl.new_MapLongMapLongMapStrInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongMapStrInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapLongMapLongMapStrInt_size(self)

    def swap(self, v: "MapLongMapLongMapStrInt") -> "void":
        return _cstl.MapLongMapLongMapStrInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapLongMapLongMapStrInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapLongMapLongMapStrInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongMapStrInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::allocator_type":
        return _cstl.MapLongMapLongMapStrInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::size_type":
        return _cstl.MapLongMapLongMapStrInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongMapStrInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,int > > >::iterator":
        return _cstl.MapLongMapLongMapStrInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongMapStrInt

# Register MapLongMapLongMapStrInt in _cstl:
_cstl.MapLongMapLongMapStrInt_swigregister(MapLongMapLongMapStrInt)

class MapLongMapLongMapStrStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapStrStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongMapStrStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongMapStrStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapLongMapLongMapStrStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::mapped_type const &":
        return _cstl.MapLongMapLongMapStrStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongMapStrStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapStrStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapStrStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapStrStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapStrStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongMapStrStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongMapStrStr_swiginit(self, _cstl.new_MapLongMapLongMapStrStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongMapStrStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapLongMapLongMapStrStr_size(self)

    def swap(self, v: "MapLongMapLongMapStrStr") -> "void":
        return _cstl.MapLongMapLongMapStrStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapLongMapLongMapStrStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapLongMapLongMapStrStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongMapStrStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::allocator_type":
        return _cstl.MapLongMapLongMapStrStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::size_type":
        return _cstl.MapLongMapLongMapStrStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongMapStrStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::string > > >::iterator":
        return _cstl.MapLongMapLongMapStrStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongMapStrStr

# Register MapLongMapLongMapStrStr in _cstl:
_cstl.MapLongMapLongMapStrStr_swigregister(MapLongMapLongMapStrStr)

class MapLongMapLongMapStrFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapStrFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongMapStrFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongMapStrFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapLongMapLongMapStrFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::mapped_type const &":
        return _cstl.MapLongMapLongMapStrFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongMapStrFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapStrFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapStrFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapStrFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapStrFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongMapStrFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongMapStrFloat_swiginit(self, _cstl.new_MapLongMapLongMapStrFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongMapStrFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapLongMapLongMapStrFloat_size(self)

    def swap(self, v: "MapLongMapLongMapStrFloat") -> "void":
        return _cstl.MapLongMapLongMapStrFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapLongMapLongMapStrFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapLongMapLongMapStrFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongMapStrFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::allocator_type":
        return _cstl.MapLongMapLongMapStrFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::size_type":
        return _cstl.MapLongMapLongMapStrFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongMapStrFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,float > > >::iterator":
        return _cstl.MapLongMapLongMapStrFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongMapStrFloat

# Register MapLongMapLongMapStrFloat in _cstl:
_cstl.MapLongMapLongMapStrFloat_swigregister(MapLongMapLongMapStrFloat)

class MapLongMapLongMapStrDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapStrDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongMapStrDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongMapStrDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapLongMapLongMapStrDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::mapped_type const &":
        return _cstl.MapLongMapLongMapStrDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongMapStrDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapStrDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapStrDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapStrDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapStrDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongMapStrDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongMapStrDouble_swiginit(self, _cstl.new_MapLongMapLongMapStrDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongMapStrDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapLongMapLongMapStrDouble_size(self)

    def swap(self, v: "MapLongMapLongMapStrDouble") -> "void":
        return _cstl.MapLongMapLongMapStrDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapLongMapLongMapStrDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapLongMapLongMapStrDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongMapStrDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::allocator_type":
        return _cstl.MapLongMapLongMapStrDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::size_type":
        return _cstl.MapLongMapLongMapStrDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongMapStrDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,double > > >::iterator":
        return _cstl.MapLongMapLongMapStrDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongMapStrDouble

# Register MapLongMapLongMapStrDouble in _cstl:
_cstl.MapLongMapLongMapStrDouble_swigregister(MapLongMapLongMapStrDouble)

class MapLongMapLongMapStrBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapStrBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongMapStrBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongMapStrBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapLongMapLongMapStrBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::mapped_type const &":
        return _cstl.MapLongMapLongMapStrBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongMapStrBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapStrBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapStrBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapStrBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapStrBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongMapStrBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongMapStrBool_swiginit(self, _cstl.new_MapLongMapLongMapStrBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongMapStrBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapLongMapLongMapStrBool_size(self)

    def swap(self, v: "MapLongMapLongMapStrBool") -> "void":
        return _cstl.MapLongMapLongMapStrBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapLongMapLongMapStrBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapLongMapLongMapStrBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongMapStrBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::allocator_type":
        return _cstl.MapLongMapLongMapStrBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::size_type":
        return _cstl.MapLongMapLongMapStrBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongMapStrBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,bool > > >::iterator":
        return _cstl.MapLongMapLongMapStrBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongMapStrBool

# Register MapLongMapLongMapStrBool in _cstl:
_cstl.MapLongMapLongMapStrBool_swigregister(MapLongMapLongMapStrBool)

class MapLongMapLongMapStrLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapStrLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongMapStrLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongMapStrLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapLongMapLongMapStrLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongMapLongMapStrLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongMapStrLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapStrLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapStrLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapStrLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapStrLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongMapStrLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapStrLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongMapStrLong_swiginit(self, _cstl.new_MapLongMapLongMapStrLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongMapStrLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapLongMapLongMapStrLong_size(self)

    def swap(self, v: "MapLongMapLongMapStrLong") -> "void":
        return _cstl.MapLongMapLongMapStrLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapLongMapLongMapStrLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapLongMapLongMapStrLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongMapStrLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::allocator_type":
        return _cstl.MapLongMapLongMapStrLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::size_type":
        return _cstl.MapLongMapLongMapStrLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongMapStrLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::string,std::int64_t > > >::iterator":
        return _cstl.MapLongMapLongMapStrLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongMapStrLong

# Register MapLongMapLongMapStrLong in _cstl:
_cstl.MapLongMapLongMapStrLong_swigregister(MapLongMapLongMapStrLong)

class MapLongMapLongMapLongInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapLongInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongMapLongInt___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongMapLongInt___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapLongMapLongMapLongInt___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::mapped_type const &":
        return _cstl.MapLongMapLongMapLongInt___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongMapLongInt___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapLongInt_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongInt_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongInt_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongInt_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapLongInt___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapLongInt_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapLongInt_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongMapLongInt___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongInt_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongMapLongInt_swiginit(self, _cstl.new_MapLongMapLongMapLongInt(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongMapLongInt_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapLongMapLongMapLongInt_size(self)

    def swap(self, v: "MapLongMapLongMapLongInt") -> "void":
        return _cstl.MapLongMapLongMapLongInt_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapLongMapLongMapLongInt_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapLongMapLongMapLongInt_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongMapLongInt_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::allocator_type":
        return _cstl.MapLongMapLongMapLongInt_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::size_type":
        return _cstl.MapLongMapLongMapLongInt_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongMapLongInt_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,int > > >::iterator":
        return _cstl.MapLongMapLongMapLongInt_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongMapLongInt

# Register MapLongMapLongMapLongInt in _cstl:
_cstl.MapLongMapLongMapLongInt_swigregister(MapLongMapLongMapLongInt)

class MapLongMapLongMapLongStr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapLongStr_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongMapLongStr___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongMapLongStr___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapLongMapLongMapLongStr___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::mapped_type const &":
        return _cstl.MapLongMapLongMapLongStr___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongMapLongStr___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapLongStr_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongStr_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongStr_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongStr_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapLongStr___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapLongStr_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapLongStr_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongMapLongStr___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongStr_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongMapLongStr_swiginit(self, _cstl.new_MapLongMapLongMapLongStr(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongMapLongStr_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapLongMapLongMapLongStr_size(self)

    def swap(self, v: "MapLongMapLongMapLongStr") -> "void":
        return _cstl.MapLongMapLongMapLongStr_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapLongMapLongMapLongStr_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapLongMapLongMapLongStr_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongMapLongStr_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::allocator_type":
        return _cstl.MapLongMapLongMapLongStr_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::size_type":
        return _cstl.MapLongMapLongMapLongStr_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongMapLongStr_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::string > > >::iterator":
        return _cstl.MapLongMapLongMapLongStr_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongMapLongStr

# Register MapLongMapLongMapLongStr in _cstl:
_cstl.MapLongMapLongMapLongStr_swigregister(MapLongMapLongMapLongStr)

class MapLongMapLongMapLongFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapLongFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongMapLongFloat___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongMapLongFloat___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapLongMapLongMapLongFloat___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::mapped_type const &":
        return _cstl.MapLongMapLongMapLongFloat___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongMapLongFloat___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapLongFloat_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongFloat_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongFloat_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongFloat_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapLongFloat___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapLongFloat_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapLongFloat_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongMapLongFloat___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongFloat_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongMapLongFloat_swiginit(self, _cstl.new_MapLongMapLongMapLongFloat(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongMapLongFloat_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapLongMapLongMapLongFloat_size(self)

    def swap(self, v: "MapLongMapLongMapLongFloat") -> "void":
        return _cstl.MapLongMapLongMapLongFloat_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapLongMapLongMapLongFloat_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapLongMapLongMapLongFloat_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongMapLongFloat_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::allocator_type":
        return _cstl.MapLongMapLongMapLongFloat_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::size_type":
        return _cstl.MapLongMapLongMapLongFloat_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongMapLongFloat_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,float > > >::iterator":
        return _cstl.MapLongMapLongMapLongFloat_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongMapLongFloat

# Register MapLongMapLongMapLongFloat in _cstl:
_cstl.MapLongMapLongMapLongFloat_swigregister(MapLongMapLongMapLongFloat)

class MapLongMapLongMapLongDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapLongDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongMapLongDouble___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongMapLongDouble___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapLongMapLongMapLongDouble___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::mapped_type const &":
        return _cstl.MapLongMapLongMapLongDouble___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongMapLongDouble___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapLongDouble_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongDouble_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongDouble_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongDouble_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapLongDouble___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapLongDouble_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapLongDouble_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongMapLongDouble___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongDouble_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongMapLongDouble_swiginit(self, _cstl.new_MapLongMapLongMapLongDouble(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongMapLongDouble_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapLongMapLongMapLongDouble_size(self)

    def swap(self, v: "MapLongMapLongMapLongDouble") -> "void":
        return _cstl.MapLongMapLongMapLongDouble_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapLongMapLongMapLongDouble_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapLongMapLongMapLongDouble_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongMapLongDouble_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::allocator_type":
        return _cstl.MapLongMapLongMapLongDouble_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::size_type":
        return _cstl.MapLongMapLongMapLongDouble_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongMapLongDouble_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,double > > >::iterator":
        return _cstl.MapLongMapLongMapLongDouble_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongMapLongDouble

# Register MapLongMapLongMapLongDouble in _cstl:
_cstl.MapLongMapLongMapLongDouble_swigregister(MapLongMapLongMapLongDouble)

class MapLongMapLongMapLongBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapLongBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongMapLongBool___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongMapLongBool___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapLongMapLongMapLongBool___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::mapped_type const &":
        return _cstl.MapLongMapLongMapLongBool___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongMapLongBool___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapLongBool_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongBool_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongBool_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongBool_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapLongBool___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapLongBool_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapLongBool_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongMapLongBool___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongBool_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongMapLongBool_swiginit(self, _cstl.new_MapLongMapLongMapLongBool(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongMapLongBool_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapLongMapLongMapLongBool_size(self)

    def swap(self, v: "MapLongMapLongMapLongBool") -> "void":
        return _cstl.MapLongMapLongMapLongBool_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapLongMapLongMapLongBool_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapLongMapLongMapLongBool_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongMapLongBool_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::allocator_type":
        return _cstl.MapLongMapLongMapLongBool_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::size_type":
        return _cstl.MapLongMapLongMapLongBool_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongMapLongBool_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,bool > > >::iterator":
        return _cstl.MapLongMapLongMapLongBool_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongMapLongBool

# Register MapLongMapLongMapLongBool in _cstl:
_cstl.MapLongMapLongMapLongBool_swigregister(MapLongMapLongMapLongBool)

class MapLongMapLongMapLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _cstl.MapLongMapLongMapLongLong___nonzero__(self)

    def __bool__(self) -> "bool":
        return _cstl.MapLongMapLongMapLongLong___bool__(self)

    def __len__(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapLongMapLongMapLongLong___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::mapped_type const &":
        return _cstl.MapLongMapLongMapLongLong___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "void":
        return _cstl.MapLongMapLongMapLongLong___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapLongLong_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongLong_keys(self)

    def values(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongLong_values(self)

    def items(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongLong_items(self)

    def __contains__(self, key: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "bool":
        return _cstl.MapLongMapLongMapLongLong___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapLongLong_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _cstl.MapLongMapLongMapLongLong_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _cstl.MapLongMapLongMapLongLong___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _cstl.MapLongMapLongMapLongLong_asdict(self)

    def __init__(self, *args):
        _cstl.MapLongMapLongMapLongLong_swiginit(self, _cstl.new_MapLongMapLongMapLongLong(*args))

    def empty(self) -> "bool":
        return _cstl.MapLongMapLongMapLongLong_empty(self)

    def size(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapLongMapLongMapLongLong_size(self)

    def swap(self, v: "MapLongMapLongMapLongLong") -> "void":
        return _cstl.MapLongMapLongMapLongLong_swap(self, v)

    def begin(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapLongMapLongMapLongLong_begin(self)

    def end(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapLongMapLongMapLongLong_end(self)

    def clear(self) -> "void":
        return _cstl.MapLongMapLongMapLongLong_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::allocator_type":
        return _cstl.MapLongMapLongMapLongLong_get_allocator(self)

    def count(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::size_type":
        return _cstl.MapLongMapLongMapLongLong_count(self, x)

    def erase(self, *args) -> "void":
        return _cstl.MapLongMapLongMapLongLong_erase(self, *args)

    def find(self, x: "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::key_type const &") -> "std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::unordered_map< std::int64_t,std::int64_t > > >::iterator":
        return _cstl.MapLongMapLongMapLongLong_find(self, x)
    __swig_destroy__ = _cstl.delete_MapLongMapLongMapLongLong

# Register MapLongMapLongMapLongLong in _cstl:
_cstl.MapLongMapLongMapLongLong_swigregister(MapLongMapLongMapLongLong)




#====Wrapper====
import sys

def _get_type(pyobj):
    container_map = {"list" : "Vec", "dict" : "Map", "set" : "Set"}
    type_map = {'int': 'Int', 'str': 'Str', 'float': 'Float', 'double': 'Double', 'bool': 'Bool', 'std::int64_t': 'Long'}
    stype = type(pyobj).__name__
    if stype not in container_map:
        return type_map[stype]
    if len(pyobj) == 0:
        raise AttributeError(f"Contain Empty {stype} and cannot infer the Type. Please give a non empty list or direct use the specific class to define the object.")
    if stype == "list":
        return container_map[stype] + _get_type(pyobj[0])
    elif stype == "dict":
        k0 = list(pyobj.keys())[0]
        return container_map[stype] + _get_type(k0) + _get_type(pyobj[k0])
    elif stype == "set":
        v0 = list(pyobj)[0]
        return container_map[stype] + _get_type(v0)
        
def _convert_set(pyobj):
    container_map = {"list" : "Vec", "dict" : "Map", "set" : "Set"}
    stype = type(pyobj).__name__
    if len(pyobj) == 0:
        raise AttributeError(f"Contain Empty {stype} and cannot infer the Type. Please give a non empty list or direct use the specific class to define the object.")
    if stype == "list":
        if type(pyobj[0]).__name__ in container_map:
            return [_convert_set(c) for c in pyobj]
        else:
            return pyobj
    elif stype == "dict":
        v0 = list(pyobj.values())[0]
        if type(v0).__name__ in container_map:
            return {c : _convert_set(pyobj[c]) for c in pyobj}
        else:
            return pyobj
    elif stype == "set":
        return list(pyobj)
    else:
        raise AttributeError(f"Not handle {stype}")
        
def frompy(pyobj):
    if type(pyobj) not in [list, set, dict]:
        raise AttributeError("You should give a container within list, set, or dict.")
    class_name = _get_type(pyobj)
    class_obj = getattr(sys.modules[__name__], class_name)
    my_obj = class_obj(_convert_set(pyobj))
    return my_obj

def topy(cstlobj):
    stype = type(cstlobj).__name__
    if stype.startswith("Vec"):
        obj = list(cstlobj)
        if len(obj) > 0 and "cstl" in type(obj[0]).__module__:
            obj = [topy(o) for o in obj]
    elif stype.startswith("Map"):
        obj = dict(cstlobj)
        if len(obj) > 0 and "cstl" in type(list(obj.values())[0]).__module__:
            obj = {o : topy(obj[o]) for o in obj}
    elif stype.startswith("Set"):
        obj = set(cstlobj)
    else:
        raise AttributeError(f"Fail to find the match type for '{cstlobj}' with type {stype}.")
    return obj

