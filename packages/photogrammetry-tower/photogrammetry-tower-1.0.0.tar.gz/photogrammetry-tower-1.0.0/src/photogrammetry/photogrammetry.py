
# python wrapper for package photogrammetry within overall package photogrammetry
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build -output=lib_photogrammetry -vm=python3 .

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
    import collections.abc as _collections_abc
except ImportError:
    _collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _photogrammetry
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from photogrammetry import photogrammetry
# and then refer to everything using photogrammetry. prefix
# packages imported by this package listed below:




# ---- Types ---

# Python type for slice [][]float64
class Slice_Slice_float64(go.GoClass):
    """"""
    def __init__(self, *args, **kwargs):
        """
        handle=A Go-side object is always initialized with an explicit handle=arg
        otherwise parameter is a python list that we copy from
        """
        self.index = 0
        if len(kwargs) == 1 and 'handle' in kwargs:
            self.handle = kwargs['handle']
            _photogrammetry.IncRef(self.handle)
        elif len(args) == 1 and isinstance(args[0], go.GoClass):
            self.handle = args[0].handle
            _photogrammetry.IncRef(self.handle)
        else:
            self.handle = _photogrammetry.Slice_Slice_float64_CTor()
            _photogrammetry.IncRef(self.handle)
            if len(args) > 0:
                if not isinstance(args[0], _collections_abc.Iterable):
                    raise TypeError('Slice_Slice_float64.__init__ takes a sequence as argument')
                for elt in args[0]:
                    self.append(elt)
    def __del__(self):
        _photogrammetry.DecRef(self.handle)
    def __str__(self):
        s = 'photogrammetry.Slice_Slice_float64 len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
        if len(self) < 120:
            s += ', '.join(map(str, self)) + ']'
        return s
    def __repr__(self):
        return 'photogrammetry.Slice_Slice_float64([' + ', '.join(map(str, self)) + '])'
    def __len__(self):
        return _photogrammetry.Slice_Slice_float64_len(self.handle)
    def __getitem__(self, key):
        if isinstance(key, slice):
            if key.step == None or key.step == 1:
                st = key.start
                ed = key.stop
                if st == None:
                    st = 0
                if ed == None:
                    ed = _photogrammetry.Slice_Slice_float64_len(self.handle)
                return Slice_Slice_float64(handle=_photogrammetry.Slice_Slice_float64_subslice(self.handle, st, ed))
            return [self[ii] for ii in range(*key.indices(len(self)))]
        elif isinstance(key, int):
            if key < 0:
                key += len(self)
            if key < 0 or key >= len(self):
                raise IndexError('slice index out of range')
            return go.Slice_float64(handle=_photogrammetry.Slice_Slice_float64_elem(self.handle, key))
        else:
            raise TypeError('slice index invalid type')
    def __setitem__(self, idx, value):
        if idx < 0:
            idx += len(self)
        if idx < len(self):
            _photogrammetry.Slice_Slice_float64_set(self.handle, idx, value.handle)
            return
        raise IndexError('slice index out of range')
    def __iadd__(self, value):
        if not isinstance(value, _collections_abc.Iterable):
            raise TypeError('Slice_Slice_float64.__iadd__ takes a sequence as argument')
        for elt in value:
            self.append(elt)
        return self
    def __iter__(self):
        self.index = 0
        return self
    def __next__(self):
        if self.index < len(self):
            rv = _photogrammetry.Slice_Slice_float64_elem(self.handle, self.index)
            self.index = self.index + 1
            return rv
        raise StopIteration
    def append(self, value):
        go_val = go.Slice_float64(value)
        _photogrammetry.Slice_Slice_float64_append(self.handle, go_val.handle)
    def copy(self, src):
        """ copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
        mx = min(len(self), len(src))
        for i in range(mx):
            self[i] = src[i]


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def MonopoleCenterPoint(mesh):
    """MonopoleCenterPoint([][]float mesh) []float"""
    go_mesh = Slice_Slice_float64(mesh.tolist())
    return go.Slice_float64(handle=_photogrammetry.photogrammetry_MonopoleCenterPoint(go_mesh.handle))
def CoordinateToAzimuth(coordinate):
    """CoordinateToAzimuth([]float coordinate) float"""
    go_coordinate = go.Slice_float64(coordinate)
    return _photogrammetry.photogrammetry_CoordinateToAzimuth(go_coordinate.handle)
def LatticeCenterPoint(mesh):
    """LatticeCenterPoint([][]float mesh) []float"""
    go_mesh = Slice_Slice_float64(mesh.tolist())
    return go.Slice_float64(handle=_photogrammetry.photogrammetry_LatticeCenterPoint(go_mesh.handle))
