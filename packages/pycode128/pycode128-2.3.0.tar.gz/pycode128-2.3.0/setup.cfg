# build_clib and build_ext are dynamically changed when "poetry build" or "poetry install" commands are executed

# used mingw32 into MSYS2 by poetry build on windows, otherwise MSVC is used and build fails
# https://stackoverflow.com/questions/36189453/how-to-change-python-default-compiler-to-gcc
# https://wiki.python.org/moin/WindowsCompilers
[build_clib]
compiler = mingw32

# used mingw32 into MSYS2 by poetry build on windows, otherwise MSVC is used and build fails
[build_ext]
compiler = mingw32


# to avoid building package under windows (that fails), execute tox with
# poetry run tox --skip-pkg-install --direct-yolo -e ...
#  ref https://stackoverflow.com/questions/16737260/how-to-tell-distutils-to-use-gcc
# ref https://github.com/gpongelli/cookiecutter-pylibrary/blob/master/%7B%7Bcookiecutter.repo_name%7D%7D/ci/templates/.github/workflows/github-actions.yml

[flake8]
max-line-length = 120
max-complexity = 18
ignore = E203, E266, W503, D301
docstring-convention = google
doctests = True
per-file-ignores =
	__init__.py:F401
	pycode128/cli_tools/cli.py:DAR101
exclude = .git,
	__pycache__,
	setup.py,
	build,
	dist,
	docs,
	releases,
	.venv,
	.tox,
	.mypy_cache,
	.pytest_cache,
	.vscode,
	.github,

[mypy]
ignore_missing_imports = True
show_error_codes = True

[darglint]
strictness = full
docstring_style = google
message_template = {path}:{line} @{obj} {msg_id}: {msg}
ignore_regex = ^_(.*)|pycode128|main

[tool:pytest]
testpaths = tests
addopts =
	--cov
	--cov-report=term-missing
	--cov=pycode128
	--cov-append

[coverage:run]
# uncomment the following to omit files during running
#omit =
#    path/folder/file
#    path/folder/*
branch = True

[coverage:report]
show_missing = True
exclude_lines =
	pragma: no cover
	def __repr__
	if self.debug:
	if settings.DEBUG
	raise AssertionError
	raise NotImplementedError
	if 0:
	if __name__ == .__main__.:
	def main

[coverage:html]
directory = coverage_html
show_contexts = True

[gh-actions]
python =
	3.9: py39, format, lint, build

[tox:tox]
min_version = 4.0  # platform specification support is available since version 2.0
isolated_build = true
envlist = lint, format, py{3.8, 3.9, 3.10, 3.11}-{lin,mac,win}

[dev]
allowlist_externals =
	poetry
	python
commands =
	poetry run python --version
	# python --version
	poetry lock --no-update
	poetry install -v --with devel --no-root --sync
	poetry run tox --version
	poetry run pip --version
	poetry run pip list --format=freeze

[testenv]
description = Run tests
platform = lin: linux
	mac: darwin
	win: win32
allowlist_externals =
	{[dev]allowlist_externals}
passenv = *
setenv =
	py3.8-{lin, mac}: PYTH = python3.8
	py3.9-{lin, mac}: PYTH = python3.9
	py3.10-{lin, mac}: PYTH = python3.10
	py3.11-{lin, mac}: PYTH = python3.11
	py{3.8, 3.9, 3.10, 3.11}-{win}: PYTH = python
	COVERAGE_FILE = .coverage_{envname}
	PYTHONPATH = {toxinidir}
	PYTHONWARNINGS = ignore
commands_pre =
	# poetry needs name of python binary
	poetry env use {env:PYTH}
	# in case of C/C++ extension, it's better to rebuild package for every python version & env
	{[testenv:build]commands}
commands =
	# poetry install -v
    # install the package or pytest cannot find it
	poetry install
	poetry run pytest {posargs:-vv} --cov-report=html:html_coverage_{envname} --cov-report=xml:xml_coverage_{envname}.xml
#    pytest --cov=pycode128 --cov-branch --cov-report=xml --cov-report=term-missing tests

[testenv:format]
description = Format the code
ignore_errors = True
skip_install = true
allowlist_externals =
	{[dev]allowlist_externals}
commands_pre =
	{[dev]commands}
commands =
	poetry run isort pycode128 tests build_extension.py
	poetry run black pycode128 tests build_extension.py

[testenv:license]
description = License files according to REUSE 3.0
allowlist_externals =
	{[dev]allowlist_externals}
commands =
	poetry run reuse annotate --license=MIT --copyright="Gabriele Pongelli" --year="2023" $(find ./pycode128 ./tests ./docs -name "*.py")
	poetry run reuse annotate --license=MIT --copyright="Gabriele Pongelli" --year="2023" --force-dot-license $(find ./pycode128 ./tests ./docs -name "*.json")
	poetry run reuse annotate --license=MIT --copyright="Gabriele Pongelli" --year="2023" $(find ./.github \( -name "*.yml" -o -name "*.md" \) )
	poetry run reuse annotate --license=MIT --copyright="Gabriele Pongelli" --year="2023" --style python ./.editorconfig ./.gitignore ./. yamllint ./.pre-commit-config.yaml
	poetry run reuse annotate --license=MIT --copyright="Gabriele Pongelli" --year="2023" ./docs/Makefile ./docs/make.bat ./pyproject.toml
	poetry run reuse annotate --license=MIT --copyright="Gabriele Pongelli" --year="2023" --force-dot-license $(find . -maxdepth 1  -name "*.rst" -o -name "*.md" -o -name "*.lock" -o -name "*.cfg" )
	poetry run reuse annotate --license=MIT --copyright="Gabriele Pongelli" --year="2023" --force-dot-license $(find ./docs -name "*.rst")
	poetry run reuse download --all
	sed -i '' -e 's/<year>/2023/g;s/<copyright holders>/Gabriele Pongelli/g' LICENSES/MIT.txt
	# Windows Call
	# poetry run reuse annotate --license=MIT --copyright="Gabriele Pongelli" --year="2023" --force-dot-license $(Get-ChildItem .\tests\*.png)

[testenv:lint]
description = Lint the code
ignore_errors = True
skip_install = true
allowlist_externals =
	{[dev]allowlist_externals}
commands_pre =
	{[testenv:build]commands}
	poetry install
commands =
	poetry run flake8 pycode128 tests
	poetry run mypy --install-types pycode128 tests build_extension.py
	# poetry run yamllint -f colored pycode128
	poetry run codespell pycode128 docs/source
	poetry run pylint pycode128 build_extension.py
	poetry run darglint -v 2 pycode128
	poetry run bandit -r pycode128
	poetry run reuse lint

[testenv:build]
description = Build package
allowlist_externals =
	{[dev]allowlist_externals}
commands_pre =
	{[dev]commands}
commands =
	poetry build
	poetry run twine check dist/*

[testenv:docs]
description = Build docs
skip_install = true
allowlist_externals =
	{[dev]allowlist_externals}
commands_pre =
	{[dev]commands}
commands =
	poetry run sphinx-build -b html docs/source/ docs/build/html
	# poetry run sphinx-build -b linkcheck docs/source/ docs/build/html

[testenv:release]
description = Run release task
skip_install = true
allowlist_externals =
	{[dev]allowlist_externals}
commands_pre =
	{[dev]commands}
commands =
	poetry run cz bump --changelog
	poetry build
	# poetry publish -r ...

