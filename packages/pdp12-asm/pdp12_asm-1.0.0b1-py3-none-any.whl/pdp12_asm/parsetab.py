
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND ASMIFM ASMIFN ASMIFZ ASMSKP ASTERISK BACKSLASH COMMA DECIMAL DOT EJECT EQUALS EXCLAMATION FIELD I INSTRUCTION LIST LISTAPE LMODE LODSYM MINUS NOLIST NUMBER OCTAL PAGE PLUS PMODE P_CLA P_EXTENDED_ARITHMETIC P_EXTENDED_ARITHMETIC_LONG P_OPERATE_1 P_OPERATE_2 SAVSYM SEGMNT STATEMENT_END SYMBOL TAPE_DIRECTION TEXT Zprogram : empty\n               | program empty\n               | program machine_codeempty : pseudo_no_args STATEMENT_END\n             | pseudo_with_args STATEMENT_ENDpseudo_with_args : SEGMNT expressionpseudo_no_args : OCTAL\n                      | DECIMAL\n                      | PMODE\n                      | LMODEmachine_code : INSTRUCTION STATEMENT_END\n                    | INSTRUCTION I STATEMENT_END\n                    | INSTRUCTION expression STATEMENT_END\n                    | INSTRUCTION I expression STATEMENT_ENDmachine_code : grouped_operate_1 STATEMENT_END\n                    | grouped_operate_2 STATEMENT_ENDgrouped_operate_1 : P_OPERATE_1\n                         | grouped_operate_1 P_OPERATE_1grouped_operate_2 : P_OPERATE_2\n                         | grouped_operate_2 P_OPERATE_2machine_code : expression STATEMENT_ENDempty : ASTERISK NUMBER STATEMENT_ENDempty : SYMBOL COMMA\n             | SYMBOL EQUALS expressionexpression : expression PLUS termexpression : expression MINUS term\n                  | MINUS expressionexpression : expression AMPERSAND termexpression : expression EXCLAMATION termexpression : termterm : NUMBER\n            | DOTterm : SYMBOLempty : STATEMENT_END'
    
_lr_action_items = {'ASTERISK':([0,1,2,4,13,14,15,23,25,26,27,29,32,33,38,41,43,45,46,47,48,49,50,51,52,54,55,],[6,6,-1,-34,-2,-3,-31,-30,-32,-4,-5,-23,-33,-21,-11,-15,-16,-27,-22,-24,-25,-26,-28,-29,-12,-13,-14,]),'SYMBOL':([0,1,2,4,12,13,14,15,18,23,24,25,26,27,29,30,32,33,34,35,36,37,38,39,41,43,45,46,47,48,49,50,51,52,54,55,],[7,16,-1,-34,32,-2,-3,-31,32,-30,32,-32,-4,-5,-23,32,-33,-21,32,32,32,32,-11,32,-15,-16,-27,-22,-24,-25,-26,-28,-29,-12,-13,-14,]),'STATEMENT_END':([0,1,2,3,4,5,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,31,32,33,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,],[4,4,-1,26,-34,27,-7,-8,-9,-10,-2,-3,-31,-33,33,38,41,43,-17,-19,-30,-32,-4,-5,46,-23,-6,-33,-21,-11,52,54,-15,-18,-16,-20,-27,-22,-24,-25,-26,-28,-29,-12,55,-13,-14,]),'OCTAL':([0,1,2,4,13,14,15,23,25,26,27,29,32,33,38,41,43,45,46,47,48,49,50,51,52,54,55,],[8,8,-1,-34,-2,-3,-31,-30,-32,-4,-5,-23,-33,-21,-11,-15,-16,-27,-22,-24,-25,-26,-28,-29,-12,-13,-14,]),'DECIMAL':([0,1,2,4,13,14,15,23,25,26,27,29,32,33,38,41,43,45,46,47,48,49,50,51,52,54,55,],[9,9,-1,-34,-2,-3,-31,-30,-32,-4,-5,-23,-33,-21,-11,-15,-16,-27,-22,-24,-25,-26,-28,-29,-12,-13,-14,]),'PMODE':([0,1,2,4,13,14,15,23,25,26,27,29,32,33,38,41,43,45,46,47,48,49,50,51,52,54,55,],[10,10,-1,-34,-2,-3,-31,-30,-32,-4,-5,-23,-33,-21,-11,-15,-16,-27,-22,-24,-25,-26,-28,-29,-12,-13,-14,]),'LMODE':([0,1,2,4,13,14,15,23,25,26,27,29,32,33,38,41,43,45,46,47,48,49,50,51,52,54,55,],[11,11,-1,-34,-2,-3,-31,-30,-32,-4,-5,-23,-33,-21,-11,-15,-16,-27,-22,-24,-25,-26,-28,-29,-12,-13,-14,]),'SEGMNT':([0,1,2,4,13,14,15,23,25,26,27,29,32,33,38,41,43,45,46,47,48,49,50,51,52,54,55,],[12,12,-1,-34,-2,-3,-31,-30,-32,-4,-5,-23,-33,-21,-11,-15,-16,-27,-22,-24,-25,-26,-28,-29,-12,-13,-14,]),'$end':([1,2,4,13,14,15,23,25,26,27,29,32,33,38,41,43,45,46,47,48,49,50,51,52,54,55,],[0,-1,-34,-2,-3,-31,-30,-32,-4,-5,-23,-33,-21,-11,-15,-16,-27,-22,-24,-25,-26,-28,-29,-12,-13,-14,]),'INSTRUCTION':([1,2,4,13,14,15,23,25,26,27,29,32,33,38,41,43,45,46,47,48,49,50,51,52,54,55,],[18,-1,-34,-2,-3,-31,-30,-32,-4,-5,-23,-33,-21,-11,-15,-16,-27,-22,-24,-25,-26,-28,-29,-12,-13,-14,]),'P_OPERATE_1':([1,2,4,13,14,15,19,21,23,25,26,27,29,32,33,38,41,42,43,45,46,47,48,49,50,51,52,54,55,],[21,-1,-34,-2,-3,-31,42,-17,-30,-32,-4,-5,-23,-33,-21,-11,-15,-18,-16,-27,-22,-24,-25,-26,-28,-29,-12,-13,-14,]),'P_OPERATE_2':([1,2,4,13,14,15,20,22,23,25,26,27,29,32,33,38,41,43,44,45,46,47,48,49,50,51,52,54,55,],[22,-1,-34,-2,-3,-31,44,-19,-30,-32,-4,-5,-23,-33,-21,-11,-15,-16,-20,-27,-22,-24,-25,-26,-28,-29,-12,-13,-14,]),'MINUS':([1,2,4,12,13,14,15,16,17,18,23,24,25,26,27,29,30,31,32,33,38,39,40,41,43,45,46,47,48,49,50,51,52,53,54,55,],[24,-1,-34,24,-2,-3,-31,-33,35,24,-30,24,-32,-4,-5,-23,24,35,-33,-21,-11,24,35,-15,-16,35,-22,35,-25,-26,-28,-29,-12,35,-13,-14,]),'NUMBER':([1,2,4,6,12,13,14,15,18,23,24,25,26,27,29,30,32,33,34,35,36,37,38,39,41,43,45,46,47,48,49,50,51,52,54,55,],[15,-1,-34,28,15,-2,-3,-31,15,-30,15,-32,-4,-5,-23,15,-33,-21,15,15,15,15,-11,15,-15,-16,-27,-22,-24,-25,-26,-28,-29,-12,-13,-14,]),'DOT':([1,2,4,12,13,14,15,18,23,24,25,26,27,29,30,32,33,34,35,36,37,38,39,41,43,45,46,47,48,49,50,51,52,54,55,],[25,-1,-34,25,-2,-3,-31,25,-30,25,-32,-4,-5,-23,25,-33,-21,25,25,25,25,-11,25,-15,-16,-27,-22,-24,-25,-26,-28,-29,-12,-13,-14,]),'COMMA':([7,16,],[29,29,]),'EQUALS':([7,16,],[30,30,]),'PLUS':([15,16,17,23,25,31,32,40,45,47,48,49,50,51,53,],[-31,-33,34,-30,-32,34,-33,34,34,34,-25,-26,-28,-29,34,]),'AMPERSAND':([15,16,17,23,25,31,32,40,45,47,48,49,50,51,53,],[-31,-33,36,-30,-32,36,-33,36,36,36,-25,-26,-28,-29,36,]),'EXCLAMATION':([15,16,17,23,25,31,32,40,45,47,48,49,50,51,53,],[-31,-33,37,-30,-32,37,-33,37,37,37,-25,-26,-28,-29,37,]),'I':([18,],[39,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'empty':([0,1,],[2,13,]),'pseudo_no_args':([0,1,],[3,3,]),'pseudo_with_args':([0,1,],[5,5,]),'machine_code':([1,],[14,]),'expression':([1,12,18,24,30,39,],[17,31,40,45,47,53,]),'grouped_operate_1':([1,],[19,]),'grouped_operate_2':([1,],[20,]),'term':([1,12,18,24,30,34,35,36,37,39,],[23,23,23,23,23,48,49,50,51,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> empty','program',1,'p_program','asm_parse.py',41),
  ('program -> program empty','program',2,'p_program','asm_parse.py',42),
  ('program -> program machine_code','program',2,'p_program','asm_parse.py',43),
  ('empty -> pseudo_no_args STATEMENT_END','empty',2,'p_pseudo_op','asm_parse.py',55),
  ('empty -> pseudo_with_args STATEMENT_END','empty',2,'p_pseudo_op','asm_parse.py',56),
  ('pseudo_with_args -> SEGMNT expression','pseudo_with_args',2,'p_pseudo_with_args','asm_parse.py',60),
  ('pseudo_no_args -> OCTAL','pseudo_no_args',1,'p_pseudo_no_args','asm_parse.py',70),
  ('pseudo_no_args -> DECIMAL','pseudo_no_args',1,'p_pseudo_no_args','asm_parse.py',71),
  ('pseudo_no_args -> PMODE','pseudo_no_args',1,'p_pseudo_no_args','asm_parse.py',72),
  ('pseudo_no_args -> LMODE','pseudo_no_args',1,'p_pseudo_no_args','asm_parse.py',73),
  ('machine_code -> INSTRUCTION STATEMENT_END','machine_code',2,'p_machine_code','asm_parse.py',89),
  ('machine_code -> INSTRUCTION I STATEMENT_END','machine_code',3,'p_machine_code','asm_parse.py',90),
  ('machine_code -> INSTRUCTION expression STATEMENT_END','machine_code',3,'p_machine_code','asm_parse.py',91),
  ('machine_code -> INSTRUCTION I expression STATEMENT_END','machine_code',4,'p_machine_code','asm_parse.py',92),
  ('machine_code -> grouped_operate_1 STATEMENT_END','machine_code',2,'p_pmode_operate_groups','asm_parse.py',119),
  ('machine_code -> grouped_operate_2 STATEMENT_END','machine_code',2,'p_pmode_operate_groups','asm_parse.py',120),
  ('grouped_operate_1 -> P_OPERATE_1','grouped_operate_1',1,'p_grouped_operate_1','asm_parse.py',125),
  ('grouped_operate_1 -> grouped_operate_1 P_OPERATE_1','grouped_operate_1',2,'p_grouped_operate_1','asm_parse.py',126),
  ('grouped_operate_2 -> P_OPERATE_2','grouped_operate_2',1,'p_grouped_operate_2','asm_parse.py',134),
  ('grouped_operate_2 -> grouped_operate_2 P_OPERATE_2','grouped_operate_2',2,'p_grouped_operate_2','asm_parse.py',135),
  ('machine_code -> expression STATEMENT_END','machine_code',2,'p_expression_literal','asm_parse.py',143),
  ('empty -> ASTERISK NUMBER STATEMENT_END','empty',3,'p_set_origin','asm_parse.py',148),
  ('empty -> SYMBOL COMMA','empty',2,'p_assignment','asm_parse.py',154),
  ('empty -> SYMBOL EQUALS expression','empty',3,'p_assignment','asm_parse.py',155),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','asm_parse.py',165),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','asm_parse.py',173),
  ('expression -> MINUS expression','expression',2,'p_expression_minus','asm_parse.py',174),
  ('expression -> expression AMPERSAND term','expression',3,'p_expression_and','asm_parse.py',189),
  ('expression -> expression EXCLAMATION term','expression',3,'p_expression_or','asm_parse.py',194),
  ('expression -> term','expression',1,'p_expression_term','asm_parse.py',199),
  ('term -> NUMBER','term',1,'p_term','asm_parse.py',204),
  ('term -> DOT','term',1,'p_term','asm_parse.py',205),
  ('term -> SYMBOL','term',1,'p_term_symbol','asm_parse.py',213),
  ('empty -> STATEMENT_END','empty',1,'p_blank_lines','asm_parse.py',218),
]
