# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from equinix_metal.models.address import Address
from equinix_metal.models.device_metro import DeviceMetro

class IPReservationFacility(BaseModel):
    """
    IPReservationFacility
    """
    address: Optional[Address] = None
    code: Optional[StrictStr] = None
    features: Optional[conlist(StrictStr)] = None
    href: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    ip_ranges: Optional[conlist(StrictStr)] = Field(None, description="IP ranges registered in facility. Can be used for GeoIP location")
    metro: Optional[DeviceMetro] = None
    name: Optional[StrictStr] = None
    __properties = ["address", "code", "features", "href", "id", "ip_ranges", "metro", "name"]

    @validator('features')
    def features_validate_enum(cls, v):
        if v is None:
            return v
        for i in v:
            if i not in ('baremetal', 'backend_transfer', 'layer_2', 'global_ipv4', 'ibx'):
                raise ValueError("each list item must be one of ('baremetal', 'backend_transfer', 'layer_2', 'global_ipv4', 'ibx')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IPReservationFacility:
        """Create an instance of IPReservationFacility from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metro
        if self.metro:
            _dict['metro'] = self.metro.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IPReservationFacility:
        """Create an instance of IPReservationFacility from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return IPReservationFacility.parse_obj(obj)

        _obj = IPReservationFacility.parse_obj({
            "address": Address.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "code": obj.get("code"),
            "features": obj.get("features"),
            "href": obj.get("href"),
            "id": obj.get("id"),
            "ip_ranges": obj.get("ip_ranges"),
            "metro": DeviceMetro.from_dict(obj.get("metro")) if obj.get("metro") is not None else None,
            "name": obj.get("name")
        })
        return _obj

