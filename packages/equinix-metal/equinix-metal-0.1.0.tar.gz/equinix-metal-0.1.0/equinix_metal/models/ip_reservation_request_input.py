# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

class IPReservationRequestInput(BaseModel):
    """
    IPReservationRequestInput
    """
    comments: Optional[StrictStr] = None
    customdata: Optional[Dict[str, Any]] = None
    details: Optional[StrictStr] = None
    facility: Optional[StrictStr] = None
    fail_on_approval_required: Optional[StrictBool] = None
    href: Optional[StrictStr] = None
    metro: Optional[StrictStr] = Field(None, description="The code of the metro you are requesting the IP reservation in.")
    quantity: StrictInt = ...
    tags: Optional[conlist(StrictStr)] = None
    type: StrictStr = ...
    __properties = ["comments", "customdata", "details", "facility", "fail_on_approval_required", "href", "metro", "quantity", "tags", "type"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IPReservationRequestInput:
        """Create an instance of IPReservationRequestInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IPReservationRequestInput:
        """Create an instance of IPReservationRequestInput from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return IPReservationRequestInput.parse_obj(obj)

        _obj = IPReservationRequestInput.parse_obj({
            "comments": obj.get("comments"),
            "customdata": obj.get("customdata"),
            "details": obj.get("details"),
            "facility": obj.get("facility"),
            "fail_on_approval_required": obj.get("fail_on_approval_required"),
            "href": obj.get("href"),
            "metro": obj.get("metro"),
            "quantity": obj.get("quantity"),
            "tags": obj.get("tags"),
            "type": obj.get("type")
        })
        return _obj

