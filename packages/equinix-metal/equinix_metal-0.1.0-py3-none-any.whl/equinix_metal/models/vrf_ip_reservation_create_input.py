# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class VrfIpReservationCreateInput(BaseModel):
    """
    VrfIpReservationCreateInput
    """
    cidr: StrictInt = Field(..., description="The size of the VRF IP Reservation's subnet")
    customdata: Optional[Dict[str, Any]] = None
    details: Optional[StrictStr] = None
    href: Optional[StrictStr] = None
    network: StrictStr = Field(..., description="The starting address for this VRF IP Reservation's subnet")
    tags: Optional[conlist(StrictStr)] = None
    type: StrictStr = Field(..., description="Must be set to 'vrf'")
    vrf_id: StrictStr = Field(..., description="The ID of the VRF in which this VRF IP Reservation is created. The VRF must have an existing IP Range that contains the requested subnet. This field may be aliased as just 'vrf'.")
    __properties = ["cidr", "customdata", "details", "href", "network", "tags", "type", "vrf_id"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VrfIpReservationCreateInput:
        """Create an instance of VrfIpReservationCreateInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VrfIpReservationCreateInput:
        """Create an instance of VrfIpReservationCreateInput from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return VrfIpReservationCreateInput.parse_obj(obj)

        _obj = VrfIpReservationCreateInput.parse_obj({
            "cidr": obj.get("cidr"),
            "customdata": obj.get("customdata"),
            "details": obj.get("details"),
            "href": obj.get("href"),
            "network": obj.get("network"),
            "tags": obj.get("tags"),
            "type": obj.get("type"),
            "vrf_id": obj.get("vrf_id")
        })
        return _obj

