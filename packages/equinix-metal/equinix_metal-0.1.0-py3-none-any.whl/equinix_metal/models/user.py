# coding: utf-8

"""
    Metal API

    desc  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@equinixmetal.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, conlist
from equinix_metal.models.href import Href

class User(BaseModel):
    """
    User
    """
    avatar_thumb_url: Optional[StrictStr] = None
    avatar_url: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    customdata: Optional[Dict[str, Any]] = None
    email: Optional[StrictStr] = None
    emails: Optional[conlist(Href)] = None
    first_name: Optional[StrictStr] = None
    fraud_score: Optional[StrictStr] = None
    full_name: Optional[StrictStr] = None
    href: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    last_login_at: Optional[datetime] = None
    last_name: Optional[StrictStr] = None
    max_organizations: Optional[StrictInt] = None
    max_projects: Optional[StrictInt] = None
    phone_number: Optional[StrictStr] = None
    short_id: Optional[StrictStr] = None
    timezone: Optional[StrictStr] = None
    two_factor_auth: Optional[StrictStr] = None
    updated_at: Optional[datetime] = None
    __properties = ["avatar_thumb_url", "avatar_url", "created_at", "customdata", "email", "emails", "first_name", "fraud_score", "full_name", "href", "id", "last_login_at", "last_name", "max_organizations", "max_projects", "phone_number", "short_id", "timezone", "two_factor_auth", "updated_at"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> User:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in emails (list)
        _items = []
        if self.emails:
            for _item in self.emails:
                if _item:
                    _items.append(_item.to_dict())
            _dict['emails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> User:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return User.parse_obj(obj)

        _obj = User.parse_obj({
            "avatar_thumb_url": obj.get("avatar_thumb_url"),
            "avatar_url": obj.get("avatar_url"),
            "created_at": obj.get("created_at"),
            "customdata": obj.get("customdata"),
            "email": obj.get("email"),
            "emails": [Href.from_dict(_item) for _item in obj.get("emails")] if obj.get("emails") is not None else None,
            "first_name": obj.get("first_name"),
            "fraud_score": obj.get("fraud_score"),
            "full_name": obj.get("full_name"),
            "href": obj.get("href"),
            "id": obj.get("id"),
            "last_login_at": obj.get("last_login_at"),
            "last_name": obj.get("last_name"),
            "max_organizations": obj.get("max_organizations"),
            "max_projects": obj.get("max_projects"),
            "phone_number": obj.get("phone_number"),
            "short_id": obj.get("short_id"),
            "timezone": obj.get("timezone"),
            "two_factor_auth": obj.get("two_factor_auth"),
            "updated_at": obj.get("updated_at")
        })
        return _obj

