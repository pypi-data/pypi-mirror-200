# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['django_outbox_pattern',
 'django_outbox_pattern.management',
 'django_outbox_pattern.management.commands',
 'django_outbox_pattern.migrations']

package_data = \
{'': ['*']}

install_requires = \
['django>=3.2', 'stomp.py>=8.0.1,<9']

setup_kwargs = {
    'name': 'django-outbox-pattern',
    'version': '0.11.3',
    'description': 'A django application to make it easier to use the transactional outbox pattern',
    'long_description': '# Django outbox pattern\n\n[![Build Status](https://dev.azure.com/juntos-somos-mais-loyalty/python/_apis/build/status/juntossomosmais.django-outbox-pattern?branchName=main)](https://dev.azure.com/juntos-somos-mais-loyalty/python/_build/latest?definitionId=307&branchName=main)\n[![Maintainability Rating](https://sonarcloud.io/api/project_badges/measure?project=juntossomosmais_django-outbox-pattern&metric=sqale_rating)](https://sonarcloud.io/summary/new_code?id=juntossomosmais_django-outbox-pattern)\n[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=juntossomosmais_django-outbox-pattern&metric=coverage)](https://sonarcloud.io/summary/new_code?id=juntossomosmais_django-outbox-pattern)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-black)](https://github.com/ambv/black)\n[![Downloads](https://pepy.tech/badge/django-outbox-pattern)](https://pepy.tech/project/django-outbox-pattern)\n[![Downloads](https://pepy.tech/badge/django-outbox-pattern/month)](https://pepy.tech/project/django-outbox-pattern/month)\n[![Downloads](https://pepy.tech/badge/django-outbox-pattern/week)](https://pepy.tech/project/django-outbox-pattern/week)\n[![PyPI version](https://badge.fury.io/py/django-outbox-pattern.svg)](https://badge.fury.io/py/django-outbox-pattern)\n[![GitHub](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/juntossomosmais/django-outbox-pattern/blob/master/LICENSE)\n\nA django application to make it easier to use\nthe [transactional outbox pattern](https://microservices.io/patterns/data/transactional-outbox.html)\n\n## Installation\n\nInstall django-outbox-pattern with pip\n\n```bash\npip install django-outbox-pattern\n```\n\nAdd to settings\n\n```python\n# settings.py\n\nINSTALLED_APPS = [\n    "django_outbox_pattern",\n]\n\nDJANGO_OUTBOX_PATTERN = {\n    "DEFAULT_STOMP_HOST_AND_PORTS": [("127.0.0.1", 61613)],\n    "DEFAULT_STOMP_USERNAME": "guest",\n    "DEFAULT_STOMP_PASSCODE": "guest",\n}\n\n```\n\nRum migrations\n\n```shell\npython manage.py migrate\n```\n\n## Usage/Examples\n\nThe `publish` decorator adds the [outbox table](https://github.com/juntossomosmais/django-outbox-pattern/blob/main/django_outbox_pattern/models.py#L14) to the model. `publish` accepts list of Config. The Config accepts four params the `destination` which is required,\n`fields` which the default are all the fields of the model, `serializer` which by default adds the `id` in the message\nto be sent and `version` which by default is empty.\n\n> Note: `fields` and `serializer` are mutually exclusive, serializer overwrites the fields.\n\n### The Config typing\n\n```python\nfrom typing import List\nfrom typing import NamedTuple\nfrom typing import Optional\n\nclass Config(NamedTuple):\n    destination: str\n    fields: Optional[List[str]] = None\n    serializer: Optional[str] = None\n    version: Optional[str] = None\n```\n\n#### Only destination in config\n\n```python\nfrom django.db import models\nfrom django_outbox_pattern.decorators import Config\nfrom django_outbox_pattern.decorators import publish\n\n\n@publish([Config(destination=\'/topic/my_route_key\')])\nclass MyModel(models.Model):\n    field_one = models.CharField(max_length=100)\n    field_two = models.CharField(max_length=100)\n```\n\nThis generates the following data to be sent.\n\n```text\nPublished(destination=\'/topic/my_route_key\', body=\'{"id": 1, "field_one": "Field One", "field_two": "Field Two"}\')\n```\n\n#### Change destination version in config\n\n```python\nfrom django.db import models\nfrom django_outbox_pattern.decorators import Config\nfrom django_outbox_pattern.decorators import publish\n\n\n@publish([Config(destination=\'/topic/my_route_key\', version="v1")])\nclass MyModel(models.Model):\n    field_one = models.CharField(max_length=100)\n    field_two = models.CharField(max_length=100)\n```\n\nThis generates the following data to be sent.\n\n```text\nPublished(destination=\'/topic/my_route_key.v1\', body=\'{"id": 1, "field_one": "One", "field_two": "Two"}\', version="v1")\n```\n\n#### With destinations and fields\n\n```python\nfrom django.db import models\nfrom django_outbox_pattern.decorators import Config\nfrom django_outbox_pattern.decorators import publish\n\n\n@publish([Config(destination=\'/topic/my_route_key\', fields=["field_one"])])\nclass MyModel(models.Model):\n    field_one = models.CharField(max_length=100)\n    field_two = models.CharField(max_length=100)\n```\n\nThis generates the following data to be sent.\n\n```text\nPublished(destination=\'/topic/my_route_key\', body=\'{"id": 1, "field_one": "Field One"}\')\n```\n\n#### With destinations and serializer\n\n```python\nfrom django.db import models\nfrom django_outbox_pattern.decorators import Config\nfrom django_outbox_pattern.decorators import publish\n\n\n@publish([Config(destination=\'/topic/my_route_key\', serializer=\'my_serializer\')])\nclass MyModel(models.Model):\n    field_one = models.CharField(max_length=100)\n    field_two = models.CharField(max_length=100)\n\n    def my_serializer(self):\n        return {\n            "id": self.id,\n            "one": self.field_one,\n            "two": self.field_two\n        }\n```\n\nThis generates the following data to be sent.\n\n```text\nPublished(destination=\'/topic/my_route_key\', body=\'{"id": 1, "one": "Field One", "two": "Field Two"}\')\n```\n\n#### With multi destinations and serializers\n\n```python\nfrom django.db import models\nfrom django_outbox_pattern.decorators import Config\nfrom django_outbox_pattern.decorators import publish\n\n\n@publish([\n    Config(destination=\'/topic/my_route_key_1\', serializer="my_serializer_1"),\n    Config(destination=\'/topic/my_route_key_2\', serializer="my_serializer_2"),\n])\nclass MyModel(models.Model):\n    field_one = models.CharField(max_length=100)\n    field_two = models.CharField(max_length=100)\n\n    def my_serializer_1(self):\n        return {\n            "id": self.id,\n            "one": self.field_one,\n        }\n\n    def my_serializer_2(self):\n        return {\n            "id": self.id,\n            "two": self.field_two\n        }\n```\n\nThis generates the following data to be sent.\n\n```text\nPublished(destination=\'/topic/my_route_key_1\', body=\'{"id": 1, "one": "Field One"}\')\nPublished(destination=\'/topic/my_route_key_2\', body=\'{"id": 1, "two": "Field Two"}\')\n```\n\n## Publish/Subscribe commands\n\n##### Publish command\n\nTo send the messages added to the Published model it is necessary to start the producer with the following command.\n\n```shell\npython manage.py publish\n```\n\n##### Publish message via outbox\n\nIt is possible to use the outbox pattern with a custom logic before sending the message to the outbox table.\n```python\nfrom django.db import transaction\nfrom django_outbox_pattern.models import Published\n\ndef custom_business_logic() -> None:\n\n    # run your custom business logic\n\n    with transaction.atomic():\n        YourBusinessModel.objects.create()\n        Published.objects.create(destination="your_destination", body={"some": "data"})\n\n```\nWith this you can ensure that the messages can be published in the same database transaction of your business logic.\n\n##### Publish message directly\n\nIt is possible to send messages directly without using the outbox table\n\n```python\n# send.py\nfrom django_outbox_pattern.factories import factory_producer\n\ndef send_event(destination, body, headers):\n    with factory_producer() as producer:\n        producer.send_event(destination=destination, body=body, headers=headers)\n```\n\n##### Subscribe command\n\nDjango outbox pattern also provides a consumer that can be used to receive outgoing messages.\n\nCreate a function that receives an instance of `django_outbox_pattern.payloads.Payload`\n\n```python\n# callbacks.py\n\ndef callback(payload):\n    try:\n        # Do anything\n        payload.ack()\n    except Exception:\n        # Nack is automatically called in case of errors, but you might want to handle the error in another way\n        payload.nack()\n```\n\nTo start the consumer, after creating the callback, it is necessary to execute the following command.\n\n```shell\npython manage.py subscribe \'dotted.path.to.callback` \'destination\' \'queue_name\'\n```\nThe command takes three parameters:\n\n`callback` : the path to the callback function.\n\n`destination` : the destination where messages will be consumed following one of the [stomp](https://www.rabbitmq.com/stomp.html) patterns\n\n`queue_name`(optional): the name of the queue that will be consumed. If not provided, the routing_key of the destination will be used.\n\n## Settings\n\n**DEFAULT_CONNECTION_CLASS**\n\nThe stomp.py class responsible for connecting to the broker. Default: `stomp.StompConnection12`\n\n**DEFAULT_CONSUMER_LISTENER_CLASS**\n\nThe consumer listener class. Default: `django_outbox_pattern.listeners.ConsumerListener`\n\n**DEFAULT_GENERATE_HEADERS**\n\nA function to add headers to the message. Default: `django_outbox_pattern.headers.generate_headers`\n\n**DEFAULT_MAXIMUM_BACKOFF**:\n\nMaximum wait time for connection attempts in seconds. Default: `3600` (1 hour)\n\n**DEFAULT_MAXIMUM_RETRY_ATTEMPTS**\n\nMaximum number of message resend attempts. Default: `50`\n\n**DEFAULT_PAUSE_FOR_RETRY**\n\nPausing for attempts to resend messages in seconds. Defualt: `240` (4 minutes)\n\n**DEFAULT_WAIT_RETRY**\n\nTime between attempts to send messages after the pause. Default: `60` (1 minute)\n\n**DEFAULT_PRODUCER_LISTENER_CLASS**:\n\nThe producer listener class. Default: `django_outbox_pattern.listeners.ProducerListener`\n\n**DEFAULT_STOMP_HOST_AND_PORTS**\n\nList of host and port tuples to try to connect to the broker. Default `[("127.0.0.1", 61613)]`\n\n**DEFAULT_STOMP_QUEUE_HEADERS**\n\nHeaders for queues. Default: `{"durable": "true", "auto-delete": "false", "prefetch-count": "1"}`\n\n**DEFAULT_STOMP_HEARTBEATS**\n\nTime tuples for input and output heartbeats. Default:  `(10000, 10000)`\n\n**DEFAULT_STOMP_VHOST**\n\nVirtual host. Default: "/"\n\n**DEFAULT_STOMP_USERNAME**\n\nUsername for connection. Default: `"guest"`\n\n**DEFAULT_STOMP_PASSCODE**\n\nPassword for connection. Default: `"guest"`\n\n**DEFAULT_STOMP_USE_SSL**\n\nFor ssl connections. Default: False\n\n**DEFAULT_STOMP_KEY_FILE**\n\nThe path to a X509 key file. Default: None\n\n**DEFAULT_STOMP_CERT_FILE**\n\nThe path to a X509 certificate. Default: None\n\n\n**DEFAULT_STOMP_CA_CERTS**\n\nThe path to the a file containing CA certificates to validate the server against.\nIf this is not set, server side certificate validation is not done. Default: None\n\n**DEFAULT_STOMP_CERT_VALIDATOR**\n\nFunction which performs extra validation on the client certificate, for example\nchecking the returned certificate has a commonName attribute equal to the\nhostname (to avoid man in the middle attacks).\nThe signature is: (OK, err_msg) = validation_function(cert, hostname)\nwhere OK is a boolean, and cert is a certificate structure\nas returned by ssl.SSLSocket.getpeercert(). Default: None\n\n**DEFAULT_STOMP_SSL_VERSION**\n\nSSL protocol to use for the connection. This should be one of the PROTOCOL_x\nconstants provided by the ssl module. The default is ssl.PROTOCOL_TLSv1.\n\n**DEFAULT_STOMP_SSL_PASSWORD**\n\nSSL password\n',
    'author': 'Hugo Brilhante',
    'author_email': 'hugobrilhante@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/juntossomosmais/django-outbox-pattern',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
